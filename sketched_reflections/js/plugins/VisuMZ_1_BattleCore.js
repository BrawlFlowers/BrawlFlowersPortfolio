//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.82;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.82] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x57e85a=_0x89d4;(function(_0x5dcecf,_0x5befe3){const _0x6113fa=_0x89d4,_0x1998de=_0x5dcecf();while(!![]){try{const _0x40574b=parseInt(_0x6113fa(0xd40))/0x1+parseInt(_0x6113fa(0x2ba))/0x2+-parseInt(_0x6113fa(0x777))/0x3+-parseInt(_0x6113fa(0x5a3))/0x4*(-parseInt(_0x6113fa(0x9a4))/0x5)+parseInt(_0x6113fa(0x979))/0x6*(-parseInt(_0x6113fa(0x3a7))/0x7)+parseInt(_0x6113fa(0xbdb))/0x8+-parseInt(_0x6113fa(0xc60))/0x9;if(_0x40574b===_0x5befe3)break;else _0x1998de['push'](_0x1998de['shift']());}catch(_0x3ceafb){_0x1998de['push'](_0x1998de['shift']());}}}(_0x5ad3,0x46871));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x57e85a(0x1db)](function(_0xe695d0){const _0xe823b2=_0x57e85a;return _0xe695d0[_0xe823b2(0x981)]&&_0xe695d0['description'][_0xe823b2(0x3af)]('['+label+']');})[0x0];VisuMZ[label][_0x57e85a(0x478)]=VisuMZ[label][_0x57e85a(0x478)]||{},VisuMZ[_0x57e85a(0x15e)]=function(_0x48d33c,_0x55f582){const _0x1f91b4=_0x57e85a;for(const _0x1b1e64 in _0x55f582){if(_0x1b1e64[_0x1f91b4(0x392)](/(.*):(.*)/i)){if(_0x1f91b4(0x962)!=='MUvaW'){const _0xdb8001=String(RegExp['$1']),_0x615c18=String(RegExp['$2'])[_0x1f91b4(0x307)]()[_0x1f91b4(0xdf5)]();let _0x3f8d79,_0x166528,_0x389bb2;switch(_0x615c18){case _0x1f91b4(0xd32):_0x3f8d79=_0x55f582[_0x1b1e64]!==''?Number(_0x55f582[_0x1b1e64]):0x0;break;case _0x1f91b4(0x938):_0x166528=_0x55f582[_0x1b1e64]!==''?JSON['parse'](_0x55f582[_0x1b1e64]):[],_0x3f8d79=_0x166528[_0x1f91b4(0x260)](_0x5d11ef=>Number(_0x5d11ef));break;case _0x1f91b4(0x495):_0x3f8d79=_0x55f582[_0x1b1e64]!==''?eval(_0x55f582[_0x1b1e64]):null;break;case'ARRAYEVAL':_0x166528=_0x55f582[_0x1b1e64]!==''?JSON[_0x1f91b4(0x1ee)](_0x55f582[_0x1b1e64]):[],_0x3f8d79=_0x166528[_0x1f91b4(0x260)](_0x2280ab=>eval(_0x2280ab));break;case _0x1f91b4(0x50f):_0x3f8d79=_0x55f582[_0x1b1e64]!==''?JSON[_0x1f91b4(0x1ee)](_0x55f582[_0x1b1e64]):'';break;case _0x1f91b4(0x490):_0x166528=_0x55f582[_0x1b1e64]!==''?JSON[_0x1f91b4(0x1ee)](_0x55f582[_0x1b1e64]):[],_0x3f8d79=_0x166528['map'](_0x100292=>JSON[_0x1f91b4(0x1ee)](_0x100292));break;case _0x1f91b4(0x437):_0x3f8d79=_0x55f582[_0x1b1e64]!==''?new Function(JSON[_0x1f91b4(0x1ee)](_0x55f582[_0x1b1e64])):new Function(_0x1f91b4(0xc0d));break;case _0x1f91b4(0xc9a):_0x166528=_0x55f582[_0x1b1e64]!==''?JSON[_0x1f91b4(0x1ee)](_0x55f582[_0x1b1e64]):[],_0x3f8d79=_0x166528[_0x1f91b4(0x260)](_0x3eeaf6=>new Function(JSON['parse'](_0x3eeaf6)));break;case'STR':_0x3f8d79=_0x55f582[_0x1b1e64]!==''?String(_0x55f582[_0x1b1e64]):'';break;case _0x1f91b4(0xca7):_0x166528=_0x55f582[_0x1b1e64]!==''?JSON[_0x1f91b4(0x1ee)](_0x55f582[_0x1b1e64]):[],_0x3f8d79=_0x166528[_0x1f91b4(0x260)](_0x2a72f8=>String(_0x2a72f8));break;case _0x1f91b4(0x6d2):_0x389bb2=_0x55f582[_0x1b1e64]!==''?JSON['parse'](_0x55f582[_0x1b1e64]):{},_0x48d33c[_0xdb8001]={},VisuMZ['ConvertParams'](_0x48d33c[_0xdb8001],_0x389bb2);continue;case _0x1f91b4(0x656):_0x166528=_0x55f582[_0x1b1e64]!==''?JSON[_0x1f91b4(0x1ee)](_0x55f582[_0x1b1e64]):[],_0x3f8d79=_0x166528[_0x1f91b4(0x260)](_0xe28403=>VisuMZ[_0x1f91b4(0x15e)]({},JSON[_0x1f91b4(0x1ee)](_0xe28403)));break;default:continue;}_0x48d33c[_0xdb8001]=_0x3f8d79;}else this[_0x1f91b4(0x7a4)]='';}}return _0x48d33c;},(_0x4a20bb=>{const _0x4a93c8=_0x57e85a,_0x2691fc=_0x4a20bb[_0x4a93c8(0x7a3)];for(const _0x3f726e of dependencies){if(!Imported[_0x3f726e]){alert(_0x4a93c8(0x1d5)[_0x4a93c8(0x554)](_0x2691fc,_0x3f726e)),SceneManager[_0x4a93c8(0x4f1)]();break;}}const _0x31e4b5=_0x4a20bb[_0x4a93c8(0xc08)];if(_0x31e4b5[_0x4a93c8(0x392)](/\[Version[ ](.*?)\]/i)){const _0x3df008=Number(RegExp['$1']);_0x3df008!==VisuMZ[label]['version']&&(alert(_0x4a93c8(0x82a)['format'](_0x2691fc,_0x3df008)),SceneManager[_0x4a93c8(0x4f1)]());}if(_0x31e4b5[_0x4a93c8(0x392)](/\[Tier[ ](\d+)\]/i)){if(_0x4a93c8(0x596)===_0x4a93c8(0x596)){const _0x108d68=Number(RegExp['$1']);if(_0x108d68<tier){if(_0x4a93c8(0x45f)!=='gXvXB')return this[_0x4a93c8(0x879)]=this[_0x4a93c8(0x879)]||{},this[_0x4a93c8(0x879)][_0x3cb047]!==_0x48188c;else alert(_0x4a93c8(0xc45)['format'](_0x2691fc,_0x108d68,tier)),SceneManager[_0x4a93c8(0x4f1)]();}else tier=Math[_0x4a93c8(0xde7)](_0x108d68,tier);}else return!![];}VisuMZ[_0x4a93c8(0x15e)](VisuMZ[label]['Settings'],_0x4a20bb[_0x4a93c8(0x7eb)]);})(pluginData),VisuMZ[_0x57e85a(0xdd4)]=function(_0x103a87){const _0x12ff4b=_0x57e85a;let _0x2f0d8=[];for(const _0x3a4224 of _0x103a87){_0x2f0d8=_0x2f0d8[_0x12ff4b(0x60f)](VisuMZ[_0x12ff4b(0x39b)](_0x3a4224));}return _0x2f0d8['filter'](_0x54e2d6=>_0x54e2d6);},VisuMZ[_0x57e85a(0x39b)]=function(_0x4acd0e){const _0x8418f3=_0x57e85a,_0x17f7b7=BattleManager[_0x8418f3(0x3ef)]()[_0x8418f3(0x1db)](_0x5aefc5=>_0x5aefc5&&_0x5aefc5[_0x8418f3(0x6e8)]()),_0x2cfb80=BattleManager['_subject'],_0x31e430=BattleManager[_0x8418f3(0x3be)],_0x1f8778=BattleManager[_0x8418f3(0xc11)]?BattleManager[_0x8418f3(0xc11)][_0x8418f3(0x241)](0x0):_0x17f7b7;_0x4acd0e=_0x4acd0e[_0x8418f3(0x2bc)]()[_0x8418f3(0xdf5)]();if(_0x4acd0e===_0x8418f3(0x7c7))return[_0x2cfb80];else{if(_0x4acd0e==='current\x20target')return[_0x31e430];else{if(_0x4acd0e===_0x8418f3(0xab0)){if(_0x31e430){if(_0x8418f3(0x733)!=='Wejkh'){const _0x5d0f11=_0x1f8778[_0x8418f3(0x9b6)](_0x31e430);return _0x5d0f11>=0x0?[_0x1f8778[_0x5d0f11-0x1]||_0x31e430]:[_0x31e430];}else return this[_0x8418f3(0xd8b)]()?this[_0x8418f3(0x8ab)]()&&this[_0x8418f3(0x8ab)]()[_0x8418f3(0x2df)]()&&this['currentAction']()[_0x8418f3(0xcba)]():this[_0x8418f3(0x8ab)]()&&this[_0x8418f3(0x8ab)]()[_0x8418f3(0x2df)]()&&this[_0x8418f3(0x8ab)]()[_0x8418f3(0xac7)]();}}else{if(_0x4acd0e==='text\x20target'){if(_0x8418f3(0x1e0)!==_0x8418f3(0x9ea)){if(_0x31e430){const _0x2e5351=_0x1f8778[_0x8418f3(0x9b6)](_0x31e430);return _0x2e5351>=0x0?[_0x1f8778[_0x2e5351+0x1]||_0x31e430]:[_0x31e430];}}else _0x32bc54['push'](new _0x1cb6d5(_0x2dbe7b));}else{if(_0x4acd0e===_0x8418f3(0x25a))return _0x1f8778;else{if(_0x4acd0e===_0x8418f3(0xdb4)){if('dOukU'!==_0x8418f3(0x363))return[_0x2cfb80]['concat'](_0x1f8778);else{if(!_0x1cfcef[_0x8418f3(0x4b2)]())return;if(!_0x3f5ec8[_0x8418f3(0x272)])return;_0x1a5aaa['ConvertParams'](_0x42d45d,_0x1f452b);const _0x1fd1fe=_0x48170f['getLastPluginCommandInterpreter'](),_0x114e4c=_0x19d6a8[_0x8418f3(0xd5b)];if(!_0x1fd1fe)return;_0x31e724['setBattleZoom'](_0x3f13c2['Scale'],_0x1cca22[_0x8418f3(0x692)],_0x70aef7['EasingType']);if(_0x114e4c)_0x1fd1fe[_0x8418f3(0x1f9)](_0x8418f3(0x242));}}else{if(_0x4acd0e===_0x8418f3(0xcd8))return _0x17f7b7[_0x8418f3(0x1db)](_0x2a577b=>_0x2a577b!==_0x2cfb80&&!_0x1f8778[_0x8418f3(0x3af)](_0x2a577b)&&_0x2a577b[_0x8418f3(0x29f)]());else{if(_0x4acd0e===_0x8418f3(0xc50))return[VisuMZ['GetActionSequenceSpecialTarget']()];else{if(_0x4acd0e[_0x8418f3(0x392)](/SPECIAL (.*)>/i)){const _0x593629=String(RegExp['$1'])[_0x8418f3(0xc06)](',')['map'](_0x29a1eb=>_0x29a1eb[_0x8418f3(0xdf5)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x593629)];}}}}}}}}}if(_0x2cfb80){if(_0x4acd0e===_0x8418f3(0x1af))return'dIdms'===_0x8418f3(0xce7)?_0x2cfb80['friendsUnit']()[_0x8418f3(0x8a1)]():(_0x4853bf=_0x22f0a4[_0x8418f3(0x307)]()[_0x8418f3(0xdf5)](),this[_0x8418f3(0x44d)]()===_0x2c7ab0);else{if(_0x4acd0e===_0x8418f3(0x59f))return'xZoGC'===_0x8418f3(0x1e7)?_0xe1ec35[_0x8418f3(0xa24)]()['length']||0x1:_0x2cfb80['friendsUnit']()[_0x8418f3(0x8a1)]()['filter'](_0x4f86e0=>_0x4f86e0!==_0x2cfb80);else{if(_0x4acd0e===_0x8418f3(0x173))return _0x2cfb80[_0x8418f3(0xafb)]()['aliveMembers']()['filter'](_0xb3d996=>_0xb3d996!==_0x31e430);else{if(_0x4acd0e===_0x8418f3(0x520))return _0x2cfb80[_0x8418f3(0xafb)]()[_0x8418f3(0x5cb)]();else{if(_0x4acd0e[_0x8418f3(0x392)](/FRIEND INDEX (\d+)/i)){if(_0x8418f3(0x519)!=='FlhBP'){if(this[_0x8418f3(0xa98)]===_0x57c2d2)this['initBattlePortrait']();return this[_0x8418f3(0xa98)];}else{const _0x30abeb=Number(RegExp['$1']);return[_0x2cfb80[_0x8418f3(0xafb)]()[_0x8418f3(0x828)]()[_0x30abeb]];}}}}}}if(_0x4acd0e===_0x8418f3(0x73a)){if(_0x8418f3(0xae3)===_0x8418f3(0xc98))this[_0x8418f3(0xbe3)]();else return _0x2cfb80[_0x8418f3(0xd05)]()[_0x8418f3(0x8a1)]();}else{if(_0x4acd0e===_0x8418f3(0xdf4)){if(_0x8418f3(0x7c2)===_0x8418f3(0x7c2))return _0x2cfb80['opponentsUnit']()[_0x8418f3(0x8a1)]()[_0x8418f3(0x1db)](_0x2d3b49=>_0x2d3b49!==_0x31e430);else{if(!_0xbe14cc[_0x8418f3(0x4b2)]())return;if(!_0xd05d5a['VisuMZ_2_BattleSystemPTB'])return;if(!_0x5ca03d['isPTB']())return;_0x1f9bed[_0x8418f3(0x15e)](_0x264b94,_0x93f1f7);const _0x31f388=_0x414853['_subject']['friendsUnit'](),_0x4dc494=_0x333c0b['Override'],_0x15acb6=_0x5c1db2[_0x8418f3(0x3e6)]||'unchanged',_0x259919=_0x4642c3[_0x8418f3(0x4f2)]||'unchanged',_0x47d309=_0x56fda1[_0x8418f3(0x562)]||0x0,_0x1b5ab3=_0x1c9550[_0x8418f3(0x538)]||0x0;(_0x31f388[_0x8418f3(0xad2)]()||_0x4dc494)&&(_0x4dc494&&(_0x31f388[_0x8418f3(0x727)]=_0x31f388[_0x8418f3(0x727)]||{},_0x31f388[_0x8418f3(0x727)][_0x8418f3(0x952)]=0x0),_0x31f388[_0x8418f3(0x342)](_0x15acb6,_0x259919,_0x47d309,_0x1b5ab3));}}else{if(_0x4acd0e===_0x8418f3(0xaf8))return _0x2cfb80[_0x8418f3(0xd05)]()[_0x8418f3(0x5cb)]();else{if(_0x4acd0e[_0x8418f3(0x392)](/OPPONENT INDEX (\d+)/i)){if('clNyn'!==_0x8418f3(0xced)){const _0x48d9c3=_0x91674e[_0x8418f3(0x734)]['Settings']['Mechanics'],_0x5ed2c8=_0x48d9c3[_0x8418f3(0x2b8)];_0x5ed2c8&&_0x3fa2a9[_0x8418f3(0x734)][_0x8418f3(0x3c4)](_0x5ed2c8)&&(this[_0x8418f3(0x851)]=!![],_0x3bbd51[_0x8418f3(0x428)](_0x48d9c3[_0x8418f3(0x2b8)]),_0x2f14ec[_0x8418f3(0xc2c)](),_0x2b25b9[_0x8418f3(0x7b6)][_0x8418f3(0x7a1)]=!![]),_0x48d9c3[_0x8418f3(0x5a7)]>0x0&&(this[_0x8418f3(0xba4)]=!![]);}else{const _0x5ad1ed=Number(RegExp['$1']);return[_0x2cfb80[_0x8418f3(0xd05)]()[_0x8418f3(0x828)]()[_0x5ad1ed]];}}}}}}if(_0x4acd0e==='alive\x20actors'){if(_0x8418f3(0xb58)===_0x8418f3(0xb31))_0x311bfa['BattleCore']['ParseWeaponNotetags']&&_0x1008eb[_0x8418f3(0x734)][_0x8418f3(0xc5d)][_0x8418f3(0xa23)](this,_0x5b9298),_0x22eaf1[_0x8418f3(0x734)][_0x8418f3(0x3e2)](_0x1428e8);else return $gameParty[_0x8418f3(0x8a1)]();}else{if(_0x4acd0e==='alive\x20actors\x20not\x20user')return $gameParty[_0x8418f3(0x8a1)]()[_0x8418f3(0x1db)](_0x51bcbc=>_0x51bcbc!==_0x2cfb80);else{if(_0x4acd0e===_0x8418f3(0xc4b))return $gameParty[_0x8418f3(0x8a1)]()['filter'](_0x378304=>_0x378304!==_0x31e430);else{if(_0x4acd0e===_0x8418f3(0x8b4))return $gameParty['deadMembers']();else{if(_0x4acd0e[_0x8418f3(0x392)](/ACTOR INDEX (\d+)/i)){const _0x554ebd=Number(RegExp['$1']);return[$gameParty['members']()[_0x554ebd]];}else{if(_0x4acd0e['match'](/ACTOR ID (\d+)/i)){const _0x4fbe8b=Number(RegExp['$1']);return[$gameActors[_0x8418f3(0x2ee)](_0x4fbe8b)];}}}}}}if(_0x4acd0e===_0x8418f3(0x371))return $gameTroop['aliveMembers']();else{if(_0x4acd0e==='alive\x20enemies\x20not\x20user')return $gameTroop[_0x8418f3(0x8a1)]()['filter'](_0x1a3995=>_0x1a3995!==_0x2cfb80);else{if(_0x4acd0e===_0x8418f3(0x5b4))return $gameTroop[_0x8418f3(0x8a1)]()['filter'](_0x50e347=>_0x50e347!==_0x31e430);else{if(_0x4acd0e===_0x8418f3(0x316))return $gameTroop[_0x8418f3(0x5cb)]();else{if(_0x4acd0e[_0x8418f3(0x392)](/ENEMY INDEX (\d+)/i)){const _0x14f769=Number(RegExp['$1']);return[$gameTroop['members']()[_0x14f769]];}else{if(_0x4acd0e['match'](/ENEMY ID (\d+)/i)){const _0x568311=Number(RegExp['$1']);return $gameTroop[_0x8418f3(0x8a1)]()['filter'](_0x402c80=>_0x402c80[_0x8418f3(0xacb)]()===_0x568311);}}}}}}if(_0x4acd0e===_0x8418f3(0xa61))return _0x17f7b7[_0x8418f3(0x1db)](_0x2480de=>_0x2480de['isAlive']());else{if(_0x4acd0e===_0x8418f3(0xa0a)){if(_0x8418f3(0x9cc)!==_0x8418f3(0x9cc))this['push'](_0x8418f3(0xb86),_0x45d458,_0x406be9);else return _0x17f7b7[_0x8418f3(0x1db)](_0x37fc6e=>_0x37fc6e[_0x8418f3(0x2e0)]()&&_0x37fc6e!==_0x2cfb80);}else{if(_0x4acd0e==='alive\x20battlers\x20not\x20target')return _0x17f7b7[_0x8418f3(0x1db)](_0x4bbdd3=>_0x4bbdd3[_0x8418f3(0x2e0)]()&&_0x4bbdd3!==_0x31e430);else{if(_0x4acd0e===_0x8418f3(0x35b))return _0x17f7b7[_0x8418f3(0x1db)](_0x3cc58a=>_0x3cc58a[_0x8418f3(0xd6d)]());}}}return[];},VisuMZ[_0x57e85a(0x2ec)]=function(){return BattleManager['_target'];},VisuMZ[_0x57e85a(0x3f5)]=function(_0x1df5c7){const _0x5cf62b=_0x57e85a;return BattleManager[_0x5cf62b(0x3be)];},PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x8fb),_0x6720b8=>{const _0x1f4cd4=_0x57e85a;if(!SceneManager[_0x1f4cd4(0x4b2)]())return;VisuMZ['ConvertParams'](_0x6720b8,_0x6720b8);const _0x2ba998=$gameTemp[_0x1f4cd4(0xc21)](),_0x402f54=BattleManager[_0x1f4cd4(0x577)],_0x53041f=BattleManager[_0x1f4cd4(0xa77)],_0x8f05dd=BattleManager[_0x1f4cd4(0xc11)]?BattleManager[_0x1f4cd4(0xc11)][_0x1f4cd4(0x241)](0x0):[],_0x55eff6=BattleManager[_0x1f4cd4(0x9e4)];if(!_0x2ba998||!_0x402f54||!_0x53041f)return;if(!_0x402f54[_0x1f4cd4(0x2df)]())return;if(_0x6720b8['DisplayAction'])_0x55eff6[_0x1f4cd4(0x81f)](_0x53041f,_0x402f54['item']());if(_0x6720b8[_0x1f4cd4(0x5cf)]){if('UHMvb'==='UHMvb')_0x55eff6['push']('applyImmortal',_0x53041f,_0x8f05dd,!![]);else return _0x5be756[_0x1f4cd4(0x8c8)]()-_0x36fe65['index']();}if(_0x6720b8[_0x1f4cd4(0xb98)])_0x55eff6[_0x1f4cd4(0x5fa)]('performActionStart',_0x53041f,_0x402f54);if(_0x6720b8[_0x1f4cd4(0x45a)])_0x55eff6[_0x1f4cd4(0x5fa)](_0x1f4cd4(0xd1d));if(_0x6720b8[_0x1f4cd4(0x5dc)])_0x55eff6[_0x1f4cd4(0x5fa)](_0x1f4cd4(0xab9),_0x53041f,_0x402f54);if(_0x6720b8['WaitForAnimation'])_0x55eff6[_0x1f4cd4(0x5fa)]('waitForAnimation');_0x2ba998['setWaitMode'](_0x1f4cd4(0x84e));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x790),_0x5ceee8=>{const _0x1b3ebd=_0x57e85a;if(!SceneManager[_0x1b3ebd(0x4b2)]())return;VisuMZ['ConvertParams'](_0x5ceee8,_0x5ceee8);const _0x1b135d=$gameTemp[_0x1b3ebd(0xc21)](),_0x171a74=BattleManager[_0x1b3ebd(0x577)],_0x106b78=BattleManager['_subject'],_0x3bf509=BattleManager[_0x1b3ebd(0xc11)]?BattleManager[_0x1b3ebd(0xc11)][_0x1b3ebd(0x241)](0x0):[],_0x343dd9=BattleManager[_0x1b3ebd(0x9e4)],_0x4f515d=_0x5ceee8[_0x1b3ebd(0xe0e)]??![];if(!_0x1b135d||!_0x171a74||!_0x106b78)return;if(!_0x171a74[_0x1b3ebd(0x2df)]())return;let _0xc4be00=_0x4f515d?_0x343dd9[_0x1b3ebd(0x5f4)](_0x106b78):0x1;for(let _0x52f094=0x0;_0x52f094<_0xc4be00;_0x52f094++){_0x4f515d&&_0x106b78['isActor']()&&_0x343dd9[_0x1b3ebd(0x5fa)](_0x1b3ebd(0xb86),_0x106b78,_0x52f094);if(_0x5ceee8[_0x1b3ebd(0x205)])_0x343dd9[_0x1b3ebd(0x5fa)](_0x1b3ebd(0xca4),_0x106b78,_0x171a74);if(_0x5ceee8[_0x1b3ebd(0xb54)]>0x0)_0x343dd9[_0x1b3ebd(0x5fa)](_0x1b3ebd(0x873),_0x5ceee8[_0x1b3ebd(0xb54)]);if(_0x5ceee8[_0x1b3ebd(0x309)])_0x343dd9[_0x1b3ebd(0x5fa)](_0x1b3ebd(0x80b),_0x106b78,_0x3bf509,_0x171a74['item']()[_0x1b3ebd(0x68e)]);if(_0x5ceee8['WaitForAnimation'])_0x343dd9[_0x1b3ebd(0x5fa)]('waitForAnimation');for(const _0x2661dc of _0x3bf509){if(!_0x2661dc)continue;if(_0x5ceee8[_0x1b3ebd(0xc6d)])_0x343dd9[_0x1b3ebd(0x5fa)](_0x1b3ebd(0x7d5),_0x106b78,_0x2661dc);}}_0x4f515d&&_0x106b78[_0x1b3ebd(0x7d1)]()&&_0x343dd9[_0x1b3ebd(0x5fa)](_0x1b3ebd(0x5b8),_0x106b78);if(_0x5ceee8['ApplyImmortal'])_0x343dd9[_0x1b3ebd(0x5fa)](_0x1b3ebd(0x7ec),_0x106b78,_0x3bf509,![]);_0x1b135d[_0x1b3ebd(0x1f9)]('battlelog');}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x31f),_0x32eb0d=>{const _0x3ea8c4=_0x57e85a;if(!SceneManager[_0x3ea8c4(0x4b2)]())return;VisuMZ[_0x3ea8c4(0x15e)](_0x32eb0d,_0x32eb0d);const _0xf0e702=$gameTemp[_0x3ea8c4(0xc21)](),_0x4d2d07=BattleManager[_0x3ea8c4(0x577)],_0x1308ad=BattleManager['_subject'],_0x3310eb=BattleManager['_allTargets']?BattleManager[_0x3ea8c4(0xc11)]['slice'](0x0):[],_0x38cc29=BattleManager[_0x3ea8c4(0x9e4)],_0xd7881d=_0x32eb0d[_0x3ea8c4(0xe0e)]??![];if(!_0xf0e702||!_0x4d2d07||!_0x1308ad)return;if(!_0x4d2d07[_0x3ea8c4(0x2df)]())return;let _0x1da305=_0xd7881d?_0x38cc29[_0x3ea8c4(0x5f4)](_0x1308ad):0x1;for(let _0x12aea2=0x0;_0x12aea2<_0x1da305;_0x12aea2++){for(const _0x55abef of _0x3310eb){if(!_0x55abef)continue;_0xd7881d&&_0x1308ad[_0x3ea8c4(0x7d1)]()&&_0x38cc29['push'](_0x3ea8c4(0xb86),_0x1308ad,_0x12aea2);if(_0x32eb0d[_0x3ea8c4(0x205)])_0x38cc29[_0x3ea8c4(0x5fa)](_0x3ea8c4(0xca4),_0x1308ad,_0x4d2d07);if(_0x32eb0d[_0x3ea8c4(0x8f8)]>0x0)_0x38cc29[_0x3ea8c4(0x5fa)](_0x3ea8c4(0x873),_0x32eb0d[_0x3ea8c4(0x8f8)]);if(_0x32eb0d[_0x3ea8c4(0x309)])_0x38cc29['push'](_0x3ea8c4(0x80b),_0x1308ad,[_0x55abef],_0x4d2d07[_0x3ea8c4(0x2df)]()[_0x3ea8c4(0x68e)]);if(_0x32eb0d[_0x3ea8c4(0xb14)]>0x0)_0x38cc29[_0x3ea8c4(0x5fa)](_0x3ea8c4(0x873),_0x32eb0d[_0x3ea8c4(0xb14)]);if(_0x32eb0d['ActionEffect'])_0x38cc29['push'](_0x3ea8c4(0x7d5),_0x1308ad,_0x55abef);}}_0xd7881d&&_0x1308ad[_0x3ea8c4(0x7d1)]()&&_0x38cc29[_0x3ea8c4(0x5fa)]('clearActiveWeaponSet',_0x1308ad);if(_0x32eb0d[_0x3ea8c4(0x5cf)])_0x38cc29[_0x3ea8c4(0x5fa)](_0x3ea8c4(0x7ec),_0x1308ad,_0x3310eb,![]);_0xf0e702[_0x3ea8c4(0x1f9)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xd2c),_0x4a1eb3=>{const _0x1e6a5b=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4a1eb3,_0x4a1eb3);const _0x4d9652=$gameTemp[_0x1e6a5b(0xc21)](),_0x248617=BattleManager['_action'],_0x5630bf=BattleManager['_subject'],_0x4475e0=BattleManager[_0x1e6a5b(0xc11)]?BattleManager['_allTargets']['slice'](0x0):[],_0x1b9ffb=BattleManager[_0x1e6a5b(0x9e4)];if(!_0x4d9652||!_0x248617||!_0x5630bf)return;if(!_0x248617['item']())return;if(_0x4a1eb3[_0x1e6a5b(0x5cf)])_0x1b9ffb[_0x1e6a5b(0x5fa)]('applyImmortal',_0x5630bf,_0x4475e0,![]);if(_0x4a1eb3[_0x1e6a5b(0x77b)])_0x1b9ffb[_0x1e6a5b(0x5fa)]('waitForNewLine');if(_0x4a1eb3['WaitForEffect'])_0x1b9ffb[_0x1e6a5b(0x5fa)](_0x1e6a5b(0x169));if(_0x4a1eb3[_0x1e6a5b(0x5ee)])_0x1b9ffb['push'](_0x1e6a5b(0x896));if(_0x4a1eb3[_0x1e6a5b(0x608)])_0x1b9ffb[_0x1e6a5b(0x5fa)]('performActionEnd',_0x5630bf);if(_0x4a1eb3['WaitForMovement'])_0x1b9ffb[_0x1e6a5b(0x5fa)](_0x1e6a5b(0xd1d));_0x4d9652['setWaitMode'](_0x1e6a5b(0x84e));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xb35),_0x313b3b=>{const _0x5b4063=_0x57e85a;if(!SceneManager[_0x5b4063(0x4b2)]())return;if(!Imported[_0x5b4063(0x272)])return;VisuMZ[_0x5b4063(0x15e)](_0x313b3b,_0x313b3b);const _0xaaee00=$gameTemp['getLastPluginCommandInterpreter'](),_0x35af85=_0x313b3b[_0x5b4063(0x378)];if(!_0xaaee00)return;$gameScreen[_0x5b4063(0x786)](_0x313b3b[_0x5b4063(0x78c)],_0x313b3b['Duration'],_0x313b3b[_0x5b4063(0xa42)]);if(_0x35af85)_0xaaee00[_0x5b4063(0x1f9)]('battleAngle');}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Angle_Reset',_0x566140=>{const _0x6ab37=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x6ab37(0x272)])return;VisuMZ[_0x6ab37(0x15e)](_0x566140,_0x566140);const _0x261940=$gameTemp['getLastPluginCommandInterpreter'](),_0x475bc5=_0x566140[_0x6ab37(0x378)];if(!_0x261940)return;$gameScreen[_0x6ab37(0x786)](0x0,_0x566140['Duration'],_0x566140[_0x6ab37(0xa42)]);if(_0x475bc5)_0x261940[_0x6ab37(0x1f9)](_0x6ab37(0xc37));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xe07),_0x4d118c=>{const _0xb2d71=_0x57e85a;if(!SceneManager[_0xb2d71(0x4b2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x37f5ce=$gameTemp[_0xb2d71(0xc21)]();if(!_0x37f5ce)return;_0x37f5ce['setWaitMode'](_0xb2d71(0xc37));}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0xafc),_0x562f0=>{const _0x1636b3=_0x57e85a;if(!SceneManager[_0x1636b3(0x4b2)]())return;VisuMZ['ConvertParams'](_0x562f0,_0x562f0);const _0x163198=$gameTemp[_0x1636b3(0xc21)](),_0xf3e8fc=BattleManager['_action'],_0x5ae3ad=BattleManager[_0x1636b3(0xa77)],_0x3e53ae=VisuMZ[_0x1636b3(0xdd4)](_0x562f0[_0x1636b3(0xa3a)]),_0x4fd5c7=_0x562f0[_0x1636b3(0x72a)],_0x2f4ec5=BattleManager['_logWindow'];if(!_0x163198||!_0xf3e8fc||!_0x5ae3ad)return;if(!_0xf3e8fc[_0x1636b3(0x2df)]())return;let _0x3d3e17=_0xf3e8fc['item']()[_0x1636b3(0x68e)];if(_0x3d3e17<0x0)_0x3d3e17=_0x5ae3ad[_0x1636b3(0xbd9)]();$gameTemp[_0x1636b3(0x986)](_0x3e53ae,_0x3d3e17,_0x4fd5c7),_0x562f0['WaitForAnimation']&&_0x163198[_0x1636b3(0x1f9)](_0x1636b3(0x479));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Animation_AttackAnimation',_0x130cea=>{const _0x162e77=_0x57e85a;if(!SceneManager[_0x162e77(0x4b2)]())return;VisuMZ['ConvertParams'](_0x130cea,_0x130cea);const _0x1e43f1=$gameTemp[_0x162e77(0xc21)](),_0x18771b=BattleManager[_0x162e77(0xa77)],_0x191b2e=VisuMZ['CreateActionSequenceTargets'](_0x130cea['Targets']),_0x17ab3e=_0x130cea['Mirror'],_0x1974b5=BattleManager[_0x162e77(0x9e4)];if(!_0x1e43f1||!_0x18771b)return;const _0x276476=_0x18771b[_0x162e77(0xbd9)]();$gameTemp[_0x162e77(0x986)](_0x191b2e,_0x276476,_0x17ab3e);if(_0x130cea['WaitForAnimation']){if(_0x162e77(0x690)===_0x162e77(0x690))_0x1e43f1['setWaitMode'](_0x162e77(0x479));else{const _0x3c182e={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x14e8ab=_0x2fdb2e['list']['pop']();_0x49d335[_0x162e77(0x7df)][_0x162e77(0xd4e)](_0x3c182e),_0x116f60[_0x162e77(0x7df)]['unshift'](_0x14e8ab);}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x793),_0x3efc2c=>{const _0x321ef4=_0x57e85a;if(!SceneManager[_0x321ef4(0x4b2)]())return;VisuMZ[_0x321ef4(0x15e)](_0x3efc2c,_0x3efc2c);const _0x6accad=_0x1e6e5d[_0x321ef4(0xd34)](_0x3efc2c[_0x321ef4(0x3b4)]);if(_0x6accad<=0x0)return;const _0x25b5ee=$gameTemp[_0x321ef4(0xc21)](),_0x1e6e5d=BattleManager[_0x321ef4(0xa77)],_0x4867e1=VisuMZ[_0x321ef4(0xdd4)](_0x3efc2c['Targets']),_0xc2e6a5=_0x3efc2c[_0x321ef4(0x72a)],_0x1276d0=BattleManager[_0x321ef4(0x9e4)];if(!_0x25b5ee||!_0x1e6e5d)return;$gameTemp[_0x321ef4(0x986)](_0x4867e1,_0x6accad,_0xc2e6a5),_0x3efc2c[_0x321ef4(0xd52)]&&_0x25b5ee['setWaitMode'](_0x321ef4(0x479));}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xa7b),_0x4fc5f7=>{const _0x22b9a0=_0x57e85a;if(!SceneManager[_0x22b9a0(0x4b2)]())return;VisuMZ[_0x22b9a0(0x15e)](_0x4fc5f7,_0x4fc5f7);const _0xa05e66=$gameTemp[_0x22b9a0(0xc21)](),_0x30a620=VisuMZ[_0x22b9a0(0xdd4)](_0x4fc5f7['Targets']),_0x3f7456=_0x4fc5f7[_0x22b9a0(0x647)];let _0x5e5bc1=0x0;switch(_0x3f7456[_0x22b9a0(0x307)]()[_0x22b9a0(0xdf5)]()){case'!':case _0x22b9a0(0xbbb):_0x5e5bc1=0x1;break;case'?':case _0x22b9a0(0x339):_0x5e5bc1=0x2;break;case _0x22b9a0(0x423):case _0x22b9a0(0xafe):case'MUSIC\x20NOTE':case _0x22b9a0(0x7da):case _0x22b9a0(0x71a):_0x5e5bc1=0x3;break;case _0x22b9a0(0x44f):case _0x22b9a0(0xaa7):_0x5e5bc1=0x4;break;case'ANGLE':case'ANGER':_0x5e5bc1=0x5;break;case _0x22b9a0(0x561):_0x5e5bc1=0x6;break;case _0x22b9a0(0x3fc):case _0x22b9a0(0x4dc):case _0x22b9a0(0xc80):_0x5e5bc1=0x7;break;case _0x22b9a0(0x3dd):case _0x22b9a0(0x454):_0x5e5bc1=0x8;break;case'LIGHT':case _0x22b9a0(0x633):case _0x22b9a0(0xcfe):case _0x22b9a0(0x6fe):case _0x22b9a0(0xc5f):_0x5e5bc1=0x9;break;case'Z':case'ZZ':case _0x22b9a0(0x4d4):case _0x22b9a0(0x2bb):_0x5e5bc1=0xa;break;case _0x22b9a0(0x50e):_0x5e5bc1=0xb;break;case _0x22b9a0(0x48a):_0x5e5bc1=0xc;break;case'USER-DEFINED\x203':_0x5e5bc1=0xd;break;case _0x22b9a0(0xb7f):_0x5e5bc1=0xe;break;case _0x22b9a0(0xd68):_0x5e5bc1=0xf;break;}for(const _0x1ce653 of _0x30a620){if(!_0x1ce653)continue;$gameTemp[_0x22b9a0(0x385)](_0x1ce653,_0x5e5bc1);}if(_0x4fc5f7['WaitComplete']&&_0xa05e66){if('QoiZe'!==_0x22b9a0(0x569)){if(!this[_0x22b9a0(0x2df)]())return![];if(this['isForDeadFriend']())return![];return(this[_0x22b9a0(0x2df)]()[_0x22b9a0(0x40f)]||'')['match'](/<SINGLE OR MULTIPLE SELECT>/i);}else _0xa05e66['wait'](0x1),_0xa05e66[_0x22b9a0(0x1f9)](_0x22b9a0(0x2ab));}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Animation_BalloonIcon',_0x1a6a9b=>{const _0x4fa3e9=_0x57e85a;if(!SceneManager[_0x4fa3e9(0x4b2)]())return;if(!Imported[_0x4fa3e9(0xc7c)])return;VisuMZ[_0x4fa3e9(0x15e)](_0x1a6a9b,_0x1a6a9b);const _0xd325a3=$gameTemp[_0x4fa3e9(0xc21)](),_0x2ee725=VisuMZ[_0x4fa3e9(0xdd4)](_0x1a6a9b['Targets']),_0x4a1adf=_0x1a6a9b['IconIndex'];for(const _0x2f5075 of _0x2ee725){if('sivlB'!==_0x4fa3e9(0x539)){const _0x511bd2=_0x38c343[_0x4fa3e9(0x2df)]();this[_0x4fa3e9(0x81f)](_0x1fea7f,_0x511bd2),this[_0x4fa3e9(0x5fa)](_0x4fa3e9(0x7ec),_0x1e8819,_0x5cdccd,!![]),this[_0x4fa3e9(0x5fa)](_0x4fa3e9(0x716),_0x2c8cd0,_0x3931ac),this['push']('waitForMovement'),this[_0x4fa3e9(0x5fa)](_0x4fa3e9(0xab9),_0x46a877,_0x2cbd92),this[_0x4fa3e9(0x5fa)](_0x4fa3e9(0x8d7));}else{if(!_0x2f5075)continue;$gameTemp[_0x4fa3e9(0x385)](_0x2f5075,[_0x4a1adf]);}}_0x1a6a9b[_0x4fa3e9(0xb34)]&&_0xd325a3&&(_0xd325a3[_0x4fa3e9(0x674)](0x1),_0xd325a3[_0x4fa3e9(0x1f9)]('battleBalloon'));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Animation_BalloonIconRange',_0x18acc7=>{const _0x3b9075=_0x57e85a;if(!SceneManager[_0x3b9075(0x4b2)]())return;if(!Imported[_0x3b9075(0xc7c)])return;VisuMZ[_0x3b9075(0x15e)](_0x18acc7,_0x18acc7);const _0x295bf6=$gameTemp[_0x3b9075(0xc21)](),_0x25f04c=VisuMZ[_0x3b9075(0xdd4)](_0x18acc7[_0x3b9075(0xa3a)]),_0x35eb86=Math[_0x3b9075(0x16e)](Number(_0x18acc7[_0x3b9075(0xd24)]||0x0),Number(_0x18acc7[_0x3b9075(0x3f0)]||0x0)),_0x324505=Math[_0x3b9075(0xde7)](Number(_0x18acc7['startIcon']||0x0),Number(_0x18acc7[_0x3b9075(0x3f0)]||0x0)),_0x136b49=[];for(let _0x42fe87=_0x35eb86;_0x42fe87<=_0x324505;_0x42fe87++){_0x136b49[_0x3b9075(0x5fa)](_0x42fe87);}for(const _0x1dadc3 of _0x25f04c){if(!_0x1dadc3)continue;$gameTemp[_0x3b9075(0x385)](_0x1dadc3,_0x136b49);}if(_0x18acc7[_0x3b9075(0xb34)]&&_0x295bf6){if(_0x3b9075(0xb33)!==_0x3b9075(0xb33))return _0x3e1520[_0x3b9075(0x734)][_0x3b9075(0xe0f)][_0x3b9075(0xa23)](this,_0x4789a8),_0xf84590['setEventCallback'](_0x59cc8b=>{const _0x2f6c00=_0x3b9075;this[_0x2f6c00(0xd88)][this[_0x2f6c00(0x4b1)]]=_0x59cc8b;}),!![];else _0x295bf6[_0x3b9075(0x674)](0x1),_0x295bf6[_0x3b9075(0x1f9)](_0x3b9075(0x2ab));}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Animation_BalloonIconSpecific',_0x3fe070=>{const _0x3467f4=_0x57e85a;if(!SceneManager[_0x3467f4(0x4b2)]())return;if(!Imported[_0x3467f4(0xc7c)])return;VisuMZ[_0x3467f4(0x15e)](_0x3fe070,_0x3fe070);const _0x2b0000=$gameTemp['getLastPluginCommandInterpreter'](),_0x3746bc=VisuMZ[_0x3467f4(0xdd4)](_0x3fe070[_0x3467f4(0xa3a)]),_0x4ef7ed=_0x3fe070[_0x3467f4(0x6cc)];for(const _0x2093f6 of _0x3746bc){if(!_0x2093f6)continue;$gameTemp[_0x3467f4(0x385)](_0x2093f6,_0x4ef7ed);}_0x3fe070['WaitComplete']&&_0x2b0000&&(_0x2b0000[_0x3467f4(0x674)](0x1),_0x2b0000[_0x3467f4(0x1f9)](_0x3467f4(0x2ab)));}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],'ActSeq_Animation_CastAnimation',_0x384788=>{const _0x1e30f5=_0x57e85a;if(!SceneManager[_0x1e30f5(0x4b2)]())return;VisuMZ[_0x1e30f5(0x15e)](_0x384788,_0x384788);const _0x5f062b=$gameTemp[_0x1e30f5(0xc21)](),_0x3f340b=BattleManager['_action'],_0x15ea53=_0x384788[_0x1e30f5(0x72a)],_0xbde1eb=VisuMZ[_0x1e30f5(0xdd4)](_0x384788['Targets']);if(!_0x5f062b||!_0x3f340b)return;if(!_0x3f340b[_0x1e30f5(0x2df)]())return;for(const _0x2cbc9a of _0xbde1eb){if(_0x1e30f5(0xe21)!==_0x1e30f5(0x1eb)){if(!_0x2cbc9a)continue;_0x2cbc9a[_0x1e30f5(0xab9)](_0x3f340b,_0x15ea53);}else{const _0x33892e=this[_0x1e30f5(0x7a9)][_0x1e30f5(0x632)];this[_0x1e30f5(0x7a9)]['setFrame'](0x0,0x0,_0x33892e[_0x1e30f5(0x8b9)],_0x33892e['height']);}}if(_0x384788[_0x1e30f5(0xd52)])_0x5f062b[_0x1e30f5(0x1f9)](_0x1e30f5(0x479));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xda1),_0xdc9d35=>{const _0x3d975d=_0x57e85a;VisuMZ[_0x3d975d(0x15e)](_0xdc9d35,_0xdc9d35);const _0x303afd=$gameTemp[_0x3d975d(0xc21)](),_0x2d213c=VisuMZ[_0x3d975d(0xdd4)](_0xdc9d35['Targets']),_0x198ce1=_0xdc9d35[_0x3d975d(0xcaf)];if(!_0x198ce1)return;for(const _0x238e7a of _0x2d213c){if(!_0x238e7a)continue;if(!_0x238e7a[_0x3d975d(0x7d1)]())continue;_0x238e7a[_0x3d975d(0xccd)](_0x198ce1);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Animation_GuardAnimation',_0x46c9d2=>{const _0x214cde=_0x57e85a;if(!SceneManager[_0x214cde(0x4b2)]())return;VisuMZ[_0x214cde(0x15e)](_0x46c9d2,_0x46c9d2);const _0x3de369=$gameTemp['getLastPluginCommandInterpreter'](),_0x222c1c=BattleManager[_0x214cde(0xa77)],_0x52ec64=VisuMZ[_0x214cde(0xdd4)](_0x46c9d2[_0x214cde(0xa3a)]),_0x4752eb=_0x46c9d2[_0x214cde(0x72a)];if(!_0x3de369||!_0x222c1c)return;const _0x4ddd02=$dataSkilles[_0x222c1c[_0x214cde(0xc48)]()],_0x16ae99=_0x4ddd02['animationId'];$gameTemp[_0x214cde(0x986)](_0x52ec64,_0x16ae99,_0x4752eb),_0x46c9d2[_0x214cde(0xd52)]&&('ozSAY'!==_0x214cde(0xcc4)?_0x1ddedb=new _0x35f6a8():_0x3de369[_0x214cde(0x1f9)](_0x214cde(0x479)));}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x91a),_0x124ff0=>{const _0x4f0746=_0x57e85a;if(!SceneManager[_0x4f0746(0x4b2)]())return;VisuMZ[_0x4f0746(0x15e)](_0x124ff0,_0x124ff0);const _0x41b36b=$gameTemp[_0x4f0746(0xc21)](),_0x293a87=VisuMZ[_0x4f0746(0xdd4)](_0x124ff0[_0x4f0746(0xa3a)]),_0x2e2fa6=Number(_0x124ff0['ItemID']||0x1),_0x316f6f=$dataItems[_0x2e2fa6],_0x6629fb=_0x124ff0[_0x4f0746(0x72a)];if(!_0x41b36b)return;if(!_0x316f6f)return;let _0x498812=_0x316f6f[_0x4f0746(0x68e)];$gameTemp[_0x4f0746(0x986)](_0x293a87,_0x498812,_0x6629fb),_0x124ff0[_0x4f0746(0xd52)]&&_0x41b36b['setWaitMode'](_0x4f0746(0x479));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xb10),_0x3e0e5e=>{const _0xf3eea7=_0x57e85a;if(!SceneManager['_scene'])return;if(!SceneManager[_0xf3eea7(0xd04)][_0xf3eea7(0x78d)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0xf3eea7(0x15e)](_0x3e0e5e,_0x3e0e5e);const _0x33507a=$gameTemp['getLastPluginCommandInterpreter'](),_0x405b32=Math[_0xf3eea7(0x92a)](_0x3e0e5e['pointX']),_0x5a68a7=Math['round'](_0x3e0e5e[_0xf3eea7(0xb12)]);$gameTemp[_0xf3eea7(0x2dd)](_0x405b32,_0x5a68a7,_0x3e0e5e[_0xf3eea7(0x509)],_0x3e0e5e[_0xf3eea7(0x72a)],_0x3e0e5e[_0xf3eea7(0x190)]),_0x3e0e5e[_0xf3eea7(0xb34)]&&_0x33507a&&(SceneManager[_0xf3eea7(0xd04)][_0xf3eea7(0x78d)]['updatePointAnimations'](),_0x33507a[_0xf3eea7(0x1f9)]('battleAnimation'));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Animation_ShowAnimation',_0x209441=>{const _0xd11913=_0x57e85a;if(!SceneManager[_0xd11913(0x4b2)]())return;VisuMZ[_0xd11913(0x15e)](_0x209441,_0x209441);const _0x1136c7=$gameTemp[_0xd11913(0xc21)](),_0xa44be1=VisuMZ[_0xd11913(0xdd4)](_0x209441[_0xd11913(0xa3a)]),_0x3c0ed2=_0x209441[_0xd11913(0x509)],_0x7436=_0x209441[_0xd11913(0x72a)];if(!_0x1136c7)return;$gameTemp[_0xd11913(0x986)](_0xa44be1,_0x3c0ed2,_0x7436);if(_0x209441[_0xd11913(0xd52)])_0x1136c7[_0xd11913(0x1f9)]('battleAnimation');}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x433),_0x5c4de9=>{const _0x52d589=_0x57e85a;if(!SceneManager[_0x52d589(0x4b2)]())return;VisuMZ[_0x52d589(0x15e)](_0x5c4de9,_0x5c4de9);const _0x536ad7=$gameTemp['getLastPluginCommandInterpreter'](),_0x56c08e=VisuMZ['CreateActionSequenceTargets'](_0x5c4de9['Targets']),_0x264fb7=Number(_0x5c4de9[_0x52d589(0x509)])||0x1,_0x45e77c=_0x5c4de9[_0x52d589(0x72a)];if(!_0x536ad7)return;$gameTemp[_0x52d589(0x986)](_0x56c08e,_0x264fb7,_0x45e77c);if(_0x5c4de9[_0x52d589(0xd52)])_0x536ad7['setWaitMode'](_0x52d589(0x479));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xa0d),_0x399ea0=>{const _0x3a8f9b=_0x57e85a;if(!SceneManager[_0x3a8f9b(0x4b2)]())return;VisuMZ[_0x3a8f9b(0x15e)](_0x399ea0,_0x399ea0);const _0xf49b08=$gameTemp[_0x3a8f9b(0xc21)](),_0x212b6b=VisuMZ[_0x3a8f9b(0xdd4)](_0x399ea0[_0x3a8f9b(0xa3a)]),_0x4d7386=Number(_0x399ea0[_0x3a8f9b(0x888)]||0x1),_0x4ea03f=$dataSkills[_0x4d7386],_0x572005=_0x399ea0[_0x3a8f9b(0x72a)];if(!_0xf49b08)return;if(!_0x4ea03f)return;let _0xe8e9ed=_0x4ea03f['animationId'];$gameTemp[_0x3a8f9b(0x986)](_0x212b6b,_0xe8e9ed,_0x572005);if(_0x399ea0[_0x3a8f9b(0xd52)]){if('KAVrY'!=='KAVrY'){const _0x30a92e=this['_actor'][_0x3a8f9b(0x243)](),_0x553a0e=_0x30a92e[_0x3a8f9b(0x1db)](_0x4debb1=>_0x4d3bb1[_0x3a8f9b(0x2b0)](_0x376ff2)[_0x3a8f9b(0x3af)](_0x4debb1));return _0x553a0e[_0x3a8f9b(0xd36)]<=0x0;}else _0xf49b08['setWaitMode']('battleAnimation');}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Animation_WaitForAnimation',_0x399dfb=>{const _0x3b02c0=_0x57e85a;if(!SceneManager[_0x3b02c0(0x4b2)]())return;const _0x5e884e=$gameTemp[_0x3b02c0(0xc21)]();if(!_0x5e884e)return;_0x5e884e['setWaitMode'](_0x3b02c0(0x479));}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0xd53),_0x43c887=>{const _0x1eaf86=_0x57e85a;if(!SceneManager[_0x1eaf86(0x4b2)]())return;VisuMZ[_0x1eaf86(0x15e)](_0x43c887,_0x43c887);const _0x4bf1d8=BattleManager[_0x1eaf86(0x9e4)],_0x4b9de7=_0x43c887[_0x1eaf86(0x61d)]&&Imported[_0x1eaf86(0x4c7)];_0x4bf1d8[_0x1eaf86(0x3fd)](_0x43c887[_0x1eaf86(0x942)]),_0x4b9de7&&Imported[_0x1eaf86(0x4c7)]&&$gameSystem['addTextToCombatLog'](_0x43c887['Text']||'',_0x43c887[_0x1eaf86(0x44a)]||0x0);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_BattleLog_Clear',_0x2d9a58=>{const _0x1dc51f=_0x57e85a;if(!SceneManager['isSceneBattle']())return;const _0x502947=BattleManager[_0x1dc51f(0x9e4)];_0x502947[_0x1dc51f(0x896)]();}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_BattleLog_DisplayAction',_0x59d687=>{const _0x7cbc48=_0x57e85a;if(!SceneManager[_0x7cbc48(0x4b2)]())return;const _0x353ccf=$gameTemp[_0x7cbc48(0xc21)](),_0x5e84d7=BattleManager['_action'],_0x48c190=BattleManager['_subject'],_0x337755=BattleManager[_0x7cbc48(0x9e4)];if(!_0x353ccf||!_0x5e84d7||!_0x48c190)return;if(!_0x5e84d7['item']())return;_0x337755['displayAction'](_0x48c190,_0x5e84d7['item']()),_0x353ccf['setWaitMode'](_0x7cbc48(0x84e));}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],'ActSeq_BattleLog_PopBaseLine',_0x5b1ffd=>{const _0x8e457f=_0x57e85a;if(!SceneManager[_0x8e457f(0x4b2)]())return;const _0x26eb76=BattleManager[_0x8e457f(0x9e4)];_0x26eb76[_0x8e457f(0x2e2)]();}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xcfb),_0x5b9a20=>{const _0x314ad4=_0x57e85a;if(!SceneManager['isSceneBattle']())return;const _0x3b72c9=BattleManager['_logWindow'];_0x3b72c9[_0x314ad4(0x1b2)]();}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x799),_0xd854b6=>{const _0x24a993=_0x57e85a;if(!SceneManager[_0x24a993(0x4b2)]())return;const _0x1e710a=BattleManager[_0x24a993(0x9e4)];_0x1e710a[_0x24a993(0xa6a)]();}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x883),_0x57d947=>{const _0x3ad87d=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x57d947,_0x57d947),SceneManager[_0x3ad87d(0xd04)][_0x3ad87d(0x8ce)](_0x57d947[_0x3ad87d(0x7cc)]);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x199),_0x31525a=>{const _0x26ea98=_0x57e85a;if(!SceneManager[_0x26ea98(0x4b2)]())return;const _0x3380f8=$gameTemp[_0x26ea98(0xc21)]();_0x3380f8[_0x26ea98(0x1f9)](_0x26ea98(0x84e));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x677),_0x2bae68=>{const _0x42e588=_0x57e85a;if(!SceneManager[_0x42e588(0x4b2)]())return;const _0x24c9f0=$gameTemp[_0x42e588(0xc21)](),_0x1ed402=BattleManager[_0x42e588(0x9e4)];_0x1ed402[_0x42e588(0x2d0)](),_0x24c9f0[_0x42e588(0x1f9)](_0x42e588(0x84e));}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x3d8),_0x35f3=>{const _0x20fd25=_0x57e85a;if(!SceneManager[_0x20fd25(0x4b2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x20fd25(0x15e)](_0x35f3,_0x35f3);const _0x2f932e=$gameScreen[_0x20fd25(0x90d)]();_0x2f932e[_0x20fd25(0xc53)]=_0x35f3[_0x20fd25(0x755)];}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x340),_0x41a5e2=>{const _0x399dd9=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x399dd9(0x272)])return;VisuMZ[_0x399dd9(0x15e)](_0x41a5e2,_0x41a5e2);const _0x89eea4=$gameTemp[_0x399dd9(0xc21)](),_0x4505fb=_0x41a5e2[_0x399dd9(0x3bd)];$gameScreen[_0x399dd9(0x62a)](_0x41a5e2['FocusX'],_0x41a5e2[_0x399dd9(0x59e)],_0x41a5e2['Duration'],_0x41a5e2['EasingType']);if(_0x4505fb)_0x89eea4[_0x399dd9(0x1f9)](_0x399dd9(0x6e6));}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],'ActSeq_Camera_FocusTarget',_0x61d4d7=>{const _0x947605=_0x57e85a;if(!SceneManager[_0x947605(0x4b2)]())return;if(!Imported[_0x947605(0x272)])return;VisuMZ[_0x947605(0x15e)](_0x61d4d7,_0x61d4d7);const _0x210bc5=$gameTemp[_0x947605(0xc21)](),_0x16898c=VisuMZ[_0x947605(0xdd4)](_0x61d4d7[_0x947605(0xa3a)]),_0x29446=_0x61d4d7[_0x947605(0x3bd)];$gameScreen['setBattleCameraTargets'](_0x16898c,_0x61d4d7[_0x947605(0x692)],_0x61d4d7[_0x947605(0xa42)]);if(_0x29446)_0x210bc5[_0x947605(0x1f9)]('battleCamera');}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xcf0),_0xe6abd8=>{const _0x3194e1=_0x57e85a;if(!SceneManager[_0x3194e1(0x4b2)]())return;if(!Imported[_0x3194e1(0x272)])return;VisuMZ['ConvertParams'](_0xe6abd8,_0xe6abd8);const _0x5a4739=$gameTemp['getLastPluginCommandInterpreter'](),_0x135451=_0xe6abd8[_0x3194e1(0x3bd)];$gameScreen[_0x3194e1(0x3b7)](_0xe6abd8[_0x3194e1(0xc3c)],_0xe6abd8['OffsetY'],_0xe6abd8[_0x3194e1(0x692)],_0xe6abd8[_0x3194e1(0xa42)]);if(_0x135451)_0x5a4739[_0x3194e1(0x1f9)](_0x3194e1(0x6e6));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x6cb),_0x4978b7=>{const _0x4d0c47=_0x57e85a;if(!SceneManager[_0x4d0c47(0x4b2)]())return;if(!Imported[_0x4d0c47(0x272)])return;VisuMZ[_0x4d0c47(0x15e)](_0x4978b7,_0x4978b7);const _0x1c6ad8=$gameTemp[_0x4d0c47(0xc21)](),_0x1974dc=_0x4978b7[_0x4d0c47(0x6db)],_0x113380=_0x4978b7[_0x4d0c47(0x2bd)],_0x5a12af=_0x4978b7['WaitForCamera'];if(_0x1974dc){const _0x1b5d36=Math[_0x4d0c47(0x92a)](Graphics[_0x4d0c47(0x8b9)]/0x2),_0x4b02dd=Math['round'](Graphics[_0x4d0c47(0x54b)]/0x2);$gameScreen[_0x4d0c47(0x62a)](_0x1b5d36,_0x4b02dd,_0x4978b7[_0x4d0c47(0x692)],_0x4978b7[_0x4d0c47(0xa42)]);}_0x113380&&$gameScreen[_0x4d0c47(0x3b7)](0x0,0x0,_0x4978b7[_0x4d0c47(0x692)],_0x4978b7[_0x4d0c47(0xa42)]);if(_0x5a12af)_0x1c6ad8[_0x4d0c47(0x1f9)](_0x4d0c47(0x6e6));}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xbd3),_0x5966b1=>{const _0x5e3390=_0x57e85a;if(!SceneManager[_0x5e3390(0x4b2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x5b4e63=$gameTemp[_0x5e3390(0xc21)]();if(!_0x5b4e63)return;_0x5b4e63[_0x5e3390(0x1f9)](_0x5e3390(0x6e6));}),VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xcf2)]=function(_0x383aee){const _0x2473fa=_0x57e85a;_0x383aee['portraitFilename']='';const _0x2f4831=VisuMZ[_0x2473fa(0x26f)][_0x2473fa(0xcf2)](_0x383aee),_0x511c33=VisuMZ[_0x2473fa(0xdd4)](_0x383aee[_0x2473fa(0xa3a)])[0x0]||null;if(_0x511c33){_0x2f4831[_0x2473fa(0xcad)]=_0x511c33['visualCutinPortraitFilename'](),_0x2f4831[_0x2473fa(0x4cb)]=_0x511c33['visualCutinPortraitIndex'](),_0x2f4831[_0x2473fa(0xa93)]=_0x511c33[_0x2473fa(0xcd7)](),_0x2f4831['portraitType']=_0x511c33['visualCutinPortraitType']();if(_0x511c33[_0x2473fa(0xd89)]()){_0x511c33['flipVisualCutinHorz']()&&(_0x2f4831['portraitFlipHorz']=!_0x2f4831[_0x2473fa(0xba2)]);if(_0x511c33[_0x2473fa(0x50d)]()){if('eFLEB'!==_0x2473fa(0x253))_0x2f4831[_0x2473fa(0x68c)]=!_0x2f4831[_0x2473fa(0x68c)];else return _0x4e7475['aliveMembers']()[_0x2473fa(0x1db)](_0x13f53d=>_0x13f53d!==_0x1052e4);}_0x2f4831['portraitType']==='svActor'&&(_0x2f4831[_0x2473fa(0xba2)]=!_0x2f4831[_0x2473fa(0xba2)]),_0x383aee['ExtraSettings'][_0x2473fa(0xabb)]&&(_0x2473fa(0xce4)===_0x2473fa(0xce4)?_0x2f4831[_0x2473fa(0x7bd)]*=-0x1:(_0x21dbd9+=_0x407087,_0x5485d3+=_0x24c48e)),_0x383aee[_0x2473fa(0xc89)][_0x2473fa(0xccb)]&&('imIke'!==_0x2473fa(0x1c6)?this[_0x2473fa(0x7a4)]='':_0x2f4831[_0x2473fa(0x93b)]*=-0x1),_0x2f4831[_0x2473fa(0xd20)]+=_0x383aee[_0x2473fa(0xc89)][_0x2473fa(0x26b)]??0x0;}}return _0x2f4831;},PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x32e),_0x44dab6=>{const _0xf3fd87=_0x57e85a;if(!SceneManager[_0xf3fd87(0x4b2)]())return;if(!Imported[_0xf3fd87(0x599)])return;VisuMZ['ConvertParams'](_0x44dab6,_0x44dab6);const _0x243d9a=VisuMZ[_0xf3fd87(0x734)][_0xf3fd87(0xcf2)](_0x44dab6);SceneManager[_0xf3fd87(0xd04)][_0xf3fd87(0x8e8)](_0x243d9a);const _0x35d455=$gameTemp[_0xf3fd87(0xc21)]();_0x35d455&&_0x44dab6['WaitForEntrance']&&_0x35d455[_0xf3fd87(0x1f9)]('cutinEnter');}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x3d5),_0x54a75f=>{const _0x76fd74=_0x57e85a;if(!SceneManager[_0x76fd74(0x4b2)]())return;if(!Imported[_0x76fd74(0x599)])return;VisuMZ[_0x76fd74(0x15e)](_0x54a75f,_0x54a75f),SceneManager[_0x76fd74(0xd04)][_0x76fd74(0x816)]();const _0x2af489=$gameTemp[_0x76fd74(0xc21)]();_0x2af489&&_0x54a75f[_0x76fd74(0xa5a)]&&_0x2af489['setWaitMode'](_0x76fd74(0x9da));}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],'ActSeq_Cutin_EndVisualCutinEffectType',_0x1de295=>{const _0x5bb796=_0x57e85a;if(!SceneManager[_0x5bb796(0x4b2)]())return;if(!Imported[_0x5bb796(0x599)])return;VisuMZ[_0x5bb796(0x15e)](_0x1de295,_0x1de295);const _0x56d74e=_0x1de295[_0x5bb796(0x24b)][_0x5bb796(0x2bc)]()[_0x5bb796(0xdf5)]();SceneManager[_0x5bb796(0xd04)][_0x5bb796(0xc0a)](_0x56d74e);const _0xb08aee=$gameTemp[_0x5bb796(0xc21)]();_0xb08aee&&_0x1de295[_0x5bb796(0xa5a)]&&_0xb08aee['setWaitMode'](_0x5bb796(0x9da));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x500),_0x441000=>{const _0x4e9190=_0x57e85a;if(!SceneManager[_0x4e9190(0x4b2)]())return;if(!Imported[_0x4e9190(0x599)])return;const _0x237469=$gameTemp[_0x4e9190(0xc21)]();_0x237469['setWaitMode'](_0x4e9190(0x3fe));}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x314),_0x48307f=>{const _0x34c3f6=_0x57e85a;if(!SceneManager[_0x34c3f6(0x4b2)]())return;if(!Imported[_0x34c3f6(0x599)])return;const _0x294b3a=$gameTemp[_0x34c3f6(0xc21)]();_0x294b3a['setWaitMode'](_0x34c3f6(0x9da));}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x89e),_0xf3a8b4=>{const _0x36918a=_0x57e85a;if(!SceneManager[_0x36918a(0x4b2)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x36918a(0x15e)](_0xf3a8b4,_0xf3a8b4);const _0x58073b=VisuMZ[_0x36918a(0xdd4)](_0xf3a8b4[_0x36918a(0xa3a)]),_0x3e753e=_0xf3a8b4[_0x36918a(0xc0f)]['toLowerCase']()[_0x36918a(0xdf5)]();for(const _0x402a42 of _0x58073b){if(!_0x402a42)continue;_0x402a42[_0x36918a(0xc23)](_0x3e753e);}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_DB_DragonbonesTimeScale',_0x4008d4=>{const _0x275f1a=_0x57e85a;if(!SceneManager[_0x275f1a(0x4b2)]())return;if(!Imported[_0x275f1a(0x3b0)])return;VisuMZ['ConvertParams'](_0x4008d4,_0x4008d4);const _0x1b0dea=VisuMZ[_0x275f1a(0xdd4)](_0x4008d4[_0x275f1a(0xa3a)]),_0x4e7057=_0x4008d4[_0x275f1a(0xb50)];for(const _0x23aa0a of _0x1b0dea){if(_0x275f1a(0xb84)==='GXMdg'){if(!_0x23aa0a)continue;_0x23aa0a['dragonbonesData']()[_0x275f1a(0x5e1)]=_0x4e7057;}else{if(!_0x3cc33c[_0x275f1a(0x4b2)]())return;if(!_0xdf579f[_0x275f1a(0xad8)])return;if(!_0x1942c2[_0x275f1a(0xa09)]())return;_0xaf8561['ConvertParams'](_0x22d8a6,_0x52bdbc);const _0x4a2d09=_0x8d79a1[_0x275f1a(0x366)];_0x42cfe[_0x275f1a(0xa77)]&&_0x5a1b47[_0x275f1a(0xa77)][_0x275f1a(0xafb)]()[_0x275f1a(0x540)](_0x4a2d09);}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Element_AddElements',_0x57394e=>{const _0x4297a1=_0x57e85a;if(!SceneManager[_0x4297a1(0x4b2)]())return;if(!Imported[_0x4297a1(0x58c)])return;VisuMZ[_0x4297a1(0x15e)](_0x57394e,_0x57394e);const _0x337e98=BattleManager['_action'],_0x225946=_0x57394e[_0x4297a1(0xb8e)];if(!_0x337e98)return;_0x337e98['_battleCoreAddedElements']=_0x225946;}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0xb28),_0x1a474e=>{const _0x2fd72d=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2fd72d(0x58c)])return;const _0x15e7da=BattleManager[_0x2fd72d(0x577)];if(!_0x15e7da)return;_0x15e7da[_0x2fd72d(0x2e1)]();}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x492),_0x1d9f3e=>{const _0x1a328c=_0x57e85a;if(!SceneManager[_0x1a328c(0x4b2)]())return;if(!Imported[_0x1a328c(0x58c)])return;VisuMZ[_0x1a328c(0x15e)](_0x1d9f3e,_0x1d9f3e);const _0xa481f0=BattleManager[_0x1a328c(0x577)],_0xc336a7=_0x1d9f3e['Elements'];if(!_0xa481f0)return;_0xa481f0[_0x1a328c(0x83a)]=_0xc336a7;}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xb5e),_0x911410=>{const _0x2591bd=_0x57e85a;if(!SceneManager[_0x2591bd(0x4b2)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x5a3151=BattleManager[_0x2591bd(0x577)];if(!_0x5a3151)return;_0x5a3151[_0x2591bd(0x417)]=!![];}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x56e),_0x3badf0=>{const _0x2be585=_0x57e85a;VisuMZ[_0x2be585(0x1b4)][_0x2be585(0x56e)](_0x3badf0);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x7c3),_0x63e32f=>{const _0x370bef=_0x57e85a;VisuMZ[_0x370bef(0x1b4)]['ActSeq_Grid_AddPassiveStatesToNode'](_0x63e32f);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x4e4),_0x4b2121=>{const _0x516a78=_0x57e85a;VisuMZ['BattleGridSystem'][_0x516a78(0x4e4)](_0x4b2121);}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],'ActSeq_Grid_AnimationIDAtNode',_0x25330d=>{const _0x3ab460=_0x57e85a;VisuMZ[_0x3ab460(0x1b4)][_0x3ab460(0x859)](_0x25330d);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Grid_AnimationJsAtNode',_0xa3f555=>{const _0x577064=_0x57e85a;VisuMZ[_0x577064(0x1b4)][_0x577064(0x2d6)](_0xa3f555);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x732),_0x5d8f34=>{const _0xa86d6c=_0x57e85a;VisuMZ[_0xa86d6c(0x1b4)][_0xa86d6c(0x732)](_0x5d8f34);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Grid_ClearPassiveStatesFromNode',_0x44d0e7=>{const _0x57c14c=_0x57e85a;VisuMZ['BattleGridSystem'][_0x57c14c(0x305)](_0x44d0e7);}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x914),_0x4119d7=>{const _0x92ad8d=_0x57e85a;VisuMZ[_0x92ad8d(0x1b4)][_0x92ad8d(0x914)](_0x4119d7);}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],'ActSeq_Grid_PullToTargetNode',_0x1042c9=>{const _0x531ff9=_0x57e85a;VisuMZ[_0x531ff9(0x1b4)][_0x531ff9(0x3a8)](_0x1042c9);}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0xcf7),_0x424b8c=>{const _0x331005=_0x57e85a;VisuMZ['BattleGridSystem'][_0x331005(0xcf7)](_0x424b8c);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Grid_RemovePassiveStatesFromNode',_0x5a53f4=>{const _0x252485=_0x57e85a;VisuMZ[_0x252485(0x1b4)][_0x252485(0xab6)](_0x5a53f4);}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],'ActSeq_Grid_RemoveTriggerFromNode',_0x32b39e=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_RemoveTriggerFromNode'](_0x32b39e);}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],'ActSeq_Grid_TeleportToNode',_0x4f997e=>{const _0x1986c3=_0x57e85a;VisuMZ[_0x1986c3(0x1b4)]['ActSeq_Grid_TeleportToNode'](_0x4f997e);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x95f),_0x3abffe=>{const _0x162921=_0x57e85a;VisuMZ[_0x162921(0x1b4)]['ActSeq_Grid_TraverseToNode'](_0x3abffe);}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x67e),_0x5f0be2=>{const _0x29aedc=_0x57e85a;if(!Imported[_0x29aedc(0xb15)])return;if(!SceneManager[_0x29aedc(0x4b2)]())return;VisuMZ[_0x29aedc(0x15e)](_0x5f0be2,_0x5f0be2);const _0x344fb4=VisuMZ[_0x29aedc(0xdd4)](_0x5f0be2[_0x29aedc(0xa3a)]);for(const _0x19970f of _0x344fb4){if('vDIBv'!==_0x29aedc(0xc90)){if(!_0x19970f)continue;_0x19970f[_0x29aedc(0x696)]('noise'),_0x19970f[_0x29aedc(0x696)]('glitch'),_0x19970f['removeHorrorEffect']('tv'),_0x19970f['clearHorrorEffects']();}else{const _0x711b73=this[_0x29aedc(0x5ca)]()?this[_0x29aedc(0x64f)]:0x0,_0x5aedc8=_0x2577cb[_0x29aedc(0x7df)];this['setupChild'](_0x5aedc8,_0x711b73),this[_0x29aedc(0xd54)]=_0xa7176b[_0x29aedc(0xbdc)](this[_0x29aedc(0xd54)]);const _0x21b233={'code':0xbc3,'indent':this[_0x29aedc(0x4b1)],'parameters':_0xb6707a['makeDeepCopy'](_0x259c3a)};return this[_0x29aedc(0xd54)][_0x29aedc(0x8ed)](this[_0x29aedc(0xc87)]+0x1,0x0,_0x21b233),!![];}}$gamePlayer['refresh']();}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x2d5),_0x5940a7=>{const _0x2e68c3=_0x57e85a;if(!Imported[_0x2e68c3(0xb15)])return;if(!SceneManager[_0x2e68c3(0x4b2)]())return;VisuMZ['ConvertParams'](_0x5940a7,_0x5940a7);const _0x105f4a=VisuMZ[_0x2e68c3(0xdd4)](_0x5940a7[_0x2e68c3(0xa3a)]),_0x169192=_0x2e68c3(0x985);_0x5940a7[_0x2e68c3(0x770)]=Math[_0x2e68c3(0x8a8)](_0x5940a7[_0x2e68c3(0xe1e)]/0x2),_0x5940a7[_0x2e68c3(0xb65)]=_0x5940a7[_0x2e68c3(0xe1e)],_0x5940a7[_0x2e68c3(0x60b)]=!![];for(const _0x5044f2 of _0x105f4a){if(_0x2e68c3(0x3ae)===_0x2e68c3(0x32f))this[_0x2e68c3(0x93c)]()===_0x2e68c3(0x515)?this['_cancelButton']['x']=0x8:this[_0x2e68c3(0x8e4)]['x']=-this[_0x2e68c3(0x8e4)]['width']-0x4;else{if(!_0x5044f2)continue;_0x5044f2[_0x2e68c3(0xc00)](_0x169192,_0x5940a7);}}$gamePlayer['refresh']();}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x441),_0x30a51d=>{const _0x3bcca3=_0x57e85a;if(!Imported[_0x3bcca3(0xb15)])return;if(!SceneManager[_0x3bcca3(0x4b2)]())return;VisuMZ[_0x3bcca3(0x15e)](_0x30a51d,_0x30a51d);const _0x6a71e1=VisuMZ[_0x3bcca3(0xdd4)](_0x30a51d[_0x3bcca3(0xa3a)]);for(const _0x16cd34 of _0x6a71e1){if(!_0x16cd34)continue;_0x16cd34[_0x3bcca3(0x696)](_0x3bcca3(0x985));}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],'ActSeq_Horror_NoiseCreate',_0x5094ea=>{const _0x513a6d=_0x57e85a;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x513a6d(0x4b2)]())return;VisuMZ['ConvertParams'](_0x5094ea,_0x5094ea);const _0xd4f0ec=VisuMZ[_0x513a6d(0xdd4)](_0x5094ea[_0x513a6d(0xa3a)]),_0xcd5307='noise';for(const _0xcc30f4 of _0xd4f0ec){if(!_0xcc30f4)continue;_0xcc30f4['setHorrorEffectSettings'](_0xcd5307,_0x5094ea);}$gamePlayer[_0x513a6d(0xa6a)]();}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x300),_0xafdbd9=>{const _0x1da511=_0x57e85a;if(!Imported[_0x1da511(0xb15)])return;if(!SceneManager[_0x1da511(0x4b2)]())return;VisuMZ[_0x1da511(0x15e)](_0xafdbd9,_0xafdbd9);const _0x33c105=VisuMZ[_0x1da511(0xdd4)](_0xafdbd9[_0x1da511(0xa3a)]);for(const _0x4842e2 of _0x33c105){if(_0x1da511(0x3cd)===_0x1da511(0x3cd)){if(!_0x4842e2)continue;_0x4842e2[_0x1da511(0x696)](_0x1da511(0xb3f));}else{const _0xaadea1=this['itemLineRect'](this[_0x1da511(0x8c8)]());let _0x5e1855=this[_0x1da511(0x276)](this[_0x1da511(0x8c8)]());_0x5e1855=_0x5e1855[_0x1da511(0x795)](/\\I\[(\d+)\]/gi,''),_0x2954c2[_0x1da511(0x210)](),this['commandNameWindowDrawBackground'](_0x5e1855,_0xaadea1),this['commandNameWindowDrawText'](_0x5e1855,_0xaadea1),this[_0x1da511(0x160)](_0x5e1855,_0xaadea1);}}$gamePlayer[_0x1da511(0xa6a)]();}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xd5e),_0x5d9b3d=>{const _0x154999=_0x57e85a;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x154999(0x4b2)]())return;VisuMZ['ConvertParams'](_0x5d9b3d,_0x5d9b3d);const _0x2243f8=VisuMZ[_0x154999(0xdd4)](_0x5d9b3d[_0x154999(0xa3a)]),_0x3e02a2='tv';for(const _0x9dd60d of _0x2243f8){if('yRncG'!==_0x154999(0x432))_0x2f2fe1[_0x154999(0x484)]([_0x1108fd]);else{if(!_0x9dd60d)continue;_0x9dd60d[_0x154999(0xc00)](_0x3e02a2,_0x5d9b3d);}}$gamePlayer[_0x154999(0xa6a)]();}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Horror_TVRemove',_0x5f2ff2=>{const _0x1e352f=_0x57e85a;if(!Imported[_0x1e352f(0xb15)])return;if(!SceneManager[_0x1e352f(0x4b2)]())return;VisuMZ['ConvertParams'](_0x5f2ff2,_0x5f2ff2);const _0x4e07b1=VisuMZ['CreateActionSequenceTargets'](_0x5f2ff2['Targets']);for(const _0x14de61 of _0x4e07b1){if(_0x1e352f(0x5a8)===_0x1e352f(0x5a8)){if(!_0x14de61)continue;_0x14de61[_0x1e352f(0x696)]('tv');}else return _0xe50333[_0x1e352f(0x734)][_0x1e352f(0x478)][_0x1e352f(0x573)][_0x1e352f(0x2fd)][_0x1e352f(0xa23)](this,_0x20fb42,_0x975e0);}$gamePlayer[_0x1e352f(0xa6a)]();}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0xa8f),_0x526de2=>{const _0x390f55=_0x57e85a;if(!Imported[_0x390f55(0xd86)])return;const _0x831de0=SceneManager[_0x390f55(0xd04)][_0x390f55(0x78d)];if(!_0x831de0)return;if(VisuMZ['ActSeqImpact']['version']<=1.04){if(_0x390f55(0xa1b)===_0x390f55(0x70a)){const _0x46a0c1=this['commandStyle'](),_0x433566=_0x44d16f[_0x390f55(0x734)]['Settings']['PartyCmd']['CmdIconAutoBattle'],_0x9de858=_0x46a0c1===_0x390f55(0x891)?_0xadc5d4[_0x390f55(0x635)]:_0x390f55(0x53c)['format'](_0x433566,_0x4feeaa[_0x390f55(0x635)]),_0x51cc13=this['isAutoBattleCommandEnabled']();this[_0x390f55(0x761)](_0x9de858,'autoBattle',_0x51cc13);}else{alert(_0x390f55(0x299)),SceneManager[_0x390f55(0x4f1)]();return;}}VisuMZ[_0x390f55(0x15e)](_0x526de2,_0x526de2);const _0x3802c4=_0x526de2[_0x390f55(0xe2b)];_0x831de0[_0x390f55(0x4a6)](_0x3802c4);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Impact_ColorBreak',_0xc380ff=>{const _0x451784=_0x57e85a;if(!SceneManager[_0x451784(0x4b2)]())return;if(!Imported[_0x451784(0xd86)])return;const _0x4628e5=SceneManager['_scene']['_spriteset'];if(!_0x4628e5)return;VisuMZ[_0x451784(0x15e)](_0xc380ff,_0xc380ff);const _0x332987=_0xc380ff[_0x451784(0x3a4)]||0x1,_0x57d7e2=_0xc380ff[_0x451784(0x692)]||0x1,_0x541700=_0xc380ff[_0x451784(0xa42)]||'Linear';_0x4628e5[_0x451784(0x72e)](_0x332987,_0x57d7e2,_0x541700);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x37a),_0x4368cc=>{const _0x5571d2=_0x57e85a;if(!Imported[_0x5571d2(0xd86)])return;const _0x51166a=SceneManager[_0x5571d2(0xd04)][_0x5571d2(0x78d)];if(!_0x51166a)return;if(VisuMZ['ActSeqImpact'][_0x5571d2(0x88f)]<=1.04){if(_0x5571d2(0xdbb)!==_0x5571d2(0xbb0)){alert(_0x5571d2(0x299)),SceneManager[_0x5571d2(0x4f1)]();return;}else this['_distortionSprite'][_0x5571d2(0x67f)](this[_0x5571d2(0xc4d)]);}VisuMZ[_0x5571d2(0x15e)](_0x4368cc,_0x4368cc);const _0x464e57=_0x4368cc[_0x5571d2(0xe2b)];_0x51166a[_0x5571d2(0x6a3)](_0x464e57);}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0xb76),_0x238a17=>{const _0x1a3e92=_0x57e85a;if(!SceneManager[_0x1a3e92(0x4b2)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x19c731=SceneManager[_0x1a3e92(0xd04)][_0x1a3e92(0x78d)];if(!_0x19c731)return;VisuMZ[_0x1a3e92(0x15e)](_0x238a17,_0x238a17);const _0x1a2b36=Number(_0x238a17['Angle'])||0x0,_0x548800=Number(_0x238a17[_0x1a3e92(0xb4c)]),_0x2e0354=_0x238a17[_0x1a3e92(0x692)]||0x1,_0x1d702c=_0x238a17[_0x1a3e92(0xa42)]||'Linear';_0x19c731[_0x1a3e92(0x298)](_0x1a2b36,_0x548800,_0x2e0354,_0x1d702c);}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x578),_0x4ab29b=>{const _0x1b8720=_0x57e85a;if(!SceneManager[_0x1b8720(0x4b2)]())return;if(!Imported[_0x1b8720(0xd86)])return;const _0x541efa=SceneManager[_0x1b8720(0xd04)]['_spriteset'];if(!_0x541efa)return;VisuMZ['ConvertParams'](_0x4ab29b,_0x4ab29b);const _0x3e8166=Number(_0x4ab29b[_0x1b8720(0x78c)])||0x0,_0x166f2a=Number(_0x4ab29b[_0x1b8720(0xb4c)]),_0x3b7ace=_0x4ab29b[_0x1b8720(0x692)]||0x1,_0x102052=_0x4ab29b['EasingType']||_0x1b8720(0x23a),_0x1403af=VisuMZ[_0x1b8720(0xdd4)](_0x4ab29b[_0x1b8720(0xa3a)]);for(const _0x4684d3 of _0x1403af){if(!_0x4684d3)continue;if(!_0x4684d3['battler']())continue;_0x4684d3['battler']()[_0x1b8720(0x298)](_0x3e8166,_0x166f2a,_0x3b7ace,_0x102052);}}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],'ActSeq_Impact_MotionTrailCreate',_0x96cc01=>{const _0x36581b=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x96cc01,_0x96cc01);const _0x2bfa92={'delay':_0x96cc01['delay'],'duration':_0x96cc01[_0x36581b(0x736)],'hue':_0x96cc01[_0x36581b(0x39c)],'opacityStart':_0x96cc01['opacityStart'],'tone':_0x96cc01[_0x36581b(0x90c)],'visible':!![]},_0x5cfcf4=VisuMZ[_0x36581b(0xdd4)](_0x96cc01[_0x36581b(0xa3a)]);for(const _0x141c0b of _0x5cfcf4){if(!_0x141c0b)continue;_0x141c0b[_0x36581b(0x329)](_0x2bfa92);}}),PluginManager['registerCommand'](pluginData['name'],_0x57e85a(0x6df),_0x1a6a14=>{const _0x43dfb8=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x43dfb8(0x15e)](_0x1a6a14,_0x1a6a14);const _0x4f9d13=VisuMZ[_0x43dfb8(0xdd4)](_0x1a6a14[_0x43dfb8(0xa3a)]);for(const _0x526bf7 of _0x4f9d13){if(!_0x526bf7)continue;_0x526bf7['clearBattlerMotionTrailData']();}}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0xa3b),_0x5da78e=>{const _0x56f7d7=_0x57e85a;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xf2c469=SceneManager['_scene'][_0x56f7d7(0x78d)];if(!_0xf2c469)return;if(VisuMZ[_0x56f7d7(0xdae)][_0x56f7d7(0x88f)]<=1.04){alert(_0x56f7d7(0x299)),SceneManager[_0x56f7d7(0x4f1)]();return;}VisuMZ['ConvertParams'](_0x5da78e,_0x5da78e);const _0x3861ab=_0x5da78e['Enable'];_0xf2c469[_0x56f7d7(0x650)](_0x3861ab);}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x187),_0x28b11c=>{const _0x5461b1=_0x57e85a;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x415af4=SceneManager['_scene'][_0x5461b1(0x78d)];if(!_0x415af4)return;if(VisuMZ[_0x5461b1(0xdae)][_0x5461b1(0x88f)]<=1.04){alert(_0x5461b1(0x299)),SceneManager['exit']();return;}VisuMZ[_0x5461b1(0x15e)](_0x28b11c,_0x28b11c);const _0x32822f=_0x28b11c[_0x5461b1(0xe2b)];_0x415af4[_0x5461b1(0x42b)](_0x32822f);}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],'ActSeq_Impact_ShockwavePoint',_0x5054a2=>{const _0xe40480=_0x57e85a;if(!Imported[_0xe40480(0xd86)])return;const _0x3cd5f6=SceneManager[_0xe40480(0xd04)][_0xe40480(0x78d)];if(!_0x3cd5f6)return;VisuMZ[_0xe40480(0x15e)](_0x5054a2,_0x5054a2);const _0x37b111=_0x5054a2['X']||0x0,_0x4407ea=_0x5054a2['Y']||0x0,_0x4b8dd8=_0x5054a2[_0xe40480(0x6fb)]||0x0,_0x35a5d7=_0x5054a2['Wave']||0x0,_0x1525a8=_0x5054a2[_0xe40480(0x692)]||0x1;_0x3cd5f6[_0xe40480(0x3e1)](_0x37b111,_0x4407ea,_0x4b8dd8,_0x35a5d7,_0x1525a8);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xbc0),_0x2bc05c=>{const _0x472cff=_0x57e85a;if(!SceneManager[_0x472cff(0x4b2)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x5ea5ff=SceneManager['_scene'][_0x472cff(0x78d)];if(!_0x5ea5ff)return;VisuMZ['ConvertParams'](_0x2bc05c,_0x2bc05c);const _0x5c0fef=VisuMZ[_0x472cff(0xdd4)](_0x2bc05c['Targets']),_0x3be4b6=_0x2bc05c['TargetLocation'],_0x23242d=_0x2bc05c[_0x472cff(0xc3c)]||0x0,_0x5c58fd=_0x2bc05c[_0x472cff(0xa95)]||0x0,_0x7a65e9=_0x2bc05c[_0x472cff(0x6fb)]||0x0,_0x5e7d1e=_0x2bc05c[_0x472cff(0x73b)]||0x0,_0x3884dd=_0x2bc05c[_0x472cff(0x692)]||0x1;for(const _0x32bcc2 of _0x5c0fef){if('GIkWq'!=='cAtbS'){if(!_0x32bcc2)continue;if(!_0x32bcc2[_0x472cff(0x3ab)]())continue;const _0x16cdd4=_0x32bcc2[_0x472cff(0x3ab)]();let _0x170278=_0x16cdd4[_0x472cff(0x4aa)],_0x12a968=_0x16cdd4[_0x472cff(0x20d)];_0x170278+=(Graphics[_0x472cff(0x8b9)]-Graphics[_0x472cff(0x418)])/0x2,_0x12a968+=(Graphics[_0x472cff(0x54b)]-Graphics[_0x472cff(0x85e)])/0x2;if(_0x3be4b6[_0x472cff(0x392)](/front/i))_0x170278+=(_0x32bcc2[_0x472cff(0xd89)]()?0x1:-0x1)*_0x16cdd4[_0x472cff(0x6f2)]()/0x2;else _0x3be4b6['match'](/back/i)&&(_0x170278+=(_0x32bcc2['isEnemy']()?-0x1:0x1)*_0x16cdd4[_0x472cff(0x6f2)]()/0x2);if(_0x3be4b6[_0x472cff(0x392)](/head/i))_0x472cff(0x41f)!=='rRAsj'?_0x12a968-=_0x16cdd4[_0x472cff(0x62d)]():(_0x2d143d[_0x472cff(0x734)]['Window_BattleLog_clear'][_0x472cff(0xa23)](this),this[_0x472cff(0x8d9)]());else{if(_0x3be4b6[_0x472cff(0x392)](/center/i)){if(_0x472cff(0xcc7)!==_0x472cff(0xcc7))return this[_0x472cff(0x54b)]*this['mainSpriteScaleY']();else _0x12a968-=_0x16cdd4[_0x472cff(0x62d)]()/0x2;}}_0x170278+=_0x23242d,_0x12a968+=_0x5c58fd,_0x5ea5ff[_0x472cff(0x3e1)](_0x170278,_0x12a968,_0x7a65e9,_0x5e7d1e,_0x3884dd);}else this['isCustomBattleScope']()?_0x4d3958=this[_0x472cff(0x54a)]():_0x474191=this['makeTargetsBattleCore']();}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xb6f),_0x35cf62=>{const _0x484cd9=_0x57e85a;if(!SceneManager[_0x484cd9(0x4b2)]())return;if(!Imported[_0x484cd9(0xd86)])return;const _0xcf296c=SceneManager['_scene']['_spriteset'];if(!_0xcf296c)return;VisuMZ[_0x484cd9(0x15e)](_0x35cf62,_0x35cf62);const _0x371eaf=VisuMZ[_0x484cd9(0xdd4)](_0x35cf62[_0x484cd9(0xa3a)]),_0x2f3d40=_0x35cf62['TargetLocation'],_0x3600ee=_0x35cf62[_0x484cd9(0xc3c)]||0x0,_0x34fa11=_0x35cf62[_0x484cd9(0xa95)]||0x0,_0x14f0d7=_0x35cf62[_0x484cd9(0x6fb)]||0x0,_0x35b867=_0x35cf62['Wave']||0x0,_0x15dcf5=_0x35cf62[_0x484cd9(0x692)]||0x1,_0x11a194=Math['min'](..._0x371eaf[_0x484cd9(0x260)](_0x1ce840=>_0x1ce840[_0x484cd9(0x3ab)]()['_baseX']-_0x1ce840['battler']()['mainSpriteWidth']()/0x2)),_0x29e2c2=Math[_0x484cd9(0xde7)](..._0x371eaf[_0x484cd9(0x260)](_0x31df80=>_0x31df80[_0x484cd9(0x3ab)]()['_baseX']+_0x31df80[_0x484cd9(0x3ab)]()[_0x484cd9(0x6f2)]()/0x2)),_0x2449dd=Math[_0x484cd9(0x16e)](..._0x371eaf[_0x484cd9(0x260)](_0x129a23=>_0x129a23[_0x484cd9(0x3ab)]()[_0x484cd9(0x20d)]-_0x129a23[_0x484cd9(0x3ab)]()[_0x484cd9(0x62d)]())),_0x56ce7a=Math[_0x484cd9(0xde7)](..._0x371eaf[_0x484cd9(0x260)](_0x524488=>_0x524488[_0x484cd9(0x3ab)]()[_0x484cd9(0x20d)])),_0x572f16=_0x371eaf[_0x484cd9(0x1db)](_0x23d572=>_0x23d572[_0x484cd9(0x7d1)]())[_0x484cd9(0xd36)],_0x5f32c2=_0x371eaf['filter'](_0x2e203a=>_0x2e203a[_0x484cd9(0xd89)]())[_0x484cd9(0xd36)];let _0x3b0261=0x0,_0xf69249=0x0;if(_0x2f3d40['match'](/front/i))_0x3b0261=_0x572f16>=_0x5f32c2?_0x11a194:_0x29e2c2;else{if(_0x2f3d40['match'](/middle/i))_0x3b0261=(_0x11a194+_0x29e2c2)/0x2,melee=-0x1;else _0x2f3d40[_0x484cd9(0x392)](/back/i)&&(_0x3b0261=_0x572f16>=_0x5f32c2?_0x29e2c2:_0x11a194);}if(_0x2f3d40['match'](/head/i))_0x484cd9(0x8f2)==='pPutN'?(this[_0x484cd9(0xe13)]=this[_0x484cd9(0x3f1)]()[_0x484cd9(0x7a3)](),this['refresh']()):_0xf69249=_0x2449dd;else{if(_0x2f3d40[_0x484cd9(0x392)](/center/i))_0x484cd9(0x1be)!==_0x484cd9(0x4ac)?_0xf69249=(_0x2449dd+_0x56ce7a)/0x2:(_0x11bcac['moveBattlerToPoint'](_0x57fe90,_0x24c563,_0x31a6cf,_0x2da4a5,_0x3f403c,-0x1),this[_0x484cd9(0x8d9)]());else _0x2f3d40[_0x484cd9(0x392)](/base/i)&&(_0x484cd9(0x910)!==_0x484cd9(0x910)?_0xb6c92f['removeBuff'](_0x2c7023):_0xf69249=_0x56ce7a);}_0x3b0261+=(Graphics[_0x484cd9(0x8b9)]-Graphics[_0x484cd9(0x418)])/0x2,_0xf69249+=(Graphics[_0x484cd9(0x54b)]-Graphics[_0x484cd9(0x85e)])/0x2,_0x3b0261+=_0x3600ee,_0xf69249+=_0x34fa11,_0xcf296c['setupShockwaveImpactFilter'](_0x3b0261,_0xf69249,_0x14f0d7,_0x35b867,_0x15dcf5);}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x4bb),_0x5e3396=>{const _0x285f2b=_0x57e85a;if(!Imported[_0x285f2b(0xd86)])return;const _0x10a81d=SceneManager[_0x285f2b(0xd04)]['_spriteset'];if(!_0x10a81d)return;if(VisuMZ['ActSeqImpact'][_0x285f2b(0x88f)]<=1.04){alert(_0x285f2b(0x299)),SceneManager[_0x285f2b(0x4f1)]();return;}VisuMZ[_0x285f2b(0x15e)](_0x5e3396,_0x5e3396);const _0x3811a5=$gameTemp[_0x285f2b(0xc21)](),_0x44b2c9=Math[_0x285f2b(0xde7)](0.01,_0x5e3396[_0x285f2b(0x9f9)]);$gameTemp[_0x285f2b(0x496)](_0x44b2c9,_0x3811a5);}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x844),_0x3e8efb=>{const _0x2c8bc0=_0x57e85a;if(!Imported[_0x2c8bc0(0xd86)])return;const _0x3fe456=SceneManager[_0x2c8bc0(0xd04)][_0x2c8bc0(0x78d)];if(!_0x3fe456)return;if(VisuMZ[_0x2c8bc0(0xdae)][_0x2c8bc0(0x88f)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x3e8efb,_0x3e8efb);const _0x4c8ce9=$gameTemp[_0x2c8bc0(0xc21)](),_0xeb5c78=_0x3e8efb['ms']||0x1;VisuMZ[_0x2c8bc0(0xdae)][_0x2c8bc0(0x51a)](_0xeb5c78,_0x4c8ce9);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x25f),_0x18101b=>{const _0x11085c=_0x57e85a;if(!Imported[_0x11085c(0xd86)])return;const _0x942560=SceneManager[_0x11085c(0xd04)][_0x11085c(0x78d)];if(!_0x942560)return;VisuMZ[_0x11085c(0x15e)](_0x18101b,_0x18101b);const _0x3f1087=_0x18101b['X']||0x0,_0x1199d8=_0x18101b['Y']||0x0,_0x224bc5=_0x18101b[_0x11085c(0xa6b)]||0x0,_0x4dfc1e=_0x18101b[_0x11085c(0x51f)]||0x0,_0x262893=_0x18101b[_0x11085c(0x692)]||0x1,_0xc66860=_0x18101b[_0x11085c(0xa42)]||_0x11085c(0x23a);_0x942560[_0x11085c(0x512)](_0x224bc5,_0x3f1087,_0x1199d8,_0x4dfc1e,_0x262893,_0xc66860);}),PluginManager['registerCommand'](pluginData['name'],_0x57e85a(0xc83),_0x5eeefb=>{const _0x334c77=_0x57e85a;if(!Imported[_0x334c77(0xd86)])return;const _0x47ca98=SceneManager['_scene'][_0x334c77(0x78d)];if(!_0x47ca98)return;VisuMZ['ConvertParams'](_0x5eeefb,_0x5eeefb);const _0xb96745=VisuMZ[_0x334c77(0xdd4)](_0x5eeefb['Targets']),_0xc25a36=_0x5eeefb[_0x334c77(0x427)],_0x54e3fc=_0x5eeefb[_0x334c77(0xc3c)]||0x0,_0x2bc8c1=_0x5eeefb[_0x334c77(0xa95)]||0x0,_0xc64d7d=_0x5eeefb[_0x334c77(0xa6b)]||0x0,_0x262b97=_0x5eeefb[_0x334c77(0x51f)]||0x0,_0x3526f0=_0x5eeefb[_0x334c77(0x692)]||0x1,_0xa8f5bf=_0x5eeefb[_0x334c77(0xa42)]||'Linear',_0x5f2f75=Math[_0x334c77(0x16e)](..._0xb96745['map'](_0x10f17e=>_0x10f17e[_0x334c77(0x3ab)]()[_0x334c77(0x4aa)]-_0x10f17e[_0x334c77(0x3ab)]()['mainSpriteWidth']()/0x2)),_0x5d64ae=Math['max'](..._0xb96745['map'](_0x2fb8a6=>_0x2fb8a6['battler']()[_0x334c77(0x4aa)]+_0x2fb8a6[_0x334c77(0x3ab)]()[_0x334c77(0x6f2)]()/0x2)),_0x4088f9=Math[_0x334c77(0x16e)](..._0xb96745[_0x334c77(0x260)](_0x5f452f=>_0x5f452f['battler']()['_baseY']-_0x5f452f[_0x334c77(0x3ab)]()[_0x334c77(0x62d)]())),_0x5a5501=Math['max'](..._0xb96745[_0x334c77(0x260)](_0x56c7b4=>_0x56c7b4['battler']()[_0x334c77(0x20d)])),_0x5e3f67=_0xb96745[_0x334c77(0x1db)](_0x1642b=>_0x1642b[_0x334c77(0x7d1)]())['length'],_0x27a01d=_0xb96745['filter'](_0x278748=>_0x278748['isEnemy']())[_0x334c77(0xd36)];let _0x3d696f=0x0,_0x5483af=0x0;if(_0xc25a36['match'](/front/i))_0x334c77(0x9bd)!=='oAGLA'?(this[_0x334c77(0x74b)]=![],this[_0x334c77(0x449)]=_0x2e5342[_0x334c77(0x38a)],this['_endingBattle']=![],this[_0x334c77(0x830)](_0x334c77(0x8db)),_0x4b045f[_0x334c77(0x734)][_0x334c77(0x93a)]['call'](this),this[_0x334c77(0x830)](_0x334c77(0x235))):_0x3d696f=_0x5e3f67>=_0x27a01d?_0x5f2f75:_0x5d64ae;else{if(_0xc25a36['match'](/middle/i))_0x3d696f=(_0x5f2f75+_0x5d64ae)/0x2,melee=-0x1;else _0xc25a36[_0x334c77(0x392)](/back/i)&&(_0x334c77(0x898)===_0x334c77(0x898)?_0x3d696f=_0x5e3f67>=_0x27a01d?_0x5d64ae:_0x5f2f75:(_0x5113ae['x']+=_0x18e49a['PopupShiftX']*_0x2b350e,_0x2b99ed['y']+=_0x392523[_0x334c77(0x74c)]));}if(_0xc25a36[_0x334c77(0x392)](/head/i))_0x5483af=_0x4088f9;else{if(_0xc25a36[_0x334c77(0x392)](/center/i)){if(_0x334c77(0x223)===_0x334c77(0x9bb)){if(!_0x418b7f[_0x334c77(0x734)]['Settings']['BattleLog'][_0x334c77(0x7fa)])return;const _0x8ede74=_0x9ff8c2[_0x334c77(0x2b9)](),_0x44c639=_0x8ede74[_0x334c77(0xb1f)]();for(const _0x190686 of _0x44c639){_0x190686['message4']&&(this[_0x334c77(0x5fa)](_0x334c77(0xcb2)),this[_0x334c77(0x5fa)]('popBaseLine'),this[_0x334c77(0x5fa)](_0x334c77(0x1b2)),this[_0x334c77(0x5fa)]('addText',_0x190686['message4'][_0x334c77(0x554)](_0x5989b2[_0x334c77(0x7a3)]())),this[_0x334c77(0x5fa)](_0x334c77(0x674)));}}else _0x5483af=(_0x4088f9+_0x5a5501)/0x2;}else _0xc25a36['match'](/base/i)&&(_0x5483af=_0x5a5501);}_0x3d696f+=(Graphics[_0x334c77(0x8b9)]-Graphics['boxWidth'])/0x2,_0x5483af+=(Graphics['height']-Graphics[_0x334c77(0x85e)])/0x2,_0x3d696f+=_0x54e3fc,_0x5483af+=_0x2bc8c1,_0x47ca98['setupZoomBlurImpactFilter'](_0xc64d7d,_0x3d696f,_0x5483af,_0x262b97,_0x3526f0,_0xa8f5bf);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Inject_AnimationStart',_0x3c74b7=>{const _0x46e2e8=_0x57e85a;if(!Imported[_0x46e2e8(0xd86)])return;const _0x51024c=SceneManager['_scene'][_0x46e2e8(0x78d)];if(!_0x51024c)return;if(VisuMZ['ActSeqImpact'][_0x46e2e8(0x88f)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x46e2e8(0x15e)](_0x3c74b7,_0x3c74b7);const _0x1e91fb=VisuMZ[_0x46e2e8(0xdd4)](_0x3c74b7['Targets']),_0x20396e={'filename':_0x3c74b7['Filename'],'horzCells':_0x3c74b7['horzCells']||0x1,'vertCells':_0x3c74b7['vertCells']||0x1,'frameDelay':_0x3c74b7[_0x46e2e8(0xdff)]||0x1,'smooth':_0x3c74b7[_0x46e2e8(0xdc5)]||![],'anchorX':_0x3c74b7[_0x46e2e8(0xd76)]||0x0,'anchorY':_0x3c74b7['anchorY']||0x0,'offsetX':_0x3c74b7[_0x46e2e8(0x7ab)]||0x0,'offsetY':_0x3c74b7['offsetY']||0x0};for(const _0x4928a0 of _0x1e91fb){if(!_0x4928a0)continue;if(!_0x4928a0[_0x46e2e8(0x3ab)]())continue;_0x4928a0['battler']()['startInjectAnimation'](_0x20396e);}const _0x3049f0=$gameTemp[_0x46e2e8(0xc21)]();_0x3049f0&&_0x3049f0[_0x46e2e8(0x1f9)](_0x46e2e8(0x304));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xa9c),_0xe3e4bc=>{const _0x1ec243=_0x57e85a;if(!Imported[_0x1ec243(0xd86)])return;const _0x495263=SceneManager[_0x1ec243(0xd04)]['_spriteset'];if(!_0x495263)return;if(VisuMZ['ActSeqImpact'][_0x1ec243(0x88f)]<=1.05){alert(_0x1ec243(0x299)),SceneManager[_0x1ec243(0x4f1)]();return;}VisuMZ['ConvertParams'](_0xe3e4bc,_0xe3e4bc);const _0x15957f=VisuMZ['CreateActionSequenceTargets'](_0xe3e4bc[_0x1ec243(0xa3a)]);for(const _0x370c08 of _0x15957f){if(!_0x370c08)continue;if(!_0x370c08[_0x1ec243(0x3ab)]())continue;_0x370c08[_0x1ec243(0x3ab)]()[_0x1ec243(0xc44)]();}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Inject_AnimationPauseResume',_0x116804=>{const _0x83e289=_0x57e85a;if(!Imported[_0x83e289(0xd86)])return;const _0x37ff30=SceneManager[_0x83e289(0xd04)][_0x83e289(0x78d)];if(!_0x37ff30)return;if(VisuMZ['ActSeqImpact'][_0x83e289(0x88f)]<=1.05){alert(_0x83e289(0x299)),SceneManager['exit']();return;}VisuMZ[_0x83e289(0x15e)](_0x116804,_0x116804);const _0x3c79e0=VisuMZ[_0x83e289(0xdd4)](_0x116804[_0x83e289(0xa3a)]),_0x305010=_0x116804['pause'];for(const _0xc2a4c9 of _0x3c79e0){if(_0x83e289(0x4b3)!==_0x83e289(0x1de)){if(!_0xc2a4c9)continue;if(!_0xc2a4c9[_0x83e289(0x3ab)]())continue;_0xc2a4c9[_0x83e289(0x3ab)]()[_0x83e289(0xc7d)](_0x305010);}else{let _0x37c66c=_0x83e289(0x510);if(this['checkCacheKey'](_0x37c66c))return this[_0x83e289(0x879)][_0x37c66c];return this[_0x83e289(0x879)][_0x37c66c]=this[_0x83e289(0xae6)](this[_0x83e289(0x3f1)]()),this[_0x83e289(0x879)][_0x37c66c];}}}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],'ActSeq_Inject_WaitForInjectAni',_0x3457b8=>{const _0x33ec5c=_0x57e85a;if(!SceneManager['isSceneBattle']())return;const _0x1e3f0d=$gameTemp[_0x33ec5c(0xc21)]();if(!_0x1e3f0d)return;_0x1e3f0d[_0x33ec5c(0x1f9)](_0x33ec5c(0x7a8));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xdc2),_0x805c23=>{const _0x150544=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x150544(0x15e)](_0x805c23,_0x805c23);const _0x325b1b=$gameTemp['getLastPluginCommandInterpreter'](),_0x45982d=BattleManager['_action'],_0x12fd88=BattleManager['_subject'],_0x5cb876=BattleManager[_0x150544(0x9e4)];if(!_0x325b1b||!_0x45982d||!_0x12fd88)return;if(!_0x45982d['item']())return;const _0x5c396e=VisuMZ[_0x150544(0xdd4)](_0x805c23['Targets']);for(const _0x526b49 of _0x5c396e){if(_0x150544(0x3aa)!==_0x150544(0xb47)){if(!_0x526b49)continue;_0x5cb876[_0x150544(0x5fa)](_0x150544(0x7d5),_0x12fd88,_0x526b49);}else _0x18198f[_0x150544(0xa77)][_0x150544(0xafb)]()[_0x150544(0x540)](_0x270407);}_0x325b1b[_0x150544(0x1f9)]('battlelog');}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xa4e),_0x2a02d4=>{const _0x2cbf7d=_0x57e85a;if(!SceneManager[_0x2cbf7d(0x4b2)]())return;if(!Imported[_0x2cbf7d(0x825)])return;$gameTemp[_0x2cbf7d(0xd7f)]=!![];}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x443),_0x27bae5=>{const _0x2122f7=_0x57e85a;if(!SceneManager[_0x2122f7(0x4b2)]())return;VisuMZ[_0x2122f7(0x15e)](_0x27bae5,_0x27bae5);const _0x3b2945=['MAXHP',_0x2122f7(0x88b),_0x2122f7(0xd30),_0x2122f7(0x571),'MAT',_0x2122f7(0xda7),'AGI',_0x2122f7(0x89a)],_0x5ce76f=_0x27bae5['Buffs'],_0x16bcbf=_0x27bae5[_0x2122f7(0x97d)],_0x1a2d94=_0x27bae5[_0x2122f7(0xcc2)],_0x1d9cf1=VisuMZ[_0x2122f7(0xdd4)](_0x27bae5['Targets']);for(const _0x529db8 of _0x1d9cf1){if(_0x2122f7(0xaad)===_0x2122f7(0xaad)){if(!_0x529db8)continue;for(const _0x4c5d10 of _0x5ce76f){if(_0x2122f7(0x951)!==_0x2122f7(0xb02)){const _0x41b635=_0x3b2945[_0x2122f7(0x9b6)](_0x4c5d10[_0x2122f7(0x307)]()['trim']());_0x41b635>=0x0&&_0x41b635<=0x7&&_0x529db8['addBuff'](_0x41b635,_0x1a2d94);}else this[_0x2122f7(0xbac)]=this[_0x2122f7(0x83e)],this['_homeY']=this[_0x2122f7(0xaf3)];}for(const _0x47228e of _0x16bcbf){const _0x3ec8cc=_0x3b2945[_0x2122f7(0x9b6)](_0x47228e[_0x2122f7(0x307)]()[_0x2122f7(0xdf5)]());_0x3ec8cc>=0x0&&_0x3ec8cc<=0x7&&(_0x2122f7(0x31a)===_0x2122f7(0x31a)?_0x529db8['addDebuff'](_0x3ec8cc,_0x1a2d94):(this[_0x2122f7(0x62b)]['x']=this['x'],this[_0x2122f7(0x62b)]['y']=this['y']));}}else _0x345826+=_0x51857e,_0x2f957a+=_0x489a9a;}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x28f),_0x33be3b=>{const _0x383167=_0x57e85a;if(!SceneManager[_0x383167(0x4b2)]())return;VisuMZ[_0x383167(0x15e)](_0x33be3b,_0x33be3b);const _0x923cec=_0x33be3b[_0x383167(0x2d7)],_0x2bfb78=VisuMZ['CreateActionSequenceTargets'](_0x33be3b[_0x383167(0xa3a)]);for(const _0x481b6c of _0x2bfb78){if(_0x383167(0x282)!==_0x383167(0x185)){if(!_0x481b6c)continue;for(const _0x51f4d6 of _0x923cec){if('xjuMB'!==_0x383167(0x360))return _0x4e259a[_0x383167(0x1db)](_0xef6f37=>_0xef6f37['isAlive']()&&_0xef6f37!==_0x29aec0);else _0x481b6c['addState'](_0x51f4d6);}}else return 0x0;}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x7bc),_0x1e6e4b=>{const _0xb7ade8=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xb7ade8(0x15e)](_0x1e6e4b,_0x1e6e4b);const _0x23fbea=BattleManager[_0xb7ade8(0x577)],_0x22d4d9={'arPenRate':_0x1e6e4b[_0xb7ade8(0x96e)],'arPenFlat':_0x1e6e4b['ArPenFlat'],'arRedRate':_0x1e6e4b['ArRedRate'],'arRedFlat':_0x1e6e4b[_0xb7ade8(0xa00)]};_0x23fbea['_armorPenetration']=_0x22d4d9;}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xb07),_0x4d1750=>{const _0x239842=_0x57e85a;if(!SceneManager[_0x239842(0x4b2)]())return;if(!Imported[_0x239842(0x40d)])return;VisuMZ[_0x239842(0x15e)](_0x4d1750,_0x4d1750);const _0xba110e=VisuMZ['CreateActionSequenceTargets'](_0x4d1750['Targets']),_0xf705fd=_0x4d1750['Reveal']||0x1;for(const _0x262ee9 of _0xba110e){if(!_0x262ee9)continue;if(!_0x262ee9[_0x239842(0xd89)]())continue;_0x262ee9[_0x239842(0x240)](_0xf705fd);}}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x381),_0x58e7fd=>{const _0x140c97=_0x57e85a;if(!SceneManager[_0x140c97(0x4b2)]())return;if(!Imported[_0x140c97(0x470)])return;if(!BattleManager[_0x140c97(0xa59)]())return;VisuMZ['ConvertParams'](_0x58e7fd,_0x58e7fd);const _0x106138=VisuMZ[_0x140c97(0xdd4)](_0x58e7fd[_0x140c97(0xa3a)]),_0x5cf0ea=_0x58e7fd[_0x140c97(0xcc6)],_0x3eae06=_0x58e7fd['ChargeRate'],_0x521041=_0x58e7fd[_0x140c97(0x6f7)];for(const _0x26983d of _0x106138){if(!_0x26983d)continue;if(_0x26983d[_0x140c97(0xa5f)]()){if('Jqngv'!=='oygHt')_0x26983d[_0x140c97(0xc69)](_0x5cf0ea);else return _0x1fec15['BattleCore'][_0x140c97(0x478)]['Actor'][_0x140c97(0xc13)];}else{if(_0x26983d['isAtbCastingState']()){_0x26983d[_0x140c97(0x78f)](_0x3eae06);if(_0x521041)_0x26983d[_0x140c97(0xb8a)]();}}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Mechanics_BoostPointsChange',_0x41615e=>{const _0x5c890c=_0x57e85a;if(!SceneManager[_0x5c890c(0x4b2)]())return;if(!Imported[_0x5c890c(0x367)])return;VisuMZ['ConvertParams'](_0x41615e,_0x41615e);const _0x4ef7ac=VisuMZ[_0x5c890c(0xdd4)](_0x41615e['Targets']),_0x306a83=_0x41615e['BoostPoints'];for(const _0x4df87c of _0x4ef7ac){if(!_0x4df87c)continue;_0x4df87c[_0x5c890c(0xaf0)](_0x306a83);}}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],'ActSeq_Mechanics_BoostPointsStoreData',_0x4605ff=>{const _0x362fce=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x362fce(0x367)])return;if(!BattleManager[_0x362fce(0xa77)])return;VisuMZ['ConvertParams'](_0x4605ff,_0x4605ff);const _0xfb8efc=_0x4605ff[_0x362fce(0x36d)];$gameVariables[_0x362fce(0x565)](_0xfb8efc,BattleManager[_0x362fce(0xa77)][_0x362fce(0x8e5)]());}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x22d),_0x5af5c5=>{const _0xe14bab=_0x57e85a;if(!SceneManager[_0xe14bab(0x4b2)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0xe14bab(0x15e)](_0x5af5c5,_0x5af5c5);const _0x137e6a=VisuMZ[_0xe14bab(0xdd4)](_0x5af5c5[_0xe14bab(0xa3a)]),_0x8029f9=_0x5af5c5[_0xe14bab(0x325)];for(const _0x258509 of _0x137e6a){if(_0xe14bab(0x83c)!==_0xe14bab(0xcfa)){if(!_0x258509)continue;if(_0x258509['isBreakStunned']())continue;if(!_0x258509['isAffectedByBreakShield']())continue;_0x258509[_0xe14bab(0x69f)](_0x8029f9);}else return _0x3de301['VisuMZ_0_CoreEngine']?_0x179fe8['CoreEngine'][_0xe14bab(0x478)][_0xe14bab(0x9d8)]['DigitGroupingDamageSprites']:![];}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x9fd),_0x27451d=>{const _0x320f7a=_0x57e85a;if(!SceneManager[_0x320f7a(0x4b2)]())return;if(!Imported[_0x320f7a(0x855)])return;VisuMZ[_0x320f7a(0x15e)](_0x27451d,_0x27451d);const _0x258c37=VisuMZ[_0x320f7a(0xdd4)](_0x27451d[_0x320f7a(0xa3a)]);for(const _0x30164d of _0x258c37){if(_0x320f7a(0xda0)!==_0x320f7a(0xda0))return _0x28c5eb(_0x5efd08['$1']);else{if(!_0x30164d)continue;if(_0x30164d[_0x320f7a(0x1f2)]())continue;if(!_0x30164d[_0x320f7a(0x922)]())continue;_0x30164d['resetBreakShield']();}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xb7a),_0x39aa53=>{const _0x4beec2=_0x57e85a;if(!SceneManager[_0x4beec2(0x4b2)]())return;if(!Imported[_0x4beec2(0xc2d)])return;if(!BattleManager[_0x4beec2(0x841)]())return;VisuMZ['ConvertParams'](_0x39aa53,_0x39aa53);const _0x4dfe8c=VisuMZ[_0x4beec2(0xdd4)](_0x39aa53[_0x4beec2(0xa3a)]),_0x1fe304=_0x39aa53[_0x4beec2(0xdaf)];for(const _0x20857d of _0x4dfe8c){if(!_0x20857d)continue;_0x20857d[_0x4beec2(0x918)](_0x1fe304);}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x570),_0x43d6c3=>{const _0xeb271=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xeb271(0x15e)](_0x43d6c3,_0x43d6c3);const _0x1813a9=$gameTemp[_0xeb271(0xc21)](),_0x571ece=BattleManager[_0xeb271(0x577)],_0x8d6091=BattleManager[_0xeb271(0xa77)];if(!_0x1813a9||!_0x571ece||!_0x8d6091)return;if(!_0x571ece[_0xeb271(0x2df)]())return;const _0x442f5d=VisuMZ['CreateActionSequenceTargets'](_0x43d6c3['Targets']);for(const _0xd20429 of _0x442f5d){if(!_0xd20429)continue;if(_0x43d6c3['ForceDeath']){if(_0xeb271(0x7d3)===_0xeb271(0xaaf)){if(!_0x331082[_0xeb271(0xd86)])return;const _0x38a993=_0x3e4aaa[_0xeb271(0xd04)][_0xeb271(0x78d)];if(!_0x38a993)return;if(_0x18e6e7[_0xeb271(0xdae)][_0xeb271(0x88f)]<=1.04){_0x52a925(_0xeb271(0x299)),_0x3ab416[_0xeb271(0x4f1)]();return;}_0x3cf614['ConvertParams'](_0x281dfa,_0x1f1d8c);const _0x215635=_0x17f0a7['getLastPluginCommandInterpreter'](),_0x2e7779=_0x405dfb[_0xeb271(0xde7)](0.01,_0x49dd44[_0xeb271(0x9f9)]);_0x296ef9[_0xeb271(0x496)](_0x2e7779,_0x215635);}else _0xd20429[_0xeb271(0x831)](),_0xd20429[_0xeb271(0x6a9)](_0xd20429[_0xeb271(0x91e)]());}_0xd20429[_0xeb271(0x72f)]()&&_0xd20429[_0xeb271(0x932)]();}_0x1813a9[_0xeb271(0x1f9)](_0xeb271(0xa96));}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x3ec),_0x5afe9f=>{const _0x263541=_0x57e85a;if(!SceneManager[_0x263541(0x4b2)]())return;if(!Imported[_0x263541(0x71b)])return;if(!BattleManager['isCTB']())return;VisuMZ['ConvertParams'](_0x5afe9f,_0x5afe9f);const _0xb5bb7f=VisuMZ[_0x263541(0xdd4)](_0x5afe9f[_0x263541(0xa3a)]),_0x3ce855=_0x5afe9f[_0x263541(0x906)];for(const _0x31a0df of _0xb5bb7f){if(!_0x31a0df)continue;_0x31a0df[_0x263541(0xa68)](_0x3ce855);}}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0xbb9),_0x1969c7=>{const _0x2555b0=_0x57e85a;if(!SceneManager[_0x2555b0(0x4b2)]())return;if(!Imported[_0x2555b0(0x71b)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x2555b0(0x15e)](_0x1969c7,_0x1969c7);const _0x396f82=VisuMZ[_0x2555b0(0xdd4)](_0x1969c7[_0x2555b0(0xa3a)]),_0x40964b=_0x1969c7['ChargeRate'],_0x3bff84=_0x1969c7[_0x2555b0(0xcc6)];for(const _0x448d3e of _0x396f82){if(_0x2555b0(0x4e9)!==_0x2555b0(0x4e9))_0x3c2538+=_0x1d4338;else{if(!_0x448d3e)continue;if(_0x448d3e['_tpbState']===_0x2555b0(0xb64))_0x448d3e[_0x2555b0(0xadb)](_0x40964b);else _0x448d3e['_tpbState']===_0x2555b0(0x852)&&_0x448d3e[_0x2555b0(0x391)](_0x3bff84);}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xd73),_0x2e0b38=>{const _0x53e743=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x53e743(0x15e)](_0x2e0b38,_0x2e0b38);const _0x366a0c=BattleManager[_0x53e743(0x577)];if(!_0x366a0c)return;let _0x209ae2=_0x2e0b38[_0x53e743(0xb96)];_0x366a0c['setCustomDamageFormula'](_0x209ae2);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x815),_0x4e6b11=>{const _0x4c35cf=_0x57e85a;if(!SceneManager[_0x4c35cf(0x4b2)]())return;VisuMZ[_0x4c35cf(0x15e)](_0x4e6b11,_0x4e6b11);const _0x1bd220=VisuMZ[_0x4c35cf(0xdd4)](_0x4e6b11[_0x4c35cf(0xa3a)]);for(const _0x47a872 of _0x1bd220){if(_0x4c35cf(0x94b)==='ybCQJ')this['addSkillCommands']();else{if(!_0x47a872)continue;if(_0x47a872[_0x4c35cf(0x59d)]())_0x47a872[_0x4c35cf(0x742)]();}}}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x9d5),_0x34038b=>{const _0x45a661=_0x57e85a;if(!SceneManager[_0x45a661(0x4b2)]())return;VisuMZ['ConvertParams'](_0x34038b,_0x34038b);const _0x45ee7a=$gameTemp[_0x45a661(0xc21)](),_0x39be17=BattleManager[_0x45a661(0xa77)],_0x3e0de5=_0x34038b[_0x45a661(0xa84)];if(!_0x45ee7a)return;if(!_0x39be17)return;if(_0x39be17&&_0x39be17[_0x45a661(0xd6d)]()&&_0x3e0de5[_0x45a661(0x307)]()['trim']()!==_0x45a661(0x833)){if('NhUPd'!=='GWBhT')_0x45ee7a['command119']([_0x3e0de5]);else{if(!this[_0x45a661(0x7a9)])return;this[_0x45a661(0x7a9)]['y']=this['_baseY']-this['y']-0x2;}}}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x380),_0xa8e31a=>{const _0x491c5b=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x491c5b(0x15e)](_0xa8e31a,_0xa8e31a);const _0x30ed7f=$gameTemp[_0x491c5b(0xc21)](),_0x4ae585=BattleManager[_0x491c5b(0x9e4)];if(!_0x30ed7f)return;const _0x24683f=VisuMZ[_0x491c5b(0xdd4)](_0xa8e31a[_0x491c5b(0xd94)]),_0xdf54ca=VisuMZ[_0x491c5b(0xdd4)](_0xa8e31a[_0x491c5b(0xa3a)]);for(const _0x1d7a10 of _0x24683f){if('nFqnq'!=='qPkoU')for(const _0x4d3323 of _0xdf54ca){if('NzsbI'===_0x491c5b(0x5f6)){if(!_0x4d3323)continue;const _0x42b86a=$dataSkills[_0x1d7a10[_0x491c5b(0x704)]()];_0x4ae585['push'](_0x491c5b(0xbf5),_0x1d7a10,_0x4d3323,_0x42b86a);}else this['startMotion'](_0x491c5b(0xb49));}else{const _0x5dfdb8=_0x2fd71f[_0x491c5b(0x313)](_0x32e330['x'],_0x3a6098['y']);if(this[_0x491c5b(0x31e)]&&this[_0x491c5b(0x19e)][_0x5dfdb8])return this[_0x491c5b(0x19e)][_0x5dfdb8];}}_0x30ed7f[_0x491c5b(0x1f9)](_0x491c5b(0x84e));}),PluginManager['registerCommand'](pluginData['name'],_0x57e85a(0xb27),_0x3f032b=>{const _0x2d1e4d=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3f032b,_0x3f032b);const _0x3e2bce=$gameTemp['getLastPluginCommandInterpreter'](),_0x442397=BattleManager[_0x2d1e4d(0x9e4)];if(!_0x3e2bce)return;const _0x28ecc2=VisuMZ[_0x2d1e4d(0xdd4)](_0x3f032b[_0x2d1e4d(0xd94)]),_0x3a5764=VisuMZ['CreateActionSequenceTargets'](_0x3f032b[_0x2d1e4d(0xa3a)]);for(const _0x3bc0bf of _0x28ecc2){if(_0x2d1e4d(0x917)===_0x2d1e4d(0x9d4))return this[_0x2d1e4d(0x9f2)]=this[_0x2d1e4d(0x9f2)]||[],this['_battleBalloonQueue'][_0x2d1e4d(0x4d6)]();else for(const _0x435727 of _0x3a5764){if(_0x2d1e4d(0x3eb)==='EOiip'){this[_0x2d1e4d(0xa1e)][_0x2d1e4d(0x632)]=_0x19b5aa['_emptyBitmap'],this[_0x2d1e4d(0xa1e)][_0x2d1e4d(0xc85)]='';return;}else{if(!_0x435727)continue;const _0x479217=$dataSkills[_0x3bc0bf[_0x2d1e4d(0xc48)]()];_0x442397[_0x2d1e4d(0x5fa)](_0x2d1e4d(0xbf5),_0x3bc0bf,_0x435727,_0x479217);}}}_0x3e2bce[_0x2d1e4d(0x1f9)](_0x2d1e4d(0x84e));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x9a5),_0x4294b2=>{const _0x259b42=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x259b42(0x15e)](_0x4294b2,_0x4294b2);const _0x5b8e67=$gameTemp[_0x259b42(0xc21)](),_0x382f5c=BattleManager[_0x259b42(0x9e4)],_0x394ae5=Number(_0x4294b2[_0x259b42(0x408)]||0x1),_0x333c62=$dataItems[_0x394ae5];if(!_0x5b8e67)return;if(!_0x333c62)return;const _0x45f25d=VisuMZ[_0x259b42(0xdd4)](_0x4294b2[_0x259b42(0xd94)]),_0x4e8669=VisuMZ['CreateActionSequenceTargets'](_0x4294b2[_0x259b42(0xa3a)]);for(const _0x3e9957 of _0x45f25d){for(const _0x14f096 of _0x4e8669){if(!_0x14f096)continue;_0x382f5c['push'](_0x259b42(0xbf5),_0x3e9957,_0x14f096,_0x333c62);}}_0x5b8e67[_0x259b42(0x1f9)](_0x259b42(0x84e));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x617),_0x1f91dc=>{const _0xdd5ea6=_0x57e85a;if(!SceneManager[_0xdd5ea6(0x4b2)]())return;VisuMZ[_0xdd5ea6(0x15e)](_0x1f91dc,_0x1f91dc);let _0x47e948=Number(_0x1f91dc[_0xdd5ea6(0x888)]||0x0);if(_0x47e948<=0x0){const _0x17b83d=BattleManager[_0xdd5ea6(0x577)];if(_0x17b83d&&_0x17b83d['isSkill']())_0xdd5ea6(0xbf6)!=='Eaaxg'?(_0x108ae1[_0xdd5ea6(0x16f)]['initMembers'][_0xdd5ea6(0xa23)](this),this['opacity']=0x0,this[_0xdd5ea6(0xa7d)]=null,this['anchor']['x']=0.5,this[_0xdd5ea6(0x70e)]['y']=0x0):_0x47e948=_0x17b83d[_0xdd5ea6(0x2df)]()['id'];else return;}const _0x4ebae0=$dataSkills[_0x47e948];if(!_0x4ebae0)return;const _0x44a752=VisuMZ['CreateActionSequenceTargets'](_0x1f91dc[_0xdd5ea6(0xd94)]);for(const _0x25d83c of _0x44a752){if(_0xdd5ea6(0xc5e)===_0xdd5ea6(0x51b)){if(this[_0xdd5ea6(0x3f1)]()[_0xdd5ea6(0x40f)][_0xdd5ea6(0x392)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return _0x1ef75c[_0xdd5ea6(0x16f)][_0xdd5ea6(0x652)][_0xdd5ea6(0xa23)](this);}else _0x25d83c['paySkillCost'](_0x4ebae0);}}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0xb18),_0x14db9f=>{const _0x1cf297=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1cf297(0x15e)](_0x14db9f,_0x14db9f);const _0x5a82f3=$gameTemp['getLastPluginCommandInterpreter'](),_0x2f1f8a=BattleManager[_0x1cf297(0x9e4)],_0x38be12=Number(_0x14db9f[_0x1cf297(0x888)]||0x1),_0x2074fc=$dataSkills[_0x38be12];if(!_0x5a82f3)return;if(!_0x2074fc)return;const _0x587c50=VisuMZ[_0x1cf297(0xdd4)](_0x14db9f[_0x1cf297(0xd94)]),_0x12d93e=VisuMZ[_0x1cf297(0xdd4)](_0x14db9f[_0x1cf297(0xa3a)]);for(const _0x3825f0 of _0x587c50){if(_0x1cf297(0x874)!==_0x1cf297(0x39f))for(const _0x2f6e05 of _0x12d93e){if(!_0x2f6e05)continue;_0x2f1f8a[_0x1cf297(0x5fa)](_0x1cf297(0xbf5),_0x3825f0,_0x2f6e05,_0x2074fc);}else this[_0x1cf297(0x54f)]=null;}_0x5a82f3[_0x1cf297(0x1f9)](_0x1cf297(0x84e));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Mechanics_EnemyEscape',_0x2c8fd8=>{const _0x3e614e=_0x57e85a;if(!SceneManager[_0x3e614e(0x4b2)]())return;VisuMZ[_0x3e614e(0x15e)](_0x2c8fd8,_0x2c8fd8);const _0x48d7ba=VisuMZ['CreateActionSequenceTargets'](_0x2c8fd8[_0x3e614e(0xa3a)]);for(const _0x312ae6 of _0x48d7ba){if(_0x3e614e(0x32d)!=='qBnNW'){const _0x15e763=_0x5e3d06[_0x3e614e(0xacb)],_0x48b767=_0x54f513['x'],_0x2c7b66=_0x27e9b3['y'],_0x46d48b=new _0x5e6d1a(_0x15e763,_0x48b767,_0x2c7b66);_0x419e3e[_0x3e614e(0x543)]&&_0x46d48b[_0x3e614e(0x639)](),this['_enemies'][_0x3e614e(0x5fa)](_0x46d48b);}else{if(!_0x312ae6)continue;if(!_0x312ae6[_0x3e614e(0xd89)]())continue;_0x312ae6['escape']();}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x969),_0x14f481=>{const _0x40bec9=_0x57e85a;if(!SceneManager[_0x40bec9(0x4b2)]())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager[_0x40bec9(0x38e)]())return;VisuMZ[_0x40bec9(0x15e)](_0x14f481,_0x14f481);const _0x247b66=_0x14f481[_0x40bec9(0x366)];if(BattleManager[_0x40bec9(0xa77)]){if('mjRbn'===_0x40bec9(0x3f7))BattleManager['_subject'][_0x40bec9(0xafb)]()[_0x40bec9(0xba7)](_0x247b66);else for(const _0x5cf8d6 of _0x1435d7){const _0xea62c5=_0x5bfa2a[0x0][_0x40bec9(0x554)](_0x5cf8d6[0x0]),_0x55bf04=_0x2e5528[0x1][_0x40bec9(0x554)](_0x5cf8d6[0x1]),_0xfa0725=new _0x28495a(_0x9bcff1[_0x40bec9(0x554)](_0x55bf04),'i');_0x38a311[_0xea62c5]=_0xfa0725;}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x27b),_0x343eb9=>{const _0x431b9c=_0x57e85a;if(!SceneManager[_0x431b9c(0x4b2)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager['isFTB']())return;VisuMZ[_0x431b9c(0x15e)](_0x343eb9,_0x343eb9);const _0x2c3d26=_0x343eb9[_0x431b9c(0x366)];BattleManager['_subject']&&BattleManager[_0x431b9c(0xa77)][_0x431b9c(0xafb)]()[_0x431b9c(0x540)](_0x2c3d26);}),PluginManager['registerCommand'](pluginData['name'],_0x57e85a(0xacf),_0x348d9b=>{const _0x4bc74e=_0x57e85a;if(!SceneManager[_0x4bc74e(0x4b2)]())return;VisuMZ[_0x4bc74e(0x15e)](_0x348d9b,_0x348d9b);const _0x3fa5ad=VisuMZ['CreateActionSequenceTargets'](_0x348d9b[_0x4bc74e(0xa3a)]),_0x4d17f3=_0x348d9b[_0x4bc74e(0x5e4)],_0xb10401=_0x348d9b[_0x4bc74e(0xb60)],_0x3cc85a=_0x348d9b[_0x4bc74e(0x3ba)],_0x328823=_0x348d9b[_0x4bc74e(0x44c)],_0x5425d6=_0x348d9b['TP_Rate'],_0x1dd7e0=_0x348d9b[_0x4bc74e(0xdc1)],_0x212aef=_0x348d9b['ShowPopup'];for(const _0x52a3ea of _0x3fa5ad){if(_0x4bc74e(0x166)!==_0x4bc74e(0x8e7)){if(!_0x52a3ea)continue;const _0x2a5b30=_0x52a3ea[_0x4bc74e(0x2e0)](),_0x1355fd=Math[_0x4bc74e(0x92a)](_0x4d17f3*_0x52a3ea['mhp']+_0xb10401),_0x543e0f=Math[_0x4bc74e(0x92a)](_0x3cc85a*_0x52a3ea[_0x4bc74e(0xcf5)]+_0x328823),_0x55fe49=Math[_0x4bc74e(0x92a)](_0x5425d6*_0x52a3ea['maxTp']()+_0x1dd7e0);if(_0x1355fd!==0x0)_0x52a3ea[_0x4bc74e(0x602)](_0x1355fd);if(_0x543e0f!==0x0)_0x52a3ea[_0x4bc74e(0x65e)](_0x543e0f);if(_0x55fe49!==0x0)_0x52a3ea['gainTp'](_0x55fe49);if(_0x212aef)_0x52a3ea[_0x4bc74e(0x742)]();_0x2a5b30&&_0x52a3ea[_0x4bc74e(0xd6d)]()&&_0x52a3ea[_0x4bc74e(0x932)]();}else return _0x2bd8ef(_0x36188e['$1']);}}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x88e),_0x594476=>{const _0xb11243=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xb11243(0x15e)](_0x594476,_0x594476);const _0x313621=VisuMZ['CreateActionSequenceTargets'](_0x594476[_0xb11243(0xa3a)]);for(const _0x266569 of _0x313621){if(!_0x266569)continue;_0x266569[_0xb11243(0x861)](_0x594476[_0xb11243(0x5fb)]);}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x9ba),_0x5ddcae=>{const _0x372a94=_0x57e85a;if(!SceneManager[_0x372a94(0x4b2)]())return;VisuMZ[_0x372a94(0x15e)](_0x5ddcae,_0x5ddcae);const _0x14e4aa=BattleManager[_0x372a94(0x577)],_0x5ade0d={'criticalHitRate':_0x5ddcae[_0x372a94(0xa64)],'criticalHitFlat':_0x5ddcae[_0x372a94(0x3ff)],'criticalDmgRate':_0x5ddcae[_0x372a94(0xb71)],'criticalDmgFlat':_0x5ddcae[_0x372a94(0x934)],'damageRate':_0x5ddcae[_0x372a94(0x7ef)],'damageFlat':_0x5ddcae[_0x372a94(0x3b2)],'hitRate':_0x5ddcae[_0x372a94(0xaa9)],'hitFlat':_0x5ddcae[_0x372a94(0x6bb)]};_0x14e4aa[_0x372a94(0x4e6)]=_0x5ade0d;}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xb0a),_0x59e412=>{const _0x50eee4=_0x57e85a;if(!SceneManager[_0x50eee4(0x4b2)]())return;VisuMZ['ConvertParams'](_0x59e412,_0x59e412);const _0x2cf4d3=_0x59e412['CommonEventID'];SceneManager[_0x50eee4(0xd04)][_0x50eee4(0xc2b)](_0x2cf4d3);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x315),_0x10b738=>{const _0x4f3db5=_0x57e85a;if(!SceneManager[_0x4f3db5(0x4b2)]())return;if(!Imported[_0x4f3db5(0x5d2)])return;if(!BattleManager[_0x4f3db5(0xaf1)]())return;VisuMZ[_0x4f3db5(0x15e)](_0x10b738,_0x10b738);const _0x5183b6=VisuMZ[_0x4f3db5(0xdd4)](_0x10b738[_0x4f3db5(0xa3a)]);for(const _0x513f4e of _0x5183b6){if(_0x4f3db5(0x9e9)!==_0x4f3db5(0x9e9))_0x322260[_0x4f3db5(0x1b4)]['ActSeq_Grid_AnimationIDAtNode'](_0x4ba9d9);else{if(!_0x513f4e)continue;let _0x228845=_0x10b738['CurrentTurn'],_0x5e08b8=_0x10b738[_0x4f3db5(0xb48)],_0x3d0019=_0x10b738[_0x4f3db5(0x35a)];BattleManager[_0x4f3db5(0xd93)][_0x4f3db5(0x3af)](_0x513f4e)?_0x228845+=_0x3d0019:_0x5e08b8+=_0x3d0019,BattleManager[_0x4f3db5(0x379)](_0x513f4e,-_0x228845,![]),BattleManager[_0x4f3db5(0x379)](_0x513f4e,-_0x5e08b8,!![]);}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Mechanics_PtbAlterCost',_0x195115=>{const _0x6eb294=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x6eb294(0xe05)])return;if(!BattleManager[_0x6eb294(0x682)]())return;VisuMZ[_0x6eb294(0x15e)](_0x195115,_0x195115);const _0x51800b=BattleManager[_0x6eb294(0xa77)][_0x6eb294(0xafb)](),_0x30e084=_0x195115[_0x6eb294(0xd13)],_0x4f781a=_0x195115[_0x6eb294(0x3e6)]||'unchanged',_0x2e6fd6=_0x195115[_0x6eb294(0x4f2)]||_0x6eb294(0xaaa),_0x4784d9=_0x195115[_0x6eb294(0x562)]||0x0,_0x9aa096=_0x195115['alterPriority']||0x0;(_0x51800b['canAlterActionCostPTB']()||_0x30e084)&&(_0x6eb294(0xb59)!==_0x6eb294(0x9b7)?(_0x30e084&&(_0x51800b['_ptbActionCost']=_0x51800b[_0x6eb294(0x727)]||{},_0x51800b[_0x6eb294(0x727)][_0x6eb294(0x952)]=0x0),_0x51800b[_0x6eb294(0x342)](_0x4f781a,_0x2e6fd6,_0x4784d9,_0x9aa096)):this[_0x6eb294(0x903)]());}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xd82),_0xc0359d=>{const _0x348e34=_0x57e85a;if(!SceneManager[_0x348e34(0x4b2)]())return;if(!Imported[_0x348e34(0xe05)])return;if(!BattleManager[_0x348e34(0x682)]())return;VisuMZ['ConvertParams'](_0xc0359d,_0xc0359d);const _0x40d7d0=BattleManager[_0x348e34(0xa77)]['friendsUnit']();let _0x1ad953=Math['max'](_0xc0359d[_0x348e34(0x175)],0x0),_0x306e53=_0x40d7d0[_0x348e34(0xdeb)](),_0x269ff3=_0x40d7d0[_0x348e34(0x6c4)]();while(_0x1ad953--){if(_0x306e53<=0x0&&_0x269ff3<=0x0){if(_0x348e34(0x5bb)!==_0x348e34(0x5bb)){if(!_0x485882['isSideView']())return;const _0x28174e=this[_0x348e34(0x3ab)]();if(!_0x28174e)return;if(_0x1178a3)this[_0x348e34(0xd3f)](_0x20c5fc+_0x28174e[_0x348e34(0x4aa)],_0x39f831+_0x28174e['_baseY'],![]);_0x558cf0+=_0x28174e[_0x348e34(0x4aa)]-_0x28174e[_0x348e34(0xbac)],_0x3e326b+=_0x28174e[_0x348e34(0x20d)]-_0x28174e[_0x348e34(0x8b6)],_0x28174e['startMove'](_0x514c72,_0x1d6015,_0x5f2aeb);if(_0x24ff40[_0x348e34(0x376)])_0x28174e['setMoveEasingType'](_0x46ea32||_0x348e34(0x23a));}else break;}else{if(_0x306e53>0x0){if(_0x348e34(0x422)==='ELzVB')_0x306e53--,_0x269ff3++;else{if(!_0x31a117[_0x348e34(0x4b2)]())return;const _0x3e4299=_0x22a3b7[_0x348e34(0xc21)](),_0x1500d4=_0x204d33[_0x348e34(0x9e4)];_0x1500d4[_0x348e34(0x2d0)](),_0x3e4299['setWaitMode']('battlelog');}}else{if('aJJRc'!=='aJJRc')return _0x386581[_0x348e34(0xd05)]()[_0x348e34(0x5cb)]();else _0x269ff3--;}}}_0x40d7d0[_0x348e34(0xc07)](_0x306e53),_0x40d7d0['setHalfActionsPTB'](_0x269ff3);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Mechanics_PtbFullHalfAction',_0x5e24de=>{const _0x18c5a1=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x18c5a1(0xe05)])return;if(!BattleManager[_0x18c5a1(0x682)]())return;VisuMZ['ConvertParams'](_0x5e24de,_0x5e24de);const _0x1d688c=BattleManager[_0x18c5a1(0xa77)][_0x18c5a1(0xafb)]();let _0x16058d=_0x5e24de[_0x18c5a1(0x1a3)],_0x1c204d=_0x5e24de['HalfActions'];_0x1d688c[_0x18c5a1(0x5ba)](_0x16058d),_0x1d688c[_0x18c5a1(0x957)](_0x1c204d);}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],'ActSeq_Mechanics_RemoveBuffDebuff',_0x24e393=>{const _0x281744=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x281744(0x15e)](_0x24e393,_0x24e393);const _0x1f9841=['MAXHP',_0x281744(0x88b),_0x281744(0xd30),_0x281744(0x571),'MAT','MDF',_0x281744(0xb7d),_0x281744(0x89a)],_0x166e23=_0x24e393['Buffs'],_0x4a0a7d=_0x24e393[_0x281744(0x97d)],_0x36582a=VisuMZ[_0x281744(0xdd4)](_0x24e393[_0x281744(0xa3a)]);for(const _0x32841f of _0x36582a){if(_0x281744(0xcd0)!==_0x281744(0xa2e)){if(!_0x32841f)continue;for(const _0x146187 of _0x166e23){const _0x42a273=_0x1f9841['indexOf'](_0x146187[_0x281744(0x307)]()[_0x281744(0xdf5)]());_0x42a273>=0x0&&_0x42a273<=0x7&&_0x32841f[_0x281744(0x7b0)](_0x42a273)&&_0x32841f[_0x281744(0xa92)](_0x42a273);}for(const _0x277e94 of _0x4a0a7d){const _0xa6ef1f=_0x1f9841['indexOf'](_0x277e94[_0x281744(0x307)]()[_0x281744(0xdf5)]());if(_0xa6ef1f>=0x0&&_0xa6ef1f<=0x7&&_0x32841f['isDebuffAffected'](_0xa6ef1f)){if(_0x281744(0xaf7)!==_0x281744(0xc67))_0x32841f[_0x281744(0xa92)](_0xa6ef1f);else{const _0x33275f=_0x5c490c[_0x281744(0x804)],_0x33373f='autoBattleAtStart';this['addCommand'](_0x33275f,_0x33373f);}}}}else{const _0x16a104=this['faceRect'](_0x12cfbd);this[_0x281744(0x6f4)](_0x455f86,_0x16a104['x'],_0x16a104['y'],_0x16a104[_0x281744(0x8b9)],_0x16a104[_0x281744(0x54b)]);}}}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x4d5),_0x446e8a=>{const _0x184ac0=_0x57e85a;if(!SceneManager[_0x184ac0(0x4b2)]())return;VisuMZ[_0x184ac0(0x15e)](_0x446e8a,_0x446e8a);const _0x247d54=_0x446e8a['States'],_0x2ebdea=VisuMZ['CreateActionSequenceTargets'](_0x446e8a['Targets']);for(const _0x32e098 of _0x2ebdea){if(_0x184ac0(0xb1e)!=='wErpP'){if(!_0x32e098)continue;for(const _0x356a47 of _0x247d54){_0x32e098[_0x184ac0(0xe00)](_0x356a47);}}else this[_0x184ac0(0x84f)]();}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x460),_0x56ccf3=>{const _0x445b64=_0x57e85a;if(!SceneManager[_0x445b64(0x4b2)]())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ[_0x445b64(0x15e)](_0x56ccf3,_0x56ccf3);const _0x26c57d=VisuMZ[_0x445b64(0xdd4)](_0x56ccf3[_0x445b64(0xa3a)]),_0x292a1c=Number(_0x56ccf3[_0x445b64(0x5ac)]),_0x5ef7a3=Number(_0x56ccf3['Turns']),_0x2b190d=_0x56ccf3[_0x445b64(0x79b)];for(const _0x1cc9ae of _0x26c57d){if(!_0x1cc9ae)continue;if(_0x2b190d&&!_0x1cc9ae['isStateAffected'](_0x292a1c))_0x1cc9ae[_0x445b64(0x6a9)](_0x292a1c),_0x1cc9ae[_0x445b64(0x4d3)](_0x292a1c,_0x5ef7a3);else{if('LDbqo'===_0x445b64(0x534)){if(!_0xa495bc[_0x445b64(0x4b2)]())return;if(!_0x4bd58f['VisuMZ_3_ActSeqCamera'])return;const _0x1ea490=_0x40429b[_0x445b64(0xc21)]();if(!_0x1ea490)return;_0x1ea490[_0x445b64(0x1f9)](_0x445b64(0x723));}else _0x1cc9ae['addStateTurns'](_0x292a1c,_0x5ef7a3);}}}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],'ActSeq_Mechanics_StateTurnsChangeTo',_0x202790=>{const _0x65d342=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x65d342(0xbaa)])return;VisuMZ[_0x65d342(0x15e)](_0x202790,_0x202790);const _0x2dca56=VisuMZ[_0x65d342(0xdd4)](_0x202790[_0x65d342(0xa3a)]),_0x4652eb=Number(_0x202790[_0x65d342(0x5ac)]),_0x519d6e=Math[_0x65d342(0xde7)](Number(_0x202790[_0x65d342(0xcc2)]),0x0),_0xb5e2a2=_0x202790[_0x65d342(0x79b)];for(const _0x28dd13 of _0x2dca56){if(_0x65d342(0xd9c)!==_0x65d342(0xc49)){if(!_0x28dd13)continue;_0xb5e2a2&&!_0x28dd13['isStateAffected'](_0x4652eb)&&_0x28dd13['addState'](_0x4652eb),_0x28dd13[_0x65d342(0x4d3)](_0x4652eb,_0x519d6e);}else this['padding']=0x8;}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xae5),_0x6af764=>{const _0x2533c6=_0x57e85a;if(!SceneManager[_0x2533c6(0x4b2)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x2533c6(0x475)]())return;VisuMZ[_0x2533c6(0x15e)](_0x6af764,_0x6af764);const _0x1d04d7=_0x6af764[_0x2533c6(0xcee)],_0x64fb9c=VisuMZ[_0x2533c6(0xdd4)](_0x6af764['Targets']),_0x45aea9=_0x6af764[_0x2533c6(0x820)],_0x50ed90=_0x6af764['Exploiter'],_0x1ca488=_0x6af764[_0x2533c6(0x2ca)],_0x360c73=BattleManager[_0x2533c6(0x577)];if(_0x1d04d7){if(_0x2533c6(0x651)===_0x2533c6(0x651))for(const _0x513458 of _0x64fb9c){if(!_0x513458)continue;if(_0x513458===user)continue;if(_0x45aea9)_0x513458['setSTBExploited'](![]);_0x513458['becomeSTBExploited'](BattleManager[_0x2533c6(0xa77)],_0x360c73);}else this[_0x2533c6(0x831)]();}if(_0x50ed90&&BattleManager[_0x2533c6(0xa77)]){if(_0x2533c6(0x533)!==_0x2533c6(0xd78)){if(_0x1ca488)BattleManager[_0x2533c6(0xa77)][_0x2533c6(0xd9f)](![]);const _0x575c5d=_0x64fb9c[0x0];BattleManager[_0x2533c6(0xb0e)](_0x575c5d,_0x360c73);}else return this[_0x2533c6(0xb9b)]&&this[_0x2533c6(0xb9b)][_0x2533c6(0x87a)]();}}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x476),_0x206562=>{const _0x4ddd6d=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x4ddd6d(0x475)]())return;VisuMZ[_0x4ddd6d(0x15e)](_0x206562,_0x206562);const _0x1f60b3=_0x206562[_0x4ddd6d(0x666)];BattleManager[_0x4ddd6d(0xa77)]&&BattleManager[_0x4ddd6d(0xa77)][_0x4ddd6d(0xb9c)](_0x1f60b3);}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xd47),_0x3ec147=>{const _0x9705fe=_0x57e85a;if(!SceneManager[_0x9705fe(0x4b2)]())return;if(!Imported[_0x9705fe(0x465)])return;if(!BattleManager[_0x9705fe(0x475)]())return;VisuMZ[_0x9705fe(0x15e)](_0x3ec147,_0x3ec147);let _0xfebccc=_0x3ec147[_0x9705fe(0x666)];if(BattleManager['_subject']){if(_0x9705fe(0xd80)==='rlgHV'){BattleManager['_subject'][_0x9705fe(0x56f)]=BattleManager['_subject'][_0x9705fe(0x56f)]||[];while(_0xfebccc--){if(BattleManager[_0x9705fe(0xa77)][_0x9705fe(0x56f)][_0x9705fe(0xd36)]<=0x0)break;BattleManager['_subject'][_0x9705fe(0x56f)]['shift']();}}else{if(_0x244dbb[_0x9705fe(0xb08)]&&_0x5154c6[_0x9705fe(0xb08)]){if(_0x3a2c9e[_0x9705fe(0xb08)][_0x9705fe(0x7d1)]()&&_0x1cb4f6[_0x9705fe(0xb08)][_0x9705fe(0xd89)]())return 0x1;else{if(_0x501a46['_battler'][_0x9705fe(0x7d1)]()&&_0x2f6c12[_0x9705fe(0xb08)][_0x9705fe(0xd89)]())return-0x1;}}}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Mechanics_SwapWeapon',_0x31589f=>{const _0x1490ff=_0x57e85a;if(!SceneManager[_0x1490ff(0x4b2)]())return;if(!Imported[_0x1490ff(0x8b7)])return;VisuMZ[_0x1490ff(0x15e)](_0x31589f,_0x31589f);const _0x1fbeb7=VisuMZ[_0x1490ff(0xdd4)](_0x31589f[_0x1490ff(0xa3a)]),_0x3a9f48=_0x31589f[_0x1490ff(0x8f6)];for(const _0x328892 of _0x1fbeb7){if(_0x1490ff(0x616)==='clcpE'){if(this[_0x1490ff(0xc27)]())return _0x4a0da2;const _0x593151=this[_0x1490ff(0xbe8)](),_0x3703e8=_0x23483d;let _0x5ea433=[],_0x6f12b5=[];_0x5ea433[_0x1490ff(0x5fa)](this[_0x1490ff(0x819)][_0x1490ff(0xd23)],this[_0x1490ff(0x819)][_0x1490ff(0x486)]),_0x6f12b5[_0x1490ff(0x5fa)](this[_0x1490ff(0x819)]['arPenRate'],this[_0x1490ff(0x819)][_0x1490ff(0x949)]);const _0x204976=this[_0x1490ff(0xd06)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x225ef7=this[_0x1490ff(0xd06)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x2f4777=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x2a0e2d=this[_0x1490ff(0xd06)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x5ea433=_0x5ea433[_0x1490ff(0x60f)](_0x3703e8[_0x1490ff(0x7c9)]()[_0x1490ff(0x260)](_0xfcda99=>_0xfcda99&&_0xfcda99[_0x1490ff(0x40f)][_0x1490ff(0x392)](_0x204976)?_0x257e03(_0x32ea4c['$1']):0x0)),_0x6f12b5=_0x6f12b5['concat'](_0x3703e8[_0x1490ff(0x7c9)]()['map'](_0xb532f8=>_0xb532f8&&_0xb532f8['note']['match'](_0x225ef7)?_0x222761(_0x10c3f8['$1'])/0x64:0x0)),_0x5ea433=_0x5ea433['concat'](_0x593151[_0x1490ff(0x7c9)]()[_0x1490ff(0x260)](_0x19fef3=>_0x19fef3&&_0x19fef3[_0x1490ff(0x40f)][_0x1490ff(0x392)](_0x2f4777)?_0x51b4db(_0x5421c2['$1']):0x0)),_0x6f12b5=_0x6f12b5[_0x1490ff(0x60f)](_0x593151[_0x1490ff(0x7c9)]()[_0x1490ff(0x260)](_0x22cdbf=>_0x22cdbf&&_0x22cdbf[_0x1490ff(0x40f)][_0x1490ff(0x392)](_0x2a0e2d)?_0xbe9cac(_0x384b63['$1'])/0x64:0x0)),this[_0x1490ff(0x2df)]()[_0x1490ff(0x40f)][_0x1490ff(0x392)](_0x2f4777)&&_0x5ea433[_0x1490ff(0x5fa)](_0x863b47(_0x1ff415['$1'])),this[_0x1490ff(0x2df)]()['note'][_0x1490ff(0x392)](_0x2a0e2d)&&_0x6f12b5[_0x1490ff(0x5fa)](_0xca90a1(_0x52cc21['$1'])),_0x22e59f=_0x5ea433['reduce']((_0x503974,_0x1a71a6)=>_0x503974-_0x1a71a6,_0x1dcb38),_0x2e31e2>0x0&&(_0x5a91a7=_0x6f12b5[_0x1490ff(0xba1)]((_0x1df75f,_0x106eb0)=>_0x1df75f*(0x1-_0x106eb0),_0x51c8b1)),_0x4b7942;}else{if(!_0x328892)continue;if(!_0x328892['isActor']())continue;_0x328892[_0x1490ff(0x5d8)](_0x3a9f48);}}}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x69d),_0x2e2930=>{const _0xb3e488=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xb3e488(0x15e)](_0x2e2930,_0x2e2930);const _0x514584=VisuMZ[_0xb3e488(0xdd4)](_0x2e2930['Targets']),_0x2eefa4=_0x2e2930[_0xb3e488(0x942)],_0x3c1521={'textColor':ColorManager[_0xb3e488(0x3f4)](_0x2e2930['TextColor']),'flashColor':_0x2e2930[_0xb3e488(0xc6a)],'flashDuration':_0x2e2930[_0xb3e488(0x17e)]};for(const _0x1a2b7b of _0x514584){if(!_0x1a2b7b)continue;_0x1a2b7b[_0xb3e488(0xd41)](_0x2eefa4,_0x3c1521);}}),PluginManager['registerCommand'](pluginData['name'],_0x57e85a(0x568),_0x5f426d=>{const _0x176fab=_0x57e85a;if(!SceneManager[_0x176fab(0x4b2)]())return;VisuMZ['ConvertParams'](_0x5f426d,_0x5f426d);const _0x424754=VisuMZ[_0x176fab(0xdd4)](_0x5f426d[_0x176fab(0xa3a)]);let _0x238972=$gameVariables['value'](_0x5f426d['Variable']);Imported[_0x176fab(0x376)]&&_0x5f426d['DigitGrouping']&&(_0x238972=VisuMZ[_0x176fab(0x1ef)](_0x238972));const _0x5aff8b=String(_0x238972),_0x5c53ac={'textColor':ColorManager[_0x176fab(0x3f4)](_0x5f426d[_0x176fab(0x355)]),'flashColor':_0x5f426d[_0x176fab(0xc6a)],'flashDuration':_0x5f426d['FlashDuration']};for(const _0x30482b of _0x424754){if(_0x176fab(0xd17)===_0x176fab(0xd17)){if(!_0x30482b)continue;_0x30482b['setupTextPopup'](_0x5aff8b,_0x5c53ac);}else this[_0x176fab(0x193)]=!![],_0x12cd6d[_0x176fab(0xd96)]=_0x1ff3c7;}}),PluginManager['registerCommand'](pluginData['name'],_0x57e85a(0x78a),_0xfce8ca=>{const _0x33d146=_0x57e85a;if(!SceneManager[_0x33d146(0x4b2)]())return;const _0x355aa1=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x355aa1)return;_0x355aa1[_0x33d146(0x1f9)](_0x33d146(0xa96));}),PluginManager['registerCommand'](pluginData['name'],_0x57e85a(0x25b),_0x2eb8f6=>{const _0x26ace7=_0x57e85a;if(!SceneManager[_0x26ace7(0x4b2)]())return;VisuMZ['ConvertParams'](_0x2eb8f6,_0x2eb8f6);const _0x6a171f=VisuMZ[_0x26ace7(0xdd4)](_0x2eb8f6[_0x26ace7(0xa3a)]);for(const _0x5d5c44 of _0x6a171f){if('FfekA'===_0x26ace7(0x65f)){if(!_0x5d5c44)continue;_0x5d5c44[_0x26ace7(0x662)]();}else this[_0x26ace7(0x879)][_0x26ace7(0x621)]=_0x470dc7[_0x26ace7(0x16f)][_0x26ace7(0xbcd)][_0x26ace7(0xa23)](this);}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x659),_0x4d4ab4=>{const _0x217c2b=_0x57e85a;if(!SceneManager[_0x217c2b(0x4b2)]())return;VisuMZ[_0x217c2b(0x15e)](_0x4d4ab4,_0x4d4ab4);const _0x58b009=VisuMZ[_0x217c2b(0xdd4)](_0x4d4ab4['Targets']),_0x130deb=_0x4d4ab4[_0x217c2b(0x174)]['toLowerCase']()[_0x217c2b(0xdf5)]();let _0xba16fb=_0x4d4ab4['ShowWeapon'];const _0x2c12dc=_0x4d4ab4[_0x217c2b(0x900)];![_0x217c2b(0xa2b),_0x217c2b(0x416),_0x217c2b(0x22b),_0x217c2b(0x9c0)]['includes'](_0x130deb)&&(_0xba16fb=![]);for(const _0xe3186 of _0x58b009){if(_0x217c2b(0x94a)!==_0x217c2b(0xd9b)){if(!_0xe3186)continue;_0xe3186[_0x217c2b(0x7f0)](_0x130deb,_0xba16fb,_0x2c12dc);}else{if(this[_0x217c2b(0xbfd)])return this[_0x217c2b(0xbfd)];return this[_0x217c2b(0xbfd)]=_0xcdc9bb[_0x217c2b(0xd04)]['battleLayoutStyle'](),this[_0x217c2b(0xbfd)];}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xe29),_0x27883a=>{const _0x195ab8=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x195ab8(0x15e)](_0x27883a,_0x27883a);const _0x33a9c3=VisuMZ[_0x195ab8(0xdd4)](_0x27883a['Targets']),_0x3ffeae=_0x27883a['MotionType']['toLowerCase']()[_0x195ab8(0xdf5)](),_0x567842=_0x27883a[_0x195ab8(0xbd1)];for(const _0x1482e5 of _0x33a9c3){if(!_0x1482e5)continue;_0x1482e5[_0x195ab8(0x606)]=_0x567842;if(_0x3ffeae[_0x195ab8(0x392)](/ATTACK[ ](\d+)/i))_0x195ab8(0x65a)==='CJxfm'?_0x35fa5e=!_0x395785:_0x1482e5[_0x195ab8(0x747)](Number(RegExp['$1']));else _0x3ffeae===_0x195ab8(0xa2b)?_0x1482e5[_0x195ab8(0xafa)]():_0x1482e5['requestMotion'](_0x3ffeae);if(!_0x567842)_0x1482e5['startWeaponAnimation'](0x0);else{if(_0x567842&&[_0x195ab8(0x416),_0x195ab8(0x22b),_0x195ab8(0x4b5)]['includes'](_0x3ffeae)){}}_0x1482e5['_showWeapon']=undefined;}}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x3a1),_0x2e8fc0=>{const _0x2ef90f=_0x57e85a;if(!SceneManager[_0x2ef90f(0x4b2)]())return;VisuMZ[_0x2ef90f(0x15e)](_0x2e8fc0,_0x2e8fc0);const _0x6854fa=BattleManager['_action'];if(!_0x6854fa)return;if(!_0x6854fa['item']())return;const _0x2c16c6=VisuMZ[_0x2ef90f(0xdd4)](_0x2e8fc0[_0x2ef90f(0xa3a)]);for(const _0x48e745 of _0x2c16c6){if('ViwOW'==='gqKBX')return _0x19f33f(_0x57f5d3['$1'])*0.01;else{if(!_0x48e745)continue;_0x48e745['performAction'](_0x6854fa);}}}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xd62),_0x1f6325=>{const _0x338ece=_0x57e85a;if(!SceneManager[_0x338ece(0x4b2)]())return;VisuMZ[_0x338ece(0x15e)](_0x1f6325,_0x1f6325);const _0x4e2cde=VisuMZ['CreateActionSequenceTargets'](_0x1f6325['Targets']);for(const _0x455003 of _0x4e2cde){if(_0x338ece(0x681)!==_0x338ece(0x681))_0x5add63[_0x338ece(0x935)]();else{if(!_0x455003)continue;if(!_0x455003[_0x338ece(0x3ab)]())continue;_0x455003[_0x338ece(0x3ab)]()[_0x338ece(0x88c)]();}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x49f),_0x5692e9=>{const _0xb81f30=_0x57e85a;if(!SceneManager[_0xb81f30(0x4b2)]())return;VisuMZ[_0xb81f30(0x15e)](_0x5692e9,_0x5692e9);const _0x3b2ba0=$gameTemp[_0xb81f30(0xc21)](),_0x3d9d99=_0x5692e9[_0xb81f30(0x1e5)]*Sprite_Battler[_0xb81f30(0xda2)];_0x3b2ba0[_0xb81f30(0x674)](_0x3d9d99);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x407),_0x242c79=>{const _0x9eac6b=_0x57e85a;if(!SceneManager[_0x9eac6b(0x4b2)]())return;VisuMZ[_0x9eac6b(0x15e)](_0x242c79,_0x242c79);const _0x500c56=$gameTemp[_0x9eac6b(0xc21)](),_0x165eec=BattleManager[_0x9eac6b(0x577)];if(!_0x500c56||!_0x165eec)return;if(!_0x165eec[_0x9eac6b(0x2df)]())return;const _0x5438ee=VisuMZ[_0x9eac6b(0xdd4)](_0x242c79[_0x9eac6b(0xa3a)]);for(const _0x41849f of _0x5438ee){if('AEFek'!=='TJOkw'){if(!_0x41849f)continue;_0x41849f[_0x9eac6b(0x716)](_0x165eec);}else return this[_0x9eac6b(0x56d)]();}if(_0x242c79['WaitForMovement'])_0x500c56['setWaitMode'](_0x9eac6b(0x430));}),PluginManager['registerCommand'](pluginData['name'],_0x57e85a(0x1d0),_0x19a368=>{const _0x37d625=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x37d625(0xe14)]())return;VisuMZ[_0x37d625(0x15e)](_0x19a368,_0x19a368);const _0x4e1b1e=$gameTemp['getLastPluginCommandInterpreter'](),_0x22f93a=VisuMZ[_0x37d625(0xdd4)](_0x19a368[_0x37d625(0xa3a)]),_0x1742a8=_0x19a368[_0x37d625(0x7c6)],_0x70de50=_0x19a368[_0x37d625(0x531)],_0x1e19c2=_0x19a368['DistanceY'],_0x406819=_0x19a368[_0x37d625(0x692)],_0x5b5e2a=_0x19a368[_0x37d625(0xc3b)],_0x22f7ff=_0x19a368['EasingType'],_0x289e81=_0x19a368[_0x37d625(0x174)],_0x474e67=_0x19a368[_0x37d625(0x45a)];if(!_0x4e1b1e)return;for(const _0x242bb0 of _0x22f93a){if(!_0x242bb0)continue;let _0x335c41=_0x70de50,_0x5f4e79=_0x1e19c2;if(_0x1742a8[_0x37d625(0x392)](/horz/i))_0x335c41*=_0x242bb0[_0x37d625(0x7d1)]()?-0x1:0x1;if(_0x1742a8[_0x37d625(0x392)](/vert/i))_0x5f4e79*=_0x242bb0[_0x37d625(0x7d1)]()?-0x1:0x1;_0x242bb0[_0x37d625(0x383)](_0x335c41,_0x5f4e79,_0x406819,_0x5b5e2a,_0x22f7ff),_0x242bb0['requestMotion'](_0x289e81);}if(_0x474e67)_0x4e1b1e[_0x37d625(0x1f9)](_0x37d625(0x430));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xd3c),_0x339aac=>{const _0x4c881d=_0x57e85a;if(!SceneManager[_0x4c881d(0x4b2)]())return;if(!$gameSystem[_0x4c881d(0xe14)]())return;VisuMZ['ConvertParams'](_0x339aac,_0x339aac);const _0x14a912=$gameTemp['getLastPluginCommandInterpreter'](),_0x334b3c=VisuMZ[_0x4c881d(0xdd4)](_0x339aac['Targets']),_0x33988e=_0x339aac[_0x4c881d(0x9a3)],_0x51a041=_0x339aac['OffsetX'],_0xacf3a3=_0x339aac[_0x4c881d(0xa95)],_0x273f9b=_0x339aac[_0x4c881d(0x692)],_0x1f7a59=_0x339aac[_0x4c881d(0xc3b)],_0x585be6=_0x339aac[_0x4c881d(0xa42)],_0x31abb4=_0x339aac[_0x4c881d(0x174)],_0x5f2c1b=_0x339aac[_0x4c881d(0x45a)];if(!_0x14a912)return;for(const _0x369703 of _0x334b3c){if(!_0x369703)continue;const _0x36756b=_0x339aac[_0x4c881d(0x43a)](_0x369703)||{'x':0x0,'y':0x0};let _0x4df6e6=_0x36756b['x'],_0x743b51=_0x36756b['y'];if(_0x33988e[_0x4c881d(0x392)](/none/i))_0x4c881d(0x35f)==='pNINB'?_0x2ae330[_0x4c881d(0x734)][_0x4c881d(0xc10)][_0x4c881d(0xa23)](this,_0x2b3a08,_0x3170ee):(_0x4df6e6+=_0x51a041,_0x743b51+=_0xacf3a3);else{if(_0x33988e[_0x4c881d(0x392)](/horz/i)&&_0x33988e['match'](/vert/i)){if('LGeBF'===_0x4c881d(0x679))_0x4df6e6+=_0x369703['isActor']()?-_0x51a041:_0x51a041,_0x743b51+=_0x369703[_0x4c881d(0x7d1)]()?-_0xacf3a3:_0xacf3a3;else return[_0x44a7e9[_0x4c881d(0x2ec)]()];}else{if(_0x33988e[_0x4c881d(0x392)](/horz/i))_0x4df6e6+=_0x369703['isActor']()?-_0x51a041:_0x51a041,_0x743b51+=_0xacf3a3;else _0x33988e[_0x4c881d(0x392)](/vert/i)&&(_0x4df6e6+=_0x51a041,_0x743b51+=_0x369703['isActor']()?-_0xacf3a3:_0xacf3a3);}}_0x369703[_0x4c881d(0x491)](_0x4df6e6,_0x743b51,_0x273f9b,_0x1f7a59,_0x585be6,-0x1),_0x369703[_0x4c881d(0x4c9)](_0x31abb4);}if(_0x5f2c1b)_0x14a912[_0x4c881d(0x1f9)](_0x4c881d(0x430));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x508),_0x14d9be=>{const _0x5f598a=_0x57e85a;if(!SceneManager[_0x5f598a(0x4b2)]())return;if(!$gameSystem[_0x5f598a(0xe14)]())return;VisuMZ[_0x5f598a(0x15e)](_0x14d9be,_0x14d9be);const _0x47435f=$gameTemp[_0x5f598a(0xc21)](),_0x45ea4f=VisuMZ['CreateActionSequenceTargets'](_0x14d9be[_0x5f598a(0xa3a)]),_0x1e8f77=_0x14d9be[_0x5f598a(0xc82)],_0xad4f03=_0x14d9be['OffsetAdjust'],_0x513cce=_0x14d9be[_0x5f598a(0xc3c)],_0x15715d=_0x14d9be[_0x5f598a(0xa95)],_0x2fba18=_0x14d9be[_0x5f598a(0x692)],_0x4aae13=_0x14d9be[_0x5f598a(0xc3b)],_0xafa4b9=_0x14d9be[_0x5f598a(0xa42)],_0x102510=_0x14d9be[_0x5f598a(0x174)],_0x43e4ed=_0x14d9be[_0x5f598a(0x45a)];if(!_0x47435f)return;for(const _0x32fe9c of _0x45ea4f){if(_0x5f598a(0x5b5)!==_0x5f598a(0x5b5))_0x2c0d1a[_0x5f598a(0x734)][_0x5f598a(0x67d)][_0x5f598a(0xa23)](this,_0x1ee257),this[_0x5f598a(0x964)](_0x18707c);else{if(!_0x32fe9c)continue;let _0x22a903=_0x32fe9c[_0x5f598a(0x3ab)]()[_0x5f598a(0x4aa)],_0x5d9c6b=_0x32fe9c['battler']()[_0x5f598a(0x20d)];if(_0x1e8f77[_0x5f598a(0x392)](/home/i))_0x22a903=_0x32fe9c[_0x5f598a(0x3ab)]()[_0x5f598a(0xbac)],_0x5d9c6b=_0x32fe9c[_0x5f598a(0x3ab)]()[_0x5f598a(0x8b6)];else{if(_0x1e8f77[_0x5f598a(0x392)](/center/i))_0x22a903=Graphics[_0x5f598a(0x418)]/0x2,_0x5d9c6b=Graphics[_0x5f598a(0x85e)]/0x2;else _0x1e8f77['match'](/point (\d+), (\d+)/i)&&(_0x22a903=Number(RegExp['$1']),_0x5d9c6b=Number(RegExp['$2']));}if(_0xad4f03[_0x5f598a(0x392)](/none/i))_0x22a903+=_0x513cce,_0x5d9c6b+=_0x15715d;else{if(_0xad4f03['match'](/horz/i)&&_0xad4f03[_0x5f598a(0x392)](/vert/i)){if('dAVjF'==='dAVjF')_0x22a903+=_0x32fe9c[_0x5f598a(0x7d1)]()?-_0x513cce:_0x513cce,_0x5d9c6b+=_0x32fe9c[_0x5f598a(0x7d1)]()?-_0x15715d:_0x15715d;else{if(_0x507b41[_0x5f598a(0x851)])return![];return _0x52a723[_0x5f598a(0x734)]['SceneManager_isSceneChanging']['call'](this);}}else{if(_0xad4f03[_0x5f598a(0x392)](/horz/i))_0x22a903+=_0x32fe9c[_0x5f598a(0x7d1)]()?-_0x513cce:_0x513cce,_0x5d9c6b+=_0x15715d;else _0xad4f03['match'](/vert/i)&&(_0x5f598a(0x866)===_0x5f598a(0x866)?(_0x22a903+=_0x513cce,_0x5d9c6b+=_0x32fe9c[_0x5f598a(0x7d1)]()?-_0x15715d:_0x15715d):this[_0x5f598a(0xbff)](_0x5dba68,'tp',_0x5ddb02+(_0x3ca8f4[_0x5f598a(0x7c1)]||0x0),_0x5ae36c+this[_0x5f598a(0x198)]()*0x2+(_0x1ced94[_0x5f598a(0x294)]||0x0)));}}_0x32fe9c['moveBattlerHomeToPoint'](_0x22a903,_0x5d9c6b,_0x2fba18,_0x4aae13,_0xafa4b9,-0x1),_0x32fe9c[_0x5f598a(0x4c9)](_0x102510);}}if(_0x43e4ed)_0x47435f[_0x5f598a(0x1f9)](_0x5f598a(0x430));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Movement_HomeMoveToTarget',_0x499b4f=>{const _0x43dcfc=_0x57e85a;if(!SceneManager[_0x43dcfc(0x4b2)]())return;if(!$gameSystem[_0x43dcfc(0xe14)]())return;VisuMZ[_0x43dcfc(0x15e)](_0x499b4f,_0x499b4f);const _0x270430=$gameTemp[_0x43dcfc(0xc21)](),_0x1b661b=VisuMZ[_0x43dcfc(0xdd4)](_0x499b4f[_0x43dcfc(0x594)]),_0x11d413=VisuMZ['CreateActionSequenceTargets'](_0x499b4f['Targets2']),_0x248807=_0x499b4f[_0x43dcfc(0x427)];let _0x2e8a19=_0x499b4f[_0x43dcfc(0x9db)];const _0xe0dc3f=_0x499b4f[_0x43dcfc(0x9a3)],_0x9e7401=_0x499b4f[_0x43dcfc(0xc3c)],_0x420998=_0x499b4f[_0x43dcfc(0xa95)],_0x7ad6be=_0x499b4f[_0x43dcfc(0x692)],_0x1d47d=_0x499b4f['FaceDirection'],_0x206de2=_0x499b4f[_0x43dcfc(0xa42)],_0x323a64=_0x499b4f[_0x43dcfc(0x174)],_0x21e5f0=_0x499b4f[_0x43dcfc(0x45a)],_0x33af6f=Math['min'](..._0x11d413['map'](_0x43d3c6=>_0x43d3c6[_0x43dcfc(0x3ab)]()[_0x43dcfc(0x4aa)]-_0x43d3c6[_0x43dcfc(0x3ab)]()[_0x43dcfc(0x6f2)]()/0x2)),_0x10c176=Math['max'](..._0x11d413['map'](_0x18deef=>_0x18deef['battler']()[_0x43dcfc(0x4aa)]+_0x18deef[_0x43dcfc(0x3ab)]()[_0x43dcfc(0x6f2)]()/0x2)),_0x50622e=Math['min'](..._0x11d413[_0x43dcfc(0x260)](_0x5e5b7f=>_0x5e5b7f['battler']()[_0x43dcfc(0x20d)]-_0x5e5b7f[_0x43dcfc(0x3ab)]()[_0x43dcfc(0x62d)]())),_0x2b5b64=Math['max'](..._0x11d413[_0x43dcfc(0x260)](_0x1e7789=>_0x1e7789[_0x43dcfc(0x3ab)]()[_0x43dcfc(0x20d)])),_0x294731=_0x11d413[_0x43dcfc(0x1db)](_0x2509c1=>_0x2509c1[_0x43dcfc(0x7d1)]())[_0x43dcfc(0xd36)],_0x203fad=_0x11d413[_0x43dcfc(0x1db)](_0x2e6a39=>_0x2e6a39[_0x43dcfc(0xd89)]())[_0x43dcfc(0xd36)];let _0x4d10a6=0x0,_0x1b58f1=0x0;if(_0x248807['match'](/front/i)){if(_0x43dcfc(0x344)===_0x43dcfc(0xb89)){const _0x336505=_0x2d3324['prototype'][_0x43dcfc(0x93c)]();[_0x43dcfc(0xd1f),_0x43dcfc(0x7df),'portrait',_0x43dcfc(0x515)][_0x43dcfc(0x3af)](_0x336505)&&(this[_0x43dcfc(0x6a4)]=0x0);}else _0x4d10a6=_0x294731>=_0x203fad?_0x33af6f:_0x10c176;}else{if(_0x248807['match'](/middle/i)){if('LrJeq'!=='DiZRK')_0x4d10a6=(_0x33af6f+_0x10c176)/0x2,_0x2e8a19=-0x1;else{if(!_0x37ce5e)return;const _0x700e58=new _0x3afbc5();this['addOnceParallelInterpreter'](_0x700e58),_0x700e58[_0x43dcfc(0x669)](_0x2e7d72);}}else{if(_0x248807['match'](/back/i)){if(_0x43dcfc(0x456)===_0x43dcfc(0x9d9)){if(this[_0x43dcfc(0x516)]())return;this[_0x43dcfc(0x9b1)](),this['_weaponSprite'][_0x43dcfc(0xb62)](_0x4bcd12),this[_0x43dcfc(0x6c6)][_0x43dcfc(0x604)]();}else _0x4d10a6=_0x294731>=_0x203fad?_0x10c176:_0x33af6f;}}}if(_0x248807[_0x43dcfc(0x392)](/head/i))_0x1b58f1=_0x50622e;else{if(_0x248807['match'](/center/i))'IjGxH'!=='IjGxH'?_0xa50c2b[_0x43dcfc(0x6d3)](this[_0x43dcfc(0x3f1)]()[_0x43dcfc(0x8c8)]()):_0x1b58f1=(_0x50622e+_0x2b5b64)/0x2;else _0x248807['match'](/base/i)&&(_0x1b58f1=_0x2b5b64);}if(!_0x270430)return;for(const _0x3f9296 of _0x1b661b){if(_0x43dcfc(0xbf2)!==_0x43dcfc(0xbf2))for(const _0xaf4552 of _0x3c40a6){const _0x4ebe44=_0x59e500[0x0][_0x43dcfc(0x554)](_0xaf4552[0x0]),_0x33a4e3=_0x3cc2c3[0x1][_0x43dcfc(0x554)](_0xaf4552[0x1]),_0x3454bb=new _0x678112(_0x569489[_0x43dcfc(0x554)](_0x33a4e3),'i');_0x112b6e[_0x4ebe44]=_0x3454bb;}else{if(!_0x3f9296)continue;let _0x4a57dd=_0x4d10a6,_0x404c30=_0x1b58f1;if(_0xe0dc3f[_0x43dcfc(0x392)](/none/i))_0x4a57dd+=_0x9e7401,_0x404c30+=_0x420998;else{if(_0xe0dc3f[_0x43dcfc(0x392)](/horz/i)&&_0xe0dc3f[_0x43dcfc(0x392)](/vert/i))_0x43dcfc(0xcb6)!==_0x43dcfc(0x7f5)?(_0x4a57dd+=_0x3f9296[_0x43dcfc(0x7d1)]()?-_0x9e7401:_0x9e7401,_0x404c30+=_0x3f9296['isActor']()?-_0x420998:_0x420998):this[_0x43dcfc(0x58a)]();else{if(_0xe0dc3f[_0x43dcfc(0x392)](/horz/i)){if(_0x43dcfc(0xe26)!==_0x43dcfc(0xcea))_0x4a57dd+=_0x3f9296[_0x43dcfc(0x7d1)]()?-_0x9e7401:_0x9e7401,_0x404c30+=_0x420998;else{if(!_0x2dff17['isSceneBattle']())return!![];const _0x7293bb=[_0x43dcfc(0x1f4),_0x43dcfc(0xa31)];return _0x7293bb[_0x43dcfc(0x3af)](_0x143bd5['name']);}}else _0xe0dc3f[_0x43dcfc(0x392)](/vert/i)&&(_0x4a57dd+=_0x9e7401,_0x404c30+=_0x3f9296[_0x43dcfc(0x7d1)]()?-_0x420998:_0x420998);}}_0x3f9296[_0x43dcfc(0x491)](_0x4a57dd,_0x404c30,_0x7ad6be,_0x1d47d,_0x206de2,_0x2e8a19),_0x3f9296[_0x43dcfc(0x4c9)](_0x323a64);}}if(_0x21e5f0)_0x270430[_0x43dcfc(0x1f9)](_0x43dcfc(0x430));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Movement_FaceDirection',_0x4e89eb=>{const _0x277393=_0x57e85a;if(!SceneManager[_0x277393(0x4b2)]())return;if(!$gameSystem[_0x277393(0xe14)]())return;VisuMZ[_0x277393(0x15e)](_0x4e89eb,_0x4e89eb);const _0x57ed85=VisuMZ[_0x277393(0xdd4)](_0x4e89eb['Targets']);let _0x15e3e5=_0x4e89eb[_0x277393(0x33d)][_0x277393(0x392)](/back/i);for(const _0x4d6f8a of _0x57ed85){if('gNmsX'==='gNmsX'){if(!_0x4d6f8a)continue;if(_0x4e89eb[_0x277393(0x33d)][_0x277393(0x392)](/rand/i))_0x15e3e5=Math[_0x277393(0xdd9)](0x2);_0x4d6f8a[_0x277393(0x409)](!!_0x15e3e5);}else return _0x4ebf0a['jsScaleDown'][_0x277393(0xa23)](this);}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x167),_0x1740f1=>{const _0x497938=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x1740f1,_0x1740f1);const _0x1ff5fd=VisuMZ['CreateActionSequenceTargets'](_0x1740f1[_0x497938(0xa3a)]),_0x5bae3e=_0x1740f1['FaceAway'];for(const _0x10292e of _0x1ff5fd){if(!_0x10292e)continue;const _0x592397=_0x1740f1[_0x497938(0xb25)](_0x10292e)||{'x':0x0,'y':0x0};let _0xc80172=_0x592397['x'],_0x1aa6b5=_0x592397['y'];_0x10292e[_0x497938(0xd3f)](Math['round'](_0xc80172),Math['round'](_0x1aa6b5),!!_0x5bae3e);}}),PluginManager['registerCommand'](pluginData['name'],_0x57e85a(0x5d4),_0x5c3cdc=>{const _0x368fe8=_0x57e85a;if(!SceneManager[_0x368fe8(0x4b2)]())return;if(!$gameSystem[_0x368fe8(0xe14)]())return;VisuMZ[_0x368fe8(0x15e)](_0x5c3cdc,_0x5c3cdc);const _0x473a32=VisuMZ[_0x368fe8(0xdd4)](_0x5c3cdc[_0x368fe8(0xa3a)]);let _0x4b95da=_0x5c3cdc[_0x368fe8(0xac8)];const _0x3a3695=_0x5c3cdc[_0x368fe8(0x4f7)];for(const _0xb43b4d of _0x473a32){if(_0x368fe8(0xce3)===_0x368fe8(0xc35))_0x25d7a8[_0x368fe8(0x5fa)](_0x368fe8(0xb86),_0x35a9e4,_0x3609ce);else{if(!_0xb43b4d)continue;let _0x24360e=_0xb43b4d[_0x368fe8(0x3ab)]()[_0x368fe8(0x4aa)],_0x4d776e=_0xb43b4d[_0x368fe8(0x3ab)]()['_baseY'];if(_0x4b95da['match'](/home/i)){if('GbaSF'==='LzgUk'){_0xd51fde['prototype'][_0x368fe8(0x265)][_0x368fe8(0xa23)](this);const _0x3fa7c4=this[_0x368fe8(0x473)]()||this;if(!_0x3fa7c4)return;!_0x3fa7c4[_0x368fe8(0x632)]&&(_0x3fa7c4['bitmap']=new _0x32cc18(this[_0x368fe8(0x8b9)]||0x1,this[_0x368fe8(0x54b)]||0x1));if(this[_0x368fe8(0xc1e)]==='bossCollapse')this[_0x368fe8(0x5c7)]['setFrame'](0x0,0x0,this['_mainSprite'][_0x368fe8(0x8b9)]||0x1,this[_0x368fe8(0x746)]);else{let _0x5b3d7f=0x1;if(_0x3fa7c4&&_0x3fa7c4[_0x368fe8(0x632)])_0x5b3d7f=_0x3fa7c4[_0x368fe8(0x632)][_0x368fe8(0x8b9)];let _0x256998=0x1;if(this[_0x368fe8(0x632)])_0x256998=this['bitmap'][_0x368fe8(0x54b)];_0x3fa7c4[_0x368fe8(0xe1d)](0x0,0x0,_0x5b3d7f,_0x256998);}}else _0x24360e=_0xb43b4d[_0x368fe8(0x3ab)]()['_homeX'],_0x4d776e=_0xb43b4d[_0x368fe8(0x3ab)]()[_0x368fe8(0x8b6)];}else{if(_0x4b95da[_0x368fe8(0x392)](/center/i))_0x24360e=Graphics[_0x368fe8(0x418)]/0x2,_0x4d776e=Graphics[_0x368fe8(0x85e)]/0x2;else _0x4b95da[_0x368fe8(0x392)](/point (\d+), (\d+)/i)&&(_0x24360e=Number(RegExp['$1']),_0x4d776e=Number(RegExp['$2']));}_0xb43b4d[_0x368fe8(0xd3f)](Math[_0x368fe8(0x92a)](_0x24360e),Math[_0x368fe8(0x92a)](_0x4d776e),!!_0x3a3695);}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x43e),_0x15747b=>{const _0x55950e=_0x57e85a;if(!SceneManager[_0x55950e(0x4b2)]())return;if(!$gameSystem[_0x55950e(0xe14)]())return;VisuMZ[_0x55950e(0x15e)](_0x15747b,_0x15747b);const _0x2106c5=VisuMZ[_0x55950e(0xdd4)](_0x15747b['Targets1']),_0x5b1d41=VisuMZ[_0x55950e(0xdd4)](_0x15747b[_0x55950e(0xb04)]),_0x421d1b=_0x5b1d41[_0x55950e(0x260)](_0x3f47ed=>_0x3f47ed&&_0x3f47ed[_0x55950e(0x3ab)]()?_0x3f47ed[_0x55950e(0x3ab)]()[_0x55950e(0x4aa)]:0x0)/(_0x5b1d41[_0x55950e(0xd36)]||0x1),_0x489bb4=_0x5b1d41['map'](_0x19c5ac=>_0x19c5ac&&_0x19c5ac['battler']()?_0x19c5ac[_0x55950e(0x3ab)]()[_0x55950e(0x20d)]:0x0)/(_0x5b1d41[_0x55950e(0xd36)]||0x1),_0x217664=_0x15747b[_0x55950e(0x4f7)];for(const _0x592dfd of _0x2106c5){if(!_0x592dfd)continue;_0x592dfd[_0x55950e(0xd3f)](Math[_0x55950e(0x92a)](_0x421d1b),Math[_0x55950e(0x92a)](_0x489bb4),!!_0x217664);}}),PluginManager['registerCommand'](pluginData['name'],_0x57e85a(0xde5),_0x424333=>{const _0x51b509=_0x57e85a;if(!SceneManager[_0x51b509(0x4b2)]())return;VisuMZ[_0x51b509(0x15e)](_0x424333,_0x424333);const _0x3fc665=$gameTemp[_0x51b509(0xc21)](),_0x294e3b=VisuMZ[_0x51b509(0xdd4)](_0x424333[_0x51b509(0xa3a)]),_0x3dbd76=_0x424333[_0x51b509(0x1f7)],_0x399a25=_0x424333[_0x51b509(0x692)],_0x44cfb4=_0x424333[_0x51b509(0xa42)],_0x37fe76=_0x424333[_0x51b509(0xc6f)];if(!_0x3fc665)return;for(const _0x54a708 of _0x294e3b){if(_0x51b509(0xb57)===_0x51b509(0xb57)){if(!_0x54a708)continue;_0x54a708[_0x51b509(0xcdf)](_0x3dbd76,_0x399a25,_0x44cfb4);}else this[_0x51b509(0x4c9)](_0x51b509(0x2df));}if(_0x37fe76)_0x3fc665['setWaitMode'](_0x51b509(0x31d));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xbeb),_0xa41675=>{const _0x1a6ef7=_0x57e85a;if(!SceneManager[_0x1a6ef7(0x4b2)]())return;VisuMZ[_0x1a6ef7(0x15e)](_0xa41675,_0xa41675);const _0x325c69=$gameTemp[_0x1a6ef7(0xc21)]();if(!_0x325c69)return;const _0x510f90=VisuMZ[_0x1a6ef7(0xdd4)](_0xa41675[_0x1a6ef7(0xa3a)]);for(const _0x4fc123 of _0x510f90){if(_0x1a6ef7(0x4af)!==_0x1a6ef7(0xe18)){if(!_0x4fc123)continue;_0x4fc123['performActionEndMembers']();}else return _0x116b1d[_0x1a6ef7(0x734)]['Settings'][_0x1a6ef7(0x447)][_0x1a6ef7(0x522)];}BattleManager[_0x1a6ef7(0xa77)]&&BattleManager[_0x1a6ef7(0xa77)][_0x1a6ef7(0x1c9)]();if(_0xa41675['WaitForMovement'])_0x325c69[_0x1a6ef7(0x1f9)](_0x1a6ef7(0x430));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Movement_Jump',_0x15e892=>{const _0x37f7ae=_0x57e85a;if(!SceneManager[_0x37f7ae(0x4b2)]())return;VisuMZ[_0x37f7ae(0x15e)](_0x15e892,_0x15e892);const _0x26aa97=$gameTemp['getLastPluginCommandInterpreter'](),_0x41fe71=VisuMZ['CreateActionSequenceTargets'](_0x15e892[_0x37f7ae(0xa3a)]),_0x1dcc7c=_0x15e892[_0x37f7ae(0x1f7)],_0x57d4be=_0x15e892[_0x37f7ae(0x692)],_0x4989f0=_0x15e892['WaitForJump'];if(!_0x26aa97)return;for(const _0x26aab5 of _0x41fe71){if(_0x37f7ae(0x289)===_0x37f7ae(0x8ea)){const _0x45f5fc=_0x180546(_0x25624e['$1']);_0xda9352[_0x37f7ae(0xd22)]([this],_0x45f5fc,![],![]);}else{if(!_0x26aab5)continue;_0x26aab5['jumpBattler'](_0x1dcc7c,_0x57d4be);}}if(_0x4989f0)_0x26aa97['setWaitMode'](_0x37f7ae(0x7c4));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x47d),_0x102551=>{const _0x4228a2=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4228a2(0xe14)]())return;VisuMZ[_0x4228a2(0x15e)](_0x102551,_0x102551);const _0xdc9e4=$gameTemp[_0x4228a2(0xc21)](),_0x2217f4=VisuMZ[_0x4228a2(0xdd4)](_0x102551[_0x4228a2(0xa3a)]),_0x3a52b9=_0x102551['DistanceAdjust'],_0x13d628=_0x102551['DistanceX'],_0x5ac4f6=_0x102551[_0x4228a2(0x75b)],_0x20b13a=_0x102551[_0x4228a2(0x692)],_0x5b2790=_0x102551[_0x4228a2(0xc3b)],_0x2e5e40=_0x102551['EasingType'],_0x4f6a42=_0x102551['MotionType'],_0x5a9671=_0x102551[_0x4228a2(0x45a)];if(!_0xdc9e4)return;for(const _0x4fab6e of _0x2217f4){if(!_0x4fab6e)continue;let _0x37332a=_0x13d628,_0xdacbd6=_0x5ac4f6;if(_0x3a52b9[_0x4228a2(0x392)](/horz/i))_0x37332a*=_0x4fab6e[_0x4228a2(0x7d1)]()?-0x1:0x1;if(_0x3a52b9['match'](/vert/i))_0xdacbd6*=_0x4fab6e[_0x4228a2(0x7d1)]()?-0x1:0x1;_0x4fab6e['moveBattlerDistance'](_0x37332a,_0xdacbd6,_0x20b13a,_0x5b2790,_0x2e5e40),_0x4fab6e['requestMotion'](_0x4f6a42);}if(_0x5a9671)_0xdc9e4[_0x4228a2(0x1f9)]('battleMove');}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x19b),_0x5ea08b=>{const _0x32300a=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x32300a(0xe14)]())return;VisuMZ[_0x32300a(0x15e)](_0x5ea08b,_0x5ea08b);const _0x5966af=$gameTemp[_0x32300a(0xc21)](),_0x2c3ca5=VisuMZ[_0x32300a(0xdd4)](_0x5ea08b[_0x32300a(0xa3a)]),_0x2db1c2=_0x5ea08b['OffsetAdjust'],_0x1ac67e=_0x5ea08b['OffsetX'],_0x4a0bd8=_0x5ea08b[_0x32300a(0xa95)],_0x5757fe=_0x5ea08b[_0x32300a(0x692)],_0x243cb7=_0x5ea08b['FaceDirection'],_0x29acab=_0x5ea08b[_0x32300a(0xa42)],_0x2835e6=_0x5ea08b[_0x32300a(0x174)],_0x5e63a7=_0x5ea08b['WaitForMovement'];if(!_0x5966af)return;for(const _0x565857 of _0x2c3ca5){if(!_0x565857)continue;const _0x3e8336=_0x5ea08b['DestinationJS'](_0x565857)||{'x':0x0,'y':0x0};let _0x3691aa=_0x3e8336['x'],_0x5e18a1=_0x3e8336['y'];if(_0x2db1c2[_0x32300a(0x392)](/none/i))_0x3691aa+=_0x1ac67e,_0x5e18a1+=_0x4a0bd8;else{if(_0x2db1c2[_0x32300a(0x392)](/horz/i)&&_0x2db1c2['match'](/vert/i)){if('zLoBg'!==_0x32300a(0x84b))_0x3691aa+=_0x565857[_0x32300a(0x7d1)]()?-_0x1ac67e:_0x1ac67e,_0x5e18a1+=_0x565857['isActor']()?-_0x4a0bd8:_0x4a0bd8;else{const _0x765642=[_0x32300a(0xbf4),_0x32300a(0xc40),_0x32300a(0x16b),'PostDamageAsUserJS',_0x32300a(0x21e),_0x32300a(0x501),_0x32300a(0x7bb),_0x32300a(0x4d2),_0x32300a(0x77a),_0x32300a(0xd02),_0x32300a(0x168),'PostEndActionJS',_0x32300a(0x8db),_0x32300a(0x235),_0x32300a(0x706),_0x32300a(0xbcf),_0x32300a(0x23c),'BattleDefeatJS','EscapeSuccessJS',_0x32300a(0x927),_0x32300a(0xbf0),_0x32300a(0xdc6),_0x32300a(0xe0c),_0x32300a(0x875),'PreRegenerateJS',_0x32300a(0x424)];for(const _0x33032a of _0x765642){_0x1b4b7e[_0x32300a(0x734)][_0x32300a(0x46c)](_0x28dd8b,_0x33032a);}}}else{if(_0x2db1c2['match'](/horz/i))_0x3691aa+=_0x565857[_0x32300a(0x7d1)]()?-_0x1ac67e:_0x1ac67e,_0x5e18a1+=_0x4a0bd8;else _0x2db1c2[_0x32300a(0x392)](/vert/i)&&(_0x3691aa+=_0x1ac67e,_0x5e18a1+=_0x565857[_0x32300a(0x7d1)]()?-_0x4a0bd8:_0x4a0bd8);}}_0x565857[_0x32300a(0x946)](_0x3691aa,_0x5e18a1,_0x5757fe,_0x243cb7,_0x29acab,-0x1),_0x565857[_0x32300a(0x4c9)](_0x2835e6);}if(_0x5e63a7)_0x5966af[_0x32300a(0x1f9)](_0x32300a(0x430));}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xc01),_0x109a48=>{const _0x11451b=_0x57e85a;if(!SceneManager[_0x11451b(0x4b2)]())return;if(!$gameSystem[_0x11451b(0xe14)]())return;VisuMZ[_0x11451b(0x15e)](_0x109a48,_0x109a48);const _0x1a0c38=$gameTemp[_0x11451b(0xc21)](),_0x19ac64=VisuMZ[_0x11451b(0xdd4)](_0x109a48[_0x11451b(0xa3a)]),_0x398b4c=_0x109a48[_0x11451b(0xc82)],_0xb60072=_0x109a48[_0x11451b(0x9a3)],_0x386b08=_0x109a48[_0x11451b(0xc3c)],_0x278ad2=_0x109a48[_0x11451b(0xa95)],_0x1fbe39=_0x109a48['Duration'],_0x1539f6=_0x109a48[_0x11451b(0xc3b)],_0x36db31=_0x109a48[_0x11451b(0xa42)],_0x4b2ebe=_0x109a48[_0x11451b(0x174)],_0x79e6ae=_0x109a48[_0x11451b(0x45a)];if(!_0x1a0c38)return;for(const _0x3100eb of _0x19ac64){if(!_0x3100eb)continue;let _0xe0c55=_0x3100eb[_0x11451b(0x3ab)]()[_0x11451b(0x4aa)],_0x1ddb53=_0x3100eb[_0x11451b(0x3ab)]()[_0x11451b(0x20d)];if(_0x398b4c['match'](/home/i)){if('ITDUJ'!==_0x11451b(0x65c))_0xe0c55=_0x3100eb[_0x11451b(0x3ab)]()[_0x11451b(0xbac)],_0x1ddb53=_0x3100eb[_0x11451b(0x3ab)]()[_0x11451b(0x8b6)];else return;}else{if(_0x398b4c['match'](/center/i)){if(_0x11451b(0x511)==='ydvGp')_0xe0c55=Graphics[_0x11451b(0x418)]/0x2,_0x1ddb53=Graphics[_0x11451b(0x85e)]/0x2;else return _0x49ab54[_0x11451b(0x8a1)]();}else{if(_0x398b4c[_0x11451b(0x392)](/point (\d+), (\d+)/i)){if(_0x11451b(0x8b8)!==_0x11451b(0xc30))_0xe0c55=Number(RegExp['$1']),_0x1ddb53=Number(RegExp['$2']);else{if(!this[_0x11451b(0x67c)]())return;if(!this[_0x11451b(0x937)])return;if(this[_0x11451b(0xa49)]===_0x57442b&&this['_targetSkewY']===_0x283682)return;this[_0x11451b(0xa49)]=_0x33d31c,this['_targetSkewY']=_0x5b492f,this[_0x11451b(0x601)]=_0x4eaaaf,this[_0x11451b(0xcd6)]=_0x4bf5db,this['_skewEasing']=_0x20311b||_0x11451b(0x23a),_0xbb654e<=0x0&&(this['_distortionSprite'][_0x11451b(0x481)]['x']=this['_targetSkewX'],this['_distortionSprite'][_0x11451b(0x481)]['y']=this['_targetSkewY']);}}}}if(_0xb60072[_0x11451b(0x392)](/none/i))_0xe0c55+=_0x386b08,_0x1ddb53+=_0x278ad2;else{if(_0xb60072['match'](/horz/i)&&_0xb60072['match'](/vert/i))_0xe0c55+=_0x3100eb[_0x11451b(0x7d1)]()?-_0x386b08:_0x386b08,_0x1ddb53+=_0x3100eb[_0x11451b(0x7d1)]()?-_0x278ad2:_0x278ad2;else{if(_0xb60072[_0x11451b(0x392)](/horz/i))_0x11451b(0xe19)===_0x11451b(0xe19)?(_0xe0c55+=_0x3100eb['isActor']()?-_0x386b08:_0x386b08,_0x1ddb53+=_0x278ad2):(this['resizeWindowBorderStyle'](_0x1ad129),this[_0x11451b(0x903)]());else{if(_0xb60072['match'](/vert/i)){if(_0x11451b(0xdd0)!==_0x11451b(0xdd0))return this[_0x11451b(0xa58)]();else _0xe0c55+=_0x386b08,_0x1ddb53+=_0x3100eb[_0x11451b(0x7d1)]()?-_0x278ad2:_0x278ad2;}}}}_0x3100eb[_0x11451b(0x946)](_0xe0c55,_0x1ddb53,_0x1fbe39,_0x1539f6,_0x36db31,-0x1),_0x3100eb[_0x11451b(0x4c9)](_0x4b2ebe);}if(_0x79e6ae)_0x1a0c38['setWaitMode']('battleMove');}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Movement_MoveToTarget',_0x4bd401=>{const _0x2f3a36=_0x57e85a;if(!SceneManager[_0x2f3a36(0x4b2)]())return;if(!$gameSystem[_0x2f3a36(0xe14)]())return;VisuMZ['ConvertParams'](_0x4bd401,_0x4bd401);const _0x4457d1=$gameTemp['getLastPluginCommandInterpreter'](),_0xa3091b=VisuMZ[_0x2f3a36(0xdd4)](_0x4bd401[_0x2f3a36(0x594)]),_0x3f2b06=VisuMZ['CreateActionSequenceTargets'](_0x4bd401['Targets2']),_0x3e4b8e=_0x4bd401['TargetLocation'];let _0x390888=_0x4bd401['MeleeDistance'];const _0x2aad6b=_0x4bd401[_0x2f3a36(0x9a3)],_0x12cb3a=_0x4bd401[_0x2f3a36(0xc3c)],_0x2add3c=_0x4bd401['OffsetY'],_0x7217a=_0x4bd401['Duration'],_0x182cd6=_0x4bd401['FaceDirection'],_0x5158fe=_0x4bd401[_0x2f3a36(0xa42)],_0x4c5e40=_0x4bd401[_0x2f3a36(0x174)],_0x5124af=_0x4bd401[_0x2f3a36(0x45a)],_0x2055b3=Math[_0x2f3a36(0x16e)](..._0x3f2b06['map'](_0x51bb0c=>_0x51bb0c[_0x2f3a36(0x3ab)]()['_baseX']-_0x51bb0c[_0x2f3a36(0x3ab)]()['mainSpriteWidth']()/0x2)),_0x48249c=Math['max'](..._0x3f2b06['map'](_0x50dd5a=>_0x50dd5a[_0x2f3a36(0x3ab)]()[_0x2f3a36(0x4aa)]+_0x50dd5a['battler']()[_0x2f3a36(0x6f2)]()/0x2)),_0x20fb84=Math[_0x2f3a36(0x16e)](..._0x3f2b06[_0x2f3a36(0x260)](_0x72caf0=>_0x72caf0[_0x2f3a36(0x3ab)]()[_0x2f3a36(0x20d)]-_0x72caf0[_0x2f3a36(0x3ab)]()['mainSpriteHeight']())),_0x36806b=Math[_0x2f3a36(0xde7)](..._0x3f2b06['map'](_0x27c1f2=>_0x27c1f2[_0x2f3a36(0x3ab)]()[_0x2f3a36(0x20d)])),_0x32ec9b=_0x3f2b06['filter'](_0x25e018=>_0x25e018[_0x2f3a36(0x7d1)]())[_0x2f3a36(0xd36)],_0x1dee2a=_0x3f2b06[_0x2f3a36(0x1db)](_0x570f3e=>_0x570f3e['isEnemy']())[_0x2f3a36(0xd36)];let _0x59ba2d=0x0,_0x4d5cc9=0x0;if(_0x3e4b8e[_0x2f3a36(0x392)](/front/i))_0x59ba2d=_0x32ec9b>=_0x1dee2a?_0x2055b3:_0x48249c;else{if(_0x3e4b8e['match'](/middle/i))_0x59ba2d=(_0x2055b3+_0x48249c)/0x2,_0x390888=-0x1;else _0x3e4b8e['match'](/back/i)&&(_0x59ba2d=_0x32ec9b>=_0x1dee2a?_0x48249c:_0x2055b3);}if(_0x3e4b8e[_0x2f3a36(0x392)](/head/i))_0x4d5cc9=_0x20fb84;else{if(_0x3e4b8e[_0x2f3a36(0x392)](/center/i))_0x4d5cc9=(_0x20fb84+_0x36806b)/0x2;else{if(_0x3e4b8e['match'](/base/i)){if(_0x2f3a36(0x42a)===_0x2f3a36(0x42a))_0x4d5cc9=_0x36806b;else{const _0xb2c885=_0x334ef4(_0x4b92d3['$1'])['toUpperCase']()[_0x2f3a36(0xdf5)]();return _0xb2c885;}}}}if(!_0x4457d1)return;for(const _0x20c54f of _0xa3091b){if(!_0x20c54f)continue;let _0x32cb98=_0x59ba2d,_0x4474ef=_0x4d5cc9;if(_0x2aad6b['match'](/none/i))_0x32cb98+=_0x12cb3a,_0x4474ef+=_0x2add3c;else{if(_0x2aad6b[_0x2f3a36(0x392)](/horz/i)&&_0x2aad6b[_0x2f3a36(0x392)](/vert/i))_0x32cb98+=_0x20c54f['isActor']()?-_0x12cb3a:_0x12cb3a,_0x4474ef+=_0x20c54f['isActor']()?-_0x2add3c:_0x2add3c;else{if(_0x2aad6b['match'](/horz/i))_0x32cb98+=_0x20c54f[_0x2f3a36(0x7d1)]()?-_0x12cb3a:_0x12cb3a,_0x4474ef+=_0x2add3c;else _0x2aad6b['match'](/vert/i)&&(_0x32cb98+=_0x12cb3a,_0x4474ef+=_0x20c54f[_0x2f3a36(0x7d1)]()?-_0x2add3c:_0x2add3c);}}_0x20c54f[_0x2f3a36(0x946)](_0x32cb98,_0x4474ef,_0x7217a,_0x182cd6,_0x5158fe,_0x390888),_0x20c54f[_0x2f3a36(0x4c9)](_0x4c5e40);}if(_0x5124af)_0x4457d1['setWaitMode'](_0x2f3a36(0x430));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x58b),_0x5f0998=>{const _0x3b34da=_0x57e85a;if(!SceneManager[_0x3b34da(0x4b2)]())return;VisuMZ[_0x3b34da(0x15e)](_0x5f0998,_0x5f0998);const _0x565a4b=$gameTemp[_0x3b34da(0xc21)](),_0x4e705e=VisuMZ[_0x3b34da(0xdd4)](_0x5f0998[_0x3b34da(0xa3a)]),_0x485e33=_0x5f0998[_0x3b34da(0x22c)],_0x59dfbb=_0x5f0998[_0x3b34da(0x692)],_0x167948=_0x5f0998[_0x3b34da(0xa42)],_0x3eb001=_0x5f0998[_0x3b34da(0x37f)];if(!_0x565a4b)return;for(const _0x620e42 of _0x4e705e){if(!_0x620e42)continue;_0x620e42[_0x3b34da(0x8e9)](_0x485e33,_0x59dfbb,_0x167948);}if(_0x3eb001)_0x565a4b[_0x3b34da(0x1f9)](_0x3b34da(0xd59));}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x751),_0x27ace7=>{const _0x3639e5=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3639e5(0x15e)](_0x27ace7,_0x27ace7);const _0x36943e=$gameTemp[_0x3639e5(0xc21)](),_0x17682b=VisuMZ[_0x3639e5(0xdd4)](_0x27ace7[_0x3639e5(0xa3a)]),_0x284c56=_0x27ace7[_0x3639e5(0x487)],_0x388d63=_0x27ace7[_0x3639e5(0x76a)],_0x2fe19e=_0x27ace7['Duration'],_0x3b4e66=_0x27ace7['EasingType'],_0x573c2d=_0x27ace7[_0x3639e5(0xac0)];if(!_0x36943e)return;for(const _0x36cb81 of _0x17682b){if(!_0x36cb81)continue;_0x36cb81[_0x3639e5(0xd90)](_0x284c56,_0x388d63,_0x2fe19e,_0x3b4e66);}if(_0x573c2d)_0x36943e[_0x3639e5(0x1f9)](_0x3639e5(0x3b9));}),PluginManager['registerCommand'](pluginData['name'],_0x57e85a(0xbc9),_0x30fe2c=>{const _0x4a0614=_0x57e85a;if(!SceneManager[_0x4a0614(0x4b2)]())return;VisuMZ[_0x4a0614(0x15e)](_0x30fe2c,_0x30fe2c);const _0x4a5084=$gameTemp[_0x4a0614(0xc21)](),_0xb755ee=VisuMZ[_0x4a0614(0xdd4)](_0x30fe2c['Targets']),_0xc5e93=_0x30fe2c[_0x4a0614(0x961)],_0xda1e39=_0x30fe2c['SkewY'],_0x45eb0d=_0x30fe2c['Duration'],_0x3a5a82=_0x30fe2c[_0x4a0614(0xa42)],_0x2509fe=_0x30fe2c[_0x4a0614(0x544)];if(!_0x4a5084)return;for(const _0x5ebb1a of _0xb755ee){if(!_0x5ebb1a)continue;_0x5ebb1a[_0x4a0614(0x8da)](_0xc5e93,_0xda1e39,_0x45eb0d,_0x3a5a82);}if(_0x2509fe)_0x4a5084[_0x4a0614(0x1f9)](_0x4a0614(0x8d6));}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x5b1),_0x38e538=>{const _0x2518d5=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2518d5(0x15e)](_0x38e538,_0x38e538);const _0x34968=$gameTemp[_0x2518d5(0xc21)](),_0x11e667=VisuMZ['CreateActionSequenceTargets'](_0x38e538[_0x2518d5(0xa3a)]),_0x1f9361=_0x38e538['Angle'],_0x4ed3b2=_0x38e538['Duration'],_0x1a8db2=_0x38e538['EasingType'],_0x26db85=_0x38e538[_0x2518d5(0xa4b)],_0x85abff=_0x38e538[_0x2518d5(0xce1)];if(!_0x34968)return;for(const _0x2e67dd of _0x11e667){if(!_0x2e67dd)continue;_0x2e67dd[_0x2518d5(0xcc0)](_0x1f9361,_0x4ed3b2,_0x1a8db2,_0x26db85);}if(_0x85abff)_0x34968[_0x2518d5(0x1f9)](_0x2518d5(0x2e5));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Movement_WaitForFloat',_0x3ef0f6=>{const _0x5966c7=_0x57e85a;if(!SceneManager['isSceneBattle']())return;const _0x208c8a=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x208c8a)return;_0x208c8a['setWaitMode'](_0x5966c7(0x31d));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xde6),_0x28250a=>{const _0x8ecf6c=_0x57e85a;if(!SceneManager[_0x8ecf6c(0x4b2)]())return;const _0x45c99b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x45c99b)return;_0x45c99b[_0x8ecf6c(0x1f9)](_0x8ecf6c(0x7c4));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x694),_0x39ab36=>{const _0x2fd3ed=_0x57e85a;if(!SceneManager[_0x2fd3ed(0x4b2)]())return;const _0x1d9824=$gameTemp[_0x2fd3ed(0xc21)]();if(!_0x1d9824)return;_0x1d9824[_0x2fd3ed(0x1f9)](_0x2fd3ed(0x430));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Movement_WaitForOpacity',_0x5db507=>{const _0x2121e7=_0x57e85a;if(!SceneManager[_0x2121e7(0x4b2)]())return;const _0x42b4b0=$gameTemp[_0x2121e7(0xc21)]();if(!_0x42b4b0)return;_0x42b4b0[_0x2121e7(0x1f9)](_0x2121e7(0xd59));}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0xb52),_0x4cecbb=>{const _0x2c406c=_0x57e85a;if(!SceneManager[_0x2c406c(0x4b2)]())return;const _0x4b265f=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4b265f)return;_0x4b265f['setWaitMode'](_0x2c406c(0x3b9));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xa15),_0x13f78a=>{const _0x1a35b0=_0x57e85a;if(!SceneManager['isSceneBattle']())return;const _0x262737=$gameTemp[_0x1a35b0(0xc21)]();if(!_0x262737)return;_0x262737[_0x1a35b0(0x1f9)](_0x1a35b0(0x8d6));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Movement_WaitForSpin',_0x318f84=>{const _0x327f8e=_0x57e85a;if(!SceneManager[_0x327f8e(0x4b2)]())return;const _0x58a352=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x58a352)return;_0x58a352['setWaitMode'](_0x327f8e(0x2e5));}),VisuMZ[_0x57e85a(0x734)]['CheckActSeqProjectileVersion']=function(){const _0x2dc37b=_0x57e85a;if(!Imported[_0x2dc37b(0xbc2)])return;if(VisuMZ[_0x2dc37b(0x50b)][_0x2dc37b(0x88f)]<1.08){let _0x149f2c='';_0x149f2c+=_0x2dc37b(0x362),_0x149f2c+=_0x2dc37b(0x34e),alert(_0x149f2c),SceneManager[_0x2dc37b(0x4f1)]();}},PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Projectile_Animation',_0xd8d180=>{const _0x29fc6e=_0x57e85a;if(!SceneManager[_0x29fc6e(0x4b2)]())return;if(!Imported[_0x29fc6e(0xbc2)])return;VisuMZ[_0x29fc6e(0x15e)](_0xd8d180,_0xd8d180),VisuMZ[_0x29fc6e(0x734)][_0x29fc6e(0x25d)]();const _0x4a9505=$gameTemp[_0x29fc6e(0xc21)](),_0x3cac0f=_0xd8d180[_0x29fc6e(0xb88)];if(!_0x4a9505)return;const _0x514dd4=BattleManager['_spriteset'];if(!_0x514dd4)return;_0x514dd4[_0x29fc6e(0x54c)](_0xd8d180);if(_0x3cac0f)_0x4a9505['setWaitMode']('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xce6),_0x3c6c82=>{const _0x2875b0=_0x57e85a;if(!SceneManager[_0x2875b0(0x4b2)]())return;if(!Imported[_0x2875b0(0xbc2)])return;VisuMZ[_0x2875b0(0x15e)](_0x3c6c82,_0x3c6c82),VisuMZ[_0x2875b0(0x734)]['CheckActSeqProjectileVersion']();const _0x45abb0=$gameTemp[_0x2875b0(0xc21)](),_0x57fae3=_0x3c6c82[_0x2875b0(0xb88)];if(!_0x45abb0)return;const _0x38da84=BattleManager[_0x2875b0(0x78d)];if(!_0x38da84)return;_0x38da84['createActionSequenceProjectile'](_0x3c6c82);if(_0x57fae3)_0x45abb0[_0x2875b0(0x1f9)](_0x2875b0(0x66c));}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],'ActSeq_Projectile_Picture',_0x549e6a=>{const _0x4ac5db=_0x57e85a;if(!SceneManager[_0x4ac5db(0x4b2)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x4ac5db(0x15e)](_0x549e6a,_0x549e6a),VisuMZ[_0x4ac5db(0x734)][_0x4ac5db(0x25d)]();const _0x4b4615=$gameTemp[_0x4ac5db(0xc21)](),_0x57ac20=_0x549e6a['WaitForProjectile'];if(!_0x4b4615)return;const _0x1008d5=BattleManager['_spriteset'];if(!_0x1008d5)return;_0x1008d5[_0x4ac5db(0x54c)](_0x549e6a);if(_0x57ac20)_0x4b4615['setWaitMode'](_0x4ac5db(0x66c));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x56c),_0x3b74e5=>{const _0x57cfd4=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x57cfd4(0x272)])return;VisuMZ[_0x57cfd4(0x15e)](_0x3b74e5,_0x3b74e5);const _0x19527e=$gameTemp[_0x57cfd4(0xc21)](),_0x470256=_0x3b74e5[_0x57cfd4(0x544)];if(!_0x19527e)return;$gameScreen[_0x57cfd4(0x32b)](_0x3b74e5['SkewX'],_0x3b74e5['SkewY'],_0x3b74e5[_0x57cfd4(0x692)],_0x3b74e5[_0x57cfd4(0xa42)]);if(_0x470256)_0x19527e[_0x57cfd4(0x1f9)]('battleSkew');}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x3cf),_0x49f0de=>{const _0x13dbf0=_0x57e85a;if(!SceneManager[_0x13dbf0(0x4b2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x13dbf0(0x15e)](_0x49f0de,_0x49f0de);const _0x2cc911=$gameTemp['getLastPluginCommandInterpreter'](),_0x9e6037=_0x49f0de[_0x13dbf0(0x544)];if(!_0x2cc911)return;$gameScreen[_0x13dbf0(0x32b)](0x0,0x0,_0x49f0de['Duration'],_0x49f0de[_0x13dbf0(0xa42)]);if(_0x9e6037)_0x2cc911[_0x13dbf0(0x1f9)](_0x13dbf0(0x723));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x7d7),_0x51c66b=>{const _0x1e2a8f=_0x57e85a;if(!SceneManager[_0x1e2a8f(0x4b2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x119fbe=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x119fbe)return;_0x119fbe[_0x1e2a8f(0x1f9)](_0x1e2a8f(0x723));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Target_CurrentIndex',_0x2ba7bb=>{const _0x365b77=_0x57e85a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x365b77(0x15e)](_0x2ba7bb,_0x2ba7bb);const _0x21083a=$gameTemp[_0x365b77(0xc21)](),_0x45fdf8=_0x2ba7bb[_0x365b77(0xbd8)],_0xb3ffa2=_0x2ba7bb[_0x365b77(0xa84)];if(!_0x21083a)return;BattleManager[_0x365b77(0x81a)]=_0x45fdf8,BattleManager[_0x365b77(0x3be)]=BattleManager[_0x365b77(0xc11)]?BattleManager['_allTargets'][BattleManager[_0x365b77(0x81a)]]||null:null,BattleManager[_0x365b77(0x3be)]&&_0xb3ffa2[_0x365b77(0x307)]()['trim']()!==_0x365b77(0x833)&&_0x21083a['command119']([_0xb3ffa2]);}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x9b2),_0x5cdb5e=>{const _0x393208=_0x57e85a;if(!SceneManager[_0x393208(0x4b2)]())return;VisuMZ[_0x393208(0x15e)](_0x5cdb5e,_0x5cdb5e);const _0x4eb52e=$gameTemp[_0x393208(0xc21)](),_0x4c8097=_0x5cdb5e[_0x393208(0xa84)];if(!_0x4eb52e)return;BattleManager['_targetIndex']++,BattleManager[_0x393208(0x3be)]=BattleManager[_0x393208(0xc11)][BattleManager[_0x393208(0x81a)]]||null,BattleManager['_target']&&_0x4c8097[_0x393208(0x307)]()[_0x393208(0xdf5)]()!==_0x393208(0x833)&&_0x4eb52e[_0x393208(0x484)]([_0x4c8097]);}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],'ActSeq_Target_PrevTarget',_0x31c988=>{const _0x14e717=_0x57e85a;if(!SceneManager[_0x14e717(0x4b2)]())return;VisuMZ[_0x14e717(0x15e)](_0x31c988,_0x31c988);const _0x545028=$gameTemp[_0x14e717(0xc21)](),_0x470967=_0x31c988[_0x14e717(0xa84)];if(!_0x545028)return;BattleManager[_0x14e717(0x81a)]--,BattleManager['_target']=BattleManager[_0x14e717(0xc11)][BattleManager['_targetIndex']]||null,BattleManager['_target']&&_0x470967['toUpperCase']()['trim']()!==_0x14e717(0x833)&&_0x545028[_0x14e717(0x484)]([_0x470967]);}),PluginManager[_0x57e85a(0x6d4)](pluginData['name'],_0x57e85a(0x7dd),_0x3c635c=>{const _0x237028=_0x57e85a;if(!SceneManager[_0x237028(0x4b2)]())return;VisuMZ[_0x237028(0x15e)](_0x3c635c,_0x3c635c);const _0x53c544=$gameTemp['getLastPluginCommandInterpreter'](),_0xf767cb=_0x3c635c[_0x237028(0xa71)],_0x32007f=_0x3c635c[_0x237028(0xa84)];if(!_0x53c544)return;const _0x5edce2=BattleManager[_0x237028(0x81a)];for(;;){BattleManager[_0x237028(0x81a)]=Math[_0x237028(0xdd9)](BattleManager['_allTargets'][_0x237028(0xd36)]);if(!_0xf767cb)break;if(BattleManager[_0x237028(0x81a)]!==_0x5edce2)break;if(BattleManager['_allTargets'][_0x237028(0xd36)]<=0x1){if('ctXfr'!==_0x237028(0x620))_0x485089+=_0x5c0ac0(_0x1755c0['$1']);else{BattleManager[_0x237028(0x81a)]=0x0;break;}}}BattleManager['_target']=BattleManager[_0x237028(0xc11)][BattleManager[_0x237028(0x81a)]]||null,BattleManager[_0x237028(0x3be)]&&_0x32007f[_0x237028(0x307)]()[_0x237028(0xdf5)]()!==_0x237028(0x833)&&(_0x237028(0xd08)===_0x237028(0x1c1)?this['startMotion']('walk'):_0x53c544[_0x237028(0x484)]([_0x32007f]));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x775),_0x3940e5=>{const _0x34abed=_0x57e85a;if(!SceneManager[_0x34abed(0x4b2)]())return;if(!Imported[_0x34abed(0xa45)])return;if(!ConfigManager[_0x34abed(0x9cd)])return;VisuMZ[_0x34abed(0x15e)](_0x3940e5,_0x3940e5);const _0x20584c=VisuMZ[_0x34abed(0xdd4)](_0x3940e5[_0x34abed(0xa3a)]);let _0x18adf8=_0x3940e5['VoiceLine']||'';for(const _0x32aeec of _0x20584c){if(_0x34abed(0x5f2)!==_0x34abed(0x958)){if(!_0x32aeec)continue;_0x32aeec[_0x34abed(0xd9d)](_0x18adf8);}else{if(!_0x33714d[_0x34abed(0x4b2)]())return;const _0xb8dde3=_0x457724[_0x34abed(0xc21)]();if(!_0xb8dde3)return;_0xb8dde3[_0x34abed(0x1f9)](_0x34abed(0x7c4));}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0xd8f),_0x41e04f=>{const _0x2a9bc5=_0x57e85a;if(!SceneManager[_0x2a9bc5(0x4b2)]())return;if(!Imported[_0x2a9bc5(0xa45)])return;if(!ConfigManager['battleVoices'])return;VisuMZ[_0x2a9bc5(0x15e)](_0x41e04f,_0x41e04f);const _0x7d5998=VisuMZ[_0x2a9bc5(0xdd4)](_0x41e04f['Targets']);let _0x3024a2=(_0x41e04f[_0x2a9bc5(0x8c5)]||'')+(_0x41e04f['Letter']||'');for(const _0xb1919c of _0x7d5998){if(!_0xb1919c)continue;_0xb1919c[_0x2a9bc5(0xd9d)](_0x3024a2);}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x6f6),_0x3df8e0=>{const _0x336f89=_0x57e85a;if(!SceneManager[_0x336f89(0x4b2)]())return;VisuMZ['ConvertParams'](_0x3df8e0,_0x3df8e0);const _0x3dd51a=VisuMZ[_0x336f89(0xdd4)](_0x3df8e0['Targets']);for(const _0x185115 of _0x3dd51a){if('iDLOt'==='iDLOt'){if(!_0x185115)continue;if(!_0x185115[_0x336f89(0x7d1)]())continue;_0x185115[_0x336f89(0x628)]();}else{if(this[_0x336f89(0xa98)]===_0x11e6fa)this[_0x336f89(0xd67)]();this[_0x336f89(0xa98)]=_0x2a971c;if(_0x5c7415[_0x336f89(0x4b2)]()&&_0xbf057e[_0x336f89(0x57d)]()[_0x336f89(0x3af)](this)){const _0x20c4e3=_0x24bf77[_0x336f89(0xd04)]['_statusWindow'];_0x20c4e3&&_0x20c4e3[_0x336f89(0x7a2)](this);}}}}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x485),_0x565de9=>{const _0x28478d=_0x57e85a;if(!SceneManager[_0x28478d(0x4b2)]())return;VisuMZ['ConvertParams'](_0x565de9,_0x565de9);const _0x60082=$gameTemp[_0x28478d(0xc21)]();let _0x5f4683=![];const _0x366ccb=_0x565de9[_0x28478d(0xa84)],_0x79b72d=VisuMZ[_0x28478d(0xdd4)](_0x565de9[_0x28478d(0xa3a)]);for(const _0x5f5658 of _0x79b72d){if(_0x28478d(0xcff)==='RUJvH'){if(!_0x5f5658)continue;if(!_0x5f5658['isActor']())continue;_0x5f5658['nextActiveWeaponSlot']();if(_0x5f5658[_0x28478d(0xa24)]()[_0x28478d(0xd36)]>0x0){if(_0x28478d(0xada)==='bSVvi')_0x5f4683=!![];else return!![];}else _0x5f5658[_0x28478d(0x628)]();}else{const _0x227ff1=_0x670782['max'](this[_0x28478d(0x28a)](),_0xb59d11['iconHeight']),_0x1ca6f5=_0x2db6f2['floor'](_0x227ff1*0x1e),_0x54b513=this['createChildSprite'](_0x1ca6f5,_0x227ff1),_0x45472c=_0x57d58b[_0x28478d(0xc15)]/0x2,_0x2c2895=_0x54b513[_0x28478d(0x632)][_0x28478d(0x5c0)](_0x11dfa1+'\x20');_0x54b513[_0x28478d(0x632)]['textColor']=_0xa05f93[_0x28478d(0x3f4)](_0x562fed[_0x28478d(0xe01)]),_0x54b513[_0x28478d(0x632)]['drawText'](_0x51c3c5,_0x45472c,0x0,_0x1ca6f5-_0x45472c,_0x227ff1,_0x28478d(0xc31));const _0x59dbf0=_0x50a4b2[_0x28478d(0x92a)]((_0x227ff1-_0x207468[_0x28478d(0x15d)])/0x2),_0x209a6a=_0x1ca6f5/0x2-_0x3712cc[_0x28478d(0xc15)]-_0x2c2895/0x2+_0x45472c/0x2,_0x5b8842=_0x568af1[_0x28478d(0x95e)](_0x28478d(0x584)),_0x55837e=_0x54df00['iconWidth'],_0x327e95=_0x258103['iconHeight'],_0x1aa73b=_0xfa5505%0x10*_0x55837e,_0x26c6f0=_0x28f16f[_0x28478d(0x7f8)](_0x2d5833/0x10)*_0x327e95;_0x54b513['bitmap'][_0x28478d(0x8fc)](_0x5b8842,_0x1aa73b,_0x26c6f0,_0x55837e,_0x327e95,_0x209a6a,_0x59dbf0),this['_flashColor']=_0x222811[_0x28478d(0xae7)]||[0x0,0x0,0x0,0x0],this[_0x28478d(0x769)]=_0x418900['makeDeepCopy'](this[_0x28478d(0x769)]),this[_0x28478d(0x46b)]=_0x11eb72[_0x28478d(0x947)]||0x0,_0x54b513['dy']=0x0;}}_0x5f4683&&_0x366ccb[_0x28478d(0x307)]()[_0x28478d(0xdf5)]()!==_0x28478d(0x833)&&(_0x28478d(0x1ea)==='wjuUi'?(_0xf786ef[_0x28478d(0x734)][_0x28478d(0x502)](),_0x51156a['BattleCore']['BindCommonEventKeysForGroup'](_0x35efb0),_0x4c7362[_0x28478d(0x734)][_0x28478d(0x6c9)](_0x46349b)):_0x60082['command119']([_0x366ccb]));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x86a),_0x53796c=>{const _0x504354=_0x57e85a;if(!SceneManager[_0x504354(0x4b2)]())return;VisuMZ['ConvertParams'](_0x53796c,_0x53796c);let _0xec12b4=_0x53796c['SlotID'];_0xec12b4--,_0xec12b4=Math[_0x504354(0xde7)](_0xec12b4,0x0);const _0x52ecf0=VisuMZ[_0x504354(0xdd4)](_0x53796c[_0x504354(0xa3a)]);for(const _0x3ec4e0 of _0x52ecf0){if(_0x504354(0x988)===_0x504354(0x404)){if(this[_0x504354(0x9bc)]()){const _0x5538f6=this['item']()['scope'];if(_0x5538f6[_0x504354(0x392)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];}else{if(!_0x3ec4e0)continue;if(!_0x3ec4e0[_0x504354(0x7d1)]())continue;_0x3ec4e0[_0x504354(0x808)](_0xec12b4);}}}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x9a8),_0x3bbef2=>{const _0x46c312=_0x57e85a;if(!SceneManager[_0x46c312(0x4b2)]())return;if(!Imported[_0x46c312(0x272)])return;VisuMZ[_0x46c312(0x15e)](_0x3bbef2,_0x3bbef2);const _0x48e4b0=$gameTemp[_0x46c312(0xc21)](),_0x442fc9=_0x3bbef2[_0x46c312(0xd5b)];if(!_0x48e4b0)return;$gameScreen[_0x46c312(0xcbe)](_0x3bbef2[_0x46c312(0x9f9)],_0x3bbef2[_0x46c312(0x692)],_0x3bbef2[_0x46c312(0xa42)]);if(_0x442fc9)_0x48e4b0[_0x46c312(0x1f9)](_0x46c312(0x242));}),PluginManager[_0x57e85a(0x6d4)](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x5c6),_0x355848=>{const _0x37bd06=_0x57e85a;if(!SceneManager[_0x37bd06(0x4b2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x37bd06(0x15e)](_0x355848,_0x355848);const _0x35d3f4=$gameTemp['getLastPluginCommandInterpreter'](),_0x256d44=_0x355848[_0x37bd06(0xd5b)];if(!_0x35d3f4)return;$gameScreen[_0x37bd06(0xcbe)](0x1,_0x355848[_0x37bd06(0x692)],_0x355848[_0x37bd06(0xa42)]);if(_0x256d44)_0x35d3f4[_0x37bd06(0x1f9)](_0x37bd06(0x242));}),PluginManager['registerCommand'](pluginData[_0x57e85a(0x7a3)],_0x57e85a(0x7ba),_0x3d795e=>{const _0x5e6086=_0x57e85a;if(!SceneManager[_0x5e6086(0x4b2)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x44966a=$gameTemp[_0x5e6086(0xc21)]();if(!_0x44966a)return;_0x44966a[_0x5e6086(0x1f9)]('battleZoom');}),VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xa3d)]=Scene_Boot[_0x57e85a(0x16f)]['onDatabaseLoaded'],Scene_Boot[_0x57e85a(0x16f)]['onDatabaseLoaded']=function(){const _0x52efbd=_0x57e85a;this[_0x52efbd(0xaa3)](),this[_0x52efbd(0x880)](),this[_0x52efbd(0x8e2)](),this[_0x52efbd(0x31c)](),VisuMZ[_0x52efbd(0x734)]['Scene_Boot_onDatabaseLoaded'][_0x52efbd(0xa23)](this),this[_0x52efbd(0xc77)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x52efbd(0x762)]();},Scene_Boot[_0x57e85a(0x16f)][_0x57e85a(0xc77)]=function(){const _0x59c5ef=_0x57e85a;if(VisuMZ[_0x59c5ef(0x3f8)])return;this[_0x59c5ef(0x288)](),this[_0x59c5ef(0xbc5)](),this[_0x59c5ef(0x589)]();},Scene_Boot[_0x57e85a(0x16f)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x420069=_0x57e85a,_0x364571=$dataSystem[_0x420069(0x607)][_0x420069(0xd36)];for(let _0x5b6ed0=0x0;_0x5b6ed0<_0x364571;_0x5b6ed0++){const _0x3261ef=$dataSystem[_0x420069(0x5d0)][_0x5b6ed0];if(_0x3261ef)continue;$dataSystem[_0x420069(0x5d0)][_0x5b6ed0]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x57e85a(0x16f)][_0x57e85a(0x880)]=function(){const _0x4c45d9=_0x57e85a,_0x184d0d=VisuMZ[_0x4c45d9(0x734)]['Settings'];_0x184d0d[_0x4c45d9(0x573)][_0x4c45d9(0x7e4)]===undefined&&(_0x184d0d['Damage'][_0x4c45d9(0x7e4)]=_0x4c45d9(0x6da));if(_0x184d0d[_0x4c45d9(0x876)]['SmoothImage']===undefined){if(_0x4c45d9(0xdf1)!==_0x4c45d9(0xde3))_0x184d0d[_0x4c45d9(0x876)][_0x4c45d9(0x30c)]=![];else return!![];}_0x184d0d[_0x4c45d9(0xb30)][_0x4c45d9(0x30c)]===undefined&&(_0x184d0d[_0x4c45d9(0xb30)][_0x4c45d9(0x30c)]=!![]);if(_0x184d0d[_0x4c45d9(0x876)][_0x4c45d9(0x524)]===undefined){if(_0x4c45d9(0x8f9)===_0x4c45d9(0xbaf)){_0x48f60d(_0x4c45d9(0x299)),_0x5400fb['exit']();return;}else _0x184d0d[_0x4c45d9(0x876)][_0x4c45d9(0x524)]=![];}_0x184d0d[_0x4c45d9(0x876)][_0x4c45d9(0x7d4)]===undefined&&(_0x184d0d['Actor']['PrioritySortActors']=!![]);},VisuMZ[_0x57e85a(0x684)]={},Scene_Boot[_0x57e85a(0x16f)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x3b3999=_0x57e85a;for(const _0x4cb441 of VisuMZ['BattleCore']['Settings']['Damage']['DamageStyleList']){if(!_0x4cb441)continue;const _0x539c8e=_0x4cb441[_0x3b3999(0x8bc)][_0x3b3999(0x307)]()[_0x3b3999(0xdf5)]();VisuMZ[_0x3b3999(0x684)][_0x539c8e]=_0x4cb441;}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x55f)]={},Scene_Boot[_0x57e85a(0x16f)]['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x721020=_0x57e85a,_0x19d0ea=VisuMZ[_0x721020(0x734)][_0x721020(0x55f)],_0x598dab='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x33731b=[[_0x721020(0x6af),_0x721020(0x646)],[_0x721020(0x258),_0x721020(0x945)]],_0x389c75=[['%1Apply%2JS','JS\x20%1APPLY\x20%2'],[_0x721020(0x220),_0x721020(0xb22)]],_0x2d3807=[['',''],['AsUser',_0x721020(0x532)],['AsTarget',_0x721020(0x1cf)]];for(const _0x561346 of _0x389c75){for(const _0x136751 of _0x2d3807){if(_0x721020(0x4a9)==='HtyTW')for(const _0x2a2d36 of _0x33731b){const _0x15acf8=_0x561346[0x0][_0x721020(0x554)](_0x2a2d36[0x0],_0x136751[0x0]),_0x5e7a9f=_0x561346[0x1][_0x721020(0x554)](_0x2a2d36[0x1],_0x136751[0x1])['trim'](),_0x21438c=new RegExp(_0x598dab[_0x721020(0x554)](_0x5e7a9f),'i');_0x19d0ea[_0x15acf8]=_0x21438c;}else this[_0x721020(0x3c8)](_0x27c2a3['note']);}}const _0x7ac626=[['%1StartActionJS',_0x721020(0x97f)],['%1EndActionJS',_0x721020(0xd64)]];for(const _0x2dd6df of _0x7ac626){for(const _0x3ca803 of _0x33731b){if(_0x721020(0x925)===_0x721020(0x735))_0x15d372=![];else{const _0x36daf3=_0x2dd6df[0x0][_0x721020(0x554)](_0x3ca803[0x0]),_0x505d27=_0x2dd6df[0x1][_0x721020(0x554)](_0x3ca803[0x1]),_0xa96d17=new RegExp(_0x598dab[_0x721020(0x554)](_0x505d27),'i');_0x19d0ea[_0x36daf3]=_0xa96d17;}}}const _0x1ad4f1=[[_0x721020(0xa2c),_0x721020(0xc47)],[_0x721020(0x6ed),_0x721020(0xc4c)],[_0x721020(0x23c),_0x721020(0x3b3)],[_0x721020(0xb39),_0x721020(0x453)],[_0x721020(0xae4),_0x721020(0x96a)],[_0x721020(0x927),_0x721020(0x610)],['%1StartTurnJS',_0x721020(0x7b1)],[_0x721020(0x3a5),_0x721020(0x2d1)],[_0x721020(0x1d8),_0x721020(0x8dd)]];for(const _0x550cc7 of _0x1ad4f1){if('qOrce'!==_0x721020(0x630))return 0x0;else for(const _0x44b21c of _0x33731b){const _0x5139dd=_0x550cc7[0x0][_0x721020(0x554)](_0x44b21c[0x0]),_0x5b8fbe=_0x550cc7[0x1]['format'](_0x44b21c[0x1]),_0xb4b30e=new RegExp(_0x598dab[_0x721020(0x554)](_0x5b8fbe),'i');_0x19d0ea[_0x5139dd]=_0xb4b30e;}}},Scene_Boot[_0x57e85a(0x16f)][_0x57e85a(0x288)]=function(){const _0x3862ce=_0x57e85a,_0x4a510f=$dataSkills[_0x3862ce(0x60f)]($dataItems);for(const _0x43716f of _0x4a510f){if(!_0x43716f)continue;VisuMZ['BattleCore']['Parse_Notetags_Action'](_0x43716f);}},Scene_Boot['prototype'][_0x57e85a(0xbc5)]=function(){const _0x496fbd=_0x57e85a,_0x4af88f=$dataActors[_0x496fbd(0x60f)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x26e4d4 of _0x4af88f){if(_0x496fbd(0x2c7)===_0x496fbd(0x2c7)){if(!_0x26e4d4)continue;VisuMZ['BattleCore'][_0x496fbd(0x3e2)](_0x26e4d4);}else return this[_0x496fbd(0x81d)]>0x0;}},Scene_Boot[_0x57e85a(0x16f)][_0x57e85a(0x64c)]=function(){const _0x3a9da2=_0x57e85a,_0x55f7f2=VisuMZ[_0x3a9da2(0x734)][_0x3a9da2(0x478)][_0x3a9da2(0x5ad)][_0x3a9da2(0xb2f)],_0x2d14c6=[];for(const _0x306af2 of _0x55f7f2){const _0x217e8b=$dataTroops[_0x306af2];if(_0x217e8b)_0x2d14c6[_0x3a9da2(0x5fa)](JsonEx[_0x3a9da2(0xbdc)](_0x217e8b));}for(const _0x4ff341 of $dataTroops){if(!_0x4ff341)continue;for(const _0x16c597 of _0x2d14c6){if(_0x3a9da2(0xb5c)==='DaXgo')this[_0x3a9da2(0xc11)]=this[_0x3a9da2(0x73c)][_0x3a9da2(0x241)](0x0),this[_0x3a9da2(0x81a)]=0x0,this[_0x3a9da2(0x3be)]=this[_0x3a9da2(0xc11)][0x0]||null,this[_0x3a9da2(0x5a1)]=_0x3a9da2(0xd25);else{if(_0x16c597['id']===_0x4ff341['id'])continue;_0x4ff341['pages']=_0x4ff341['pages'][_0x3a9da2(0x60f)](_0x16c597['pages']);}}}},Scene_Boot[_0x57e85a(0x16f)]['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0x196ba0=_0x57e85a,_0xcd79b0=VisuMZ[_0x196ba0(0x734)][_0x196ba0(0x478)][_0x196ba0(0x5ad)];if(_0xcd79b0[_0x196ba0(0x2b8)]>0x0&&$dataCommonEvents[_0xcd79b0['BattleStartEvent']]){const _0x23beb5=$dataCommonEvents[_0xcd79b0[_0x196ba0(0x2b8)]],_0x14f4bb=_0x23beb5[_0x196ba0(0x7df)]['length']-0x2,_0x17343b=_0x23beb5['list'][_0x14f4bb];if(_0x17343b&&_0x17343b['code']!==0xe6){if(_0x196ba0(0x9a0)!=='nPNxV'){const _0x4347bc={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x3b558b=_0x23beb5[_0x196ba0(0x7df)]['pop']();_0x23beb5[_0x196ba0(0x7df)]['unshift'](_0x4347bc),_0x23beb5[_0x196ba0(0x7df)][_0x196ba0(0xd4e)](_0x3b558b);}else this[_0x196ba0(0x1b7)](_0x196ba0(0xd95));}}},Scene_Boot[_0x57e85a(0x16f)]['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0x313618=_0x57e85a;VisuMZ[_0x313618(0x734)][_0x313618(0x502)](),VisuMZ[_0x313618(0x734)][_0x313618(0x6c9)]($dataSkills),VisuMZ[_0x313618(0x734)][_0x313618(0x6c9)]($dataItems);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x502)]=function(){const _0x5b09c3=_0x57e85a;VisuMZ[_0x5b09c3(0x734)]['_commonEventKey']={};for(const _0xd0a9ef of $dataCommonEvents){if(!_0xd0a9ef)continue;if(_0xd0a9ef[_0x5b09c3(0x7a3)][_0x5b09c3(0x392)](/\[(.*)\]/i)){if(_0x5b09c3(0x1ae)===_0x5b09c3(0x2a1))_0x57becc[_0x5b09c3(0x734)]['Game_Battler_clearDamagePopup'][_0x5b09c3(0xa23)](this),this[_0x5b09c3(0x916)]=[];else{let _0x4bfc21=String(RegExp['$1'])[_0x5b09c3(0x795)](/,/g,'')[_0x5b09c3(0x307)]()[_0x5b09c3(0xdf5)]();VisuMZ[_0x5b09c3(0x734)][_0x5b09c3(0x560)][_0x4bfc21]=_0xd0a9ef['id'];}}}},VisuMZ[_0x57e85a(0x734)]['BindCommonEventKeysForGroup']=function(_0x487b1f){const _0x2e4f44=_0x57e85a;for(const _0x51eb7e of _0x487b1f){if(_0x2e4f44(0xb0d)===_0x2e4f44(0xb0d)){if(!_0x51eb7e)continue;VisuMZ['BattleCore'][_0x2e4f44(0xa37)](_0x51eb7e);}else{if(this['battleStatusSprite'])return;}}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xa37)]=function(_0xf174ac){const _0x121eed=_0x57e85a;if(!_0xf174ac)return;if(!_0xf174ac[_0x121eed(0x595)])return;VisuMZ[_0x121eed(0x734)][_0x121eed(0x560)]=VisuMZ[_0x121eed(0x734)][_0x121eed(0x560)]||{};const _0x2e8684=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x1c79aa=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x2e74fe=[];const _0x2fe03b=_0xf174ac[_0x121eed(0x40f)]['match'](_0x2e8684);if(_0x2fe03b){if('hbjtq'===_0x121eed(0xccf)){for(const _0x32d368 of _0x2fe03b){_0x32d368['match'](_0x2e8684);const _0x5c82d4=String(RegExp['$1'])[_0x121eed(0xc06)](',')[_0x121eed(0x260)](_0x2c1509=>String(_0x2c1509)[_0x121eed(0x307)]()[_0x121eed(0xdf5)]());_0x2e74fe=_0x2e74fe[_0x121eed(0x60f)](_0x5c82d4);}!_0xf174ac['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x121eed(0x411)===_0x121eed(0x802)?_0x57d7a7[_0x121eed(0xaec)](this[_0x121eed(0x822)]):_0xf174ac[_0x121eed(0x40f)]+=_0x121eed(0x99f));;}else{if(!this[_0x121eed(0xaa2)]())return![];return _0x5cf10f['BattleCore'][_0x121eed(0xc88)]['call'](this);}}if(_0xf174ac[_0x121eed(0x40f)][_0x121eed(0x392)](_0x1c79aa)){const _0x2d5caf=String(RegExp['$1'])[_0x121eed(0xc06)](/[\r\n]+/)['map'](_0x575003=>String(_0x575003)['toUpperCase']()[_0x121eed(0xdf5)]());_0x2e74fe=_0x2e74fe['concat'](_0x2d5caf);!_0xf174ac[_0x121eed(0x40f)][_0x121eed(0x392)](/<CUSTOM ACTION SEQUENCE>/i)&&('rkcID'!=='iVqCz'?_0xf174ac[_0x121eed(0x40f)]+=_0x121eed(0x99f):(this[_0x121eed(0xa56)]=_0x2333d3[_0x121eed(0xad3)]>=0x0?0x2:0x3,this['createDigits'](_0x10080e['mpDamage'])));;}for(const _0x2c8619 of _0x2e74fe){if(VisuMZ[_0x121eed(0x734)][_0x121eed(0x560)][_0x2c8619]){if('RjSqE'===_0x121eed(0x4b7))return _0xc60cda[_0x121eed(0x7d0)]('ok');else{const _0xcf391=VisuMZ[_0x121eed(0x734)][_0x121eed(0x560)][_0x2c8619],_0x477c59={'code':0x2c,'dataId':_0xcf391,'value1':0x1,'value2':0x0};_0xf174ac[_0x121eed(0x595)][_0x121eed(0x5fa)](_0x477c59);}}}},Scene_Boot[_0x57e85a(0x16f)]['process_VisuMZ_BattleCore_jsFunctions']=function(){const _0x4b90f7=_0x57e85a,_0x50861b=$dataSkills[_0x4b90f7(0x60f)]($dataItems);for(const _0x192fb0 of _0x50861b){if(!_0x192fb0)continue;VisuMZ[_0x4b90f7(0x734)]['Parse_Notetags_Targets'](_0x192fb0);}},VisuMZ['BattleCore']['ParseActorNotetags']=VisuMZ[_0x57e85a(0x40c)],VisuMZ[_0x57e85a(0x40c)]=function(_0xa08d2b){const _0xf13f4=_0x57e85a;if(VisuMZ['BattleCore'][_0xf13f4(0x40c)]){if(_0xf13f4(0x826)!==_0xf13f4(0x826)){const _0x1cacd5=_0x7cf344[_0xf13f4(0x1ee)]('['+_0xc95098['$1'][_0xf13f4(0x392)](/\d+/g)+']');for(const _0x1bf93f of _0x1cacd5){if(!_0x5cb167[_0xf13f4(0x3a6)](_0x1bf93f))return!![];}return![];}else VisuMZ[_0xf13f4(0x734)][_0xf13f4(0x40c)][_0xf13f4(0xa23)](this,_0xa08d2b);}VisuMZ['BattleCore'][_0xf13f4(0x3e2)](_0xa08d2b);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xbb4)]=VisuMZ['ParseClassNotetags'],VisuMZ[_0x57e85a(0xbb4)]=function(_0x1b765a){const _0x6bfe09=_0x57e85a;VisuMZ[_0x6bfe09(0x734)][_0x6bfe09(0xbb4)]&&VisuMZ['BattleCore']['ParseClassNotetags']['call'](this,_0x1b765a),VisuMZ[_0x6bfe09(0x734)]['Parse_Notetags_TraitObjects'](_0x1b765a);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xad7)]=VisuMZ['ParseSkillNotetags'],VisuMZ[_0x57e85a(0xad7)]=function(_0x44343d){const _0x4f139c=_0x57e85a;if(VisuMZ['BattleCore'][_0x4f139c(0xad7)]){if(_0x4f139c(0xd4d)!==_0x4f139c(0x95d))VisuMZ['BattleCore'][_0x4f139c(0xad7)]['call'](this,_0x44343d);else{if(this[_0x4f139c(0x1fb)]())this[_0x4f139c(0x830)](_0x4f139c(0xbf0));_0x424be7['BattleCore']['BattleManager_startTurn'][_0x4f139c(0xa23)](this);if(this[_0x4f139c(0x1fb)]())this['processBattleCoreJS'](_0x4f139c(0xdc6));}}VisuMZ[_0x4f139c(0x734)][_0x4f139c(0x237)](_0x44343d),VisuMZ[_0x4f139c(0x734)][_0x4f139c(0x8c6)](_0x44343d);},VisuMZ['BattleCore']['ParseItemNotetags']=VisuMZ['ParseItemNotetags'],VisuMZ[_0x57e85a(0x43b)]=function(_0x3c2af1){const _0x39e741=_0x57e85a;VisuMZ[_0x39e741(0x734)][_0x39e741(0x43b)]&&VisuMZ[_0x39e741(0x734)][_0x39e741(0x43b)][_0x39e741(0xa23)](this,_0x3c2af1),VisuMZ[_0x39e741(0x734)][_0x39e741(0x237)](_0x3c2af1),VisuMZ[_0x39e741(0x734)][_0x39e741(0x8c6)](_0x3c2af1);},VisuMZ[_0x57e85a(0x734)]['ParseWeaponNotetags']=VisuMZ['ParseWeaponNotetags'],VisuMZ['ParseWeaponNotetags']=function(_0xa919bb){const _0x676add=_0x57e85a;VisuMZ['BattleCore'][_0x676add(0xc5d)]&&VisuMZ[_0x676add(0x734)]['ParseWeaponNotetags']['call'](this,_0xa919bb),VisuMZ[_0x676add(0x734)]['Parse_Notetags_TraitObjects'](_0xa919bb);},VisuMZ['BattleCore'][_0x57e85a(0x420)]=VisuMZ[_0x57e85a(0x420)],VisuMZ[_0x57e85a(0x420)]=function(_0x574f8c){const _0x563309=_0x57e85a;if(VisuMZ[_0x563309(0x734)][_0x563309(0x420)]){if(_0x563309(0x73e)===_0x563309(0x4f5)){const _0x17ce8e=this[_0x563309(0x6c6)][_0x563309(0x243)]();for(const _0x52f817 of _0x17ce8e){this['addSkillTypeCommand'](_0x52f817);}}else VisuMZ[_0x563309(0x734)][_0x563309(0x420)][_0x563309(0xa23)](this,_0x574f8c);}VisuMZ[_0x563309(0x734)]['Parse_Notetags_TraitObjects'](_0x574f8c);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xc64)]=VisuMZ[_0x57e85a(0xc64)],VisuMZ[_0x57e85a(0xc64)]=function(_0x454af8){const _0x3c20f4=_0x57e85a;VisuMZ['BattleCore'][_0x3c20f4(0xc64)]&&VisuMZ[_0x3c20f4(0x734)][_0x3c20f4(0xc64)][_0x3c20f4(0xa23)](this,_0x454af8),VisuMZ['BattleCore'][_0x3c20f4(0x3e2)](_0x454af8);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x5fd)]=VisuMZ['ParseStateNotetags'],VisuMZ['ParseStateNotetags']=function(_0x470465){const _0x5cf25f=_0x57e85a;VisuMZ[_0x5cf25f(0x734)][_0x5cf25f(0x5fd)]&&VisuMZ[_0x5cf25f(0x734)][_0x5cf25f(0x5fd)][_0x5cf25f(0xa23)](this,_0x470465),VisuMZ[_0x5cf25f(0x734)][_0x5cf25f(0x3e2)](_0x470465);},VisuMZ['BattleCore'][_0x57e85a(0x237)]=function(_0x4a6fdb){const _0x4a138b=_0x57e85a,_0x2de2ba=[_0x4a138b(0x4cf),_0x4a138b(0x9c5),_0x4a138b(0x94e),'PostDamageJS',_0x4a138b(0x77a),_0x4a138b(0xd02),_0x4a138b(0x168),_0x4a138b(0x301)];for(const _0x14f940 of _0x2de2ba){VisuMZ[_0x4a138b(0x734)][_0x4a138b(0x46c)](_0x4a6fdb,_0x14f940);}const _0x12dc17=_0x4a6fdb[_0x4a138b(0x40f)];_0x12dc17[_0x4a138b(0x392)](/<ALWAYS CRITICAL/i)&&(_0x4a138b(0x35e)!==_0x4a138b(0x35e)?_0x51d1e7[_0x4a138b(0xb6d)](_0x597e2a,_0x17dfaa):_0x4a6fdb[_0x4a138b(0x356)]['critical']=!![]);if(_0x12dc17['match'](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)){if('vssVI'===_0x4a138b(0xc51))return _0x299c41[_0x4a138b(0x734)][_0x4a138b(0x303)]['call'](this);else _0x4a6fdb[_0x4a138b(0xcb5)]=Math[_0x4a138b(0xde7)](0x1,Number(RegExp['$1']));}_0x12dc17[_0x4a138b(0x392)](/<TARGET:[ ](.*)>/i)&&(_0x4a6fdb[_0x4a138b(0x219)]=String(RegExp['$1'])[_0x4a138b(0x307)]()[_0x4a138b(0xdf5)]());},VisuMZ['BattleCore'][_0x57e85a(0x3e2)]=function(_0x18906a){const _0x232674=_0x57e85a,_0x98ccd9=['PreApplyAsUserJS','PostApplyAsUserJS',_0x232674(0x16b),_0x232674(0x9f6),_0x232674(0x21e),_0x232674(0x501),_0x232674(0x7bb),_0x232674(0x4d2),_0x232674(0x77a),_0x232674(0xd02),_0x232674(0x168),_0x232674(0x301),_0x232674(0x8db),_0x232674(0x235),_0x232674(0x706),_0x232674(0xbcf),_0x232674(0x23c),_0x232674(0xb39),_0x232674(0xae4),_0x232674(0x927),'PreStartTurnJS',_0x232674(0xdc6),'PreEndTurnJS','PostEndTurnJS',_0x232674(0xc8f),'PostRegenerateJS'];for(const _0x56aad0 of _0x98ccd9){if(_0x232674(0x6f9)!=='Fqzsu')return[this[_0x232674(0xcd3)]()];else VisuMZ[_0x232674(0x734)]['createJS'](_0x18906a,_0x56aad0);}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x8c6)]=function(_0x2e04dd){const _0x479f90=_0x57e85a,_0x197531=_0x2e04dd['note'];if(_0x197531['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x2f79a9=String(RegExp['$1']),_0x5c6353=VisuMZ[_0x479f90(0x734)][_0x479f90(0x8b5)](_0x2e04dd,_0x479f90(0xa3a));VisuMZ[_0x479f90(0x734)][_0x479f90(0x91b)](_0x2f79a9,_0x5c6353);}if(_0x197531[_0x479f90(0x392)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x17794a=String(RegExp['$1']),_0x367a84=VisuMZ[_0x479f90(0x734)][_0x479f90(0x8b5)](_0x2e04dd,_0x479f90(0x5af));VisuMZ[_0x479f90(0x734)]['createCommandVisibleJS'](_0x17794a,_0x367a84);}},VisuMZ[_0x57e85a(0x734)]['JS']={},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x46c)]=function(_0x1c4edc,_0x1ad3bd){const _0x3e7313=_0x57e85a,_0x535850=_0x1c4edc[_0x3e7313(0x40f)];if(_0x535850[_0x3e7313(0x392)](VisuMZ[_0x3e7313(0x734)][_0x3e7313(0x55f)][_0x1ad3bd])){const _0x47da46=RegExp['$1'],_0x34f17f='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x3e7313(0x554)](_0x47da46),_0x2523aa=VisuMZ[_0x3e7313(0x734)][_0x3e7313(0x8b5)](_0x1c4edc,_0x1ad3bd);VisuMZ[_0x3e7313(0x734)]['JS'][_0x2523aa]=new Function(_0x34f17f);}},VisuMZ['BattleCore'][_0x57e85a(0x8b5)]=function(_0x2c05ad,_0x255064){const _0x14a987=_0x57e85a;if(VisuMZ[_0x14a987(0x8b5)])return VisuMZ[_0x14a987(0x8b5)](_0x2c05ad,_0x255064);let _0x253417='';if($dataActors[_0x14a987(0x3af)](_0x2c05ad))_0x253417=_0x14a987(0x76e)[_0x14a987(0x554)](_0x2c05ad['id'],_0x255064);if($dataClasses['includes'](_0x2c05ad))_0x253417=_0x14a987(0x9ff)[_0x14a987(0x554)](_0x2c05ad['id'],_0x255064);if($dataSkills[_0x14a987(0x3af)](_0x2c05ad))_0x253417='Skill-%1-%2'['format'](_0x2c05ad['id'],_0x255064);if($dataItems[_0x14a987(0x3af)](_0x2c05ad))_0x253417='Item-%1-%2'[_0x14a987(0x554)](_0x2c05ad['id'],_0x255064);if($dataWeapons[_0x14a987(0x3af)](_0x2c05ad))_0x253417=_0x14a987(0xb3a)[_0x14a987(0x554)](_0x2c05ad['id'],_0x255064);if($dataArmors[_0x14a987(0x3af)](_0x2c05ad))_0x253417='Armor-%1-%2'[_0x14a987(0x554)](_0x2c05ad['id'],_0x255064);if($dataEnemies[_0x14a987(0x3af)](_0x2c05ad))_0x253417=_0x14a987(0x948)[_0x14a987(0x554)](_0x2c05ad['id'],_0x255064);if($dataStates[_0x14a987(0x3af)](_0x2c05ad))_0x253417=_0x14a987(0xad1)[_0x14a987(0x554)](_0x2c05ad['id'],_0x255064);return _0x253417;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x91b)]=function(_0x2ab529,_0x32b22c){const _0x4d3dc5=_0x57e85a,_0x107326=_0x4d3dc5(0x37d)[_0x4d3dc5(0x554)](_0x2ab529);VisuMZ[_0x4d3dc5(0x734)]['JS'][_0x32b22c]=new Function(_0x107326);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x7e6)]=function(_0x298fad,_0x3c5cec){const _0x23bd6d=_0x57e85a,_0x45973b=_0x23bd6d(0xa2d)[_0x23bd6d(0x554)](_0x298fad);VisuMZ[_0x23bd6d(0x734)]['JS'][_0x3c5cec]=new Function(_0x45973b);},TextManager['autoBattle']=VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x478)][_0x57e85a(0x7f9)][_0x57e85a(0xa0f)],TextManager[_0x57e85a(0x804)]=VisuMZ[_0x57e85a(0x734)]['Settings'][_0x57e85a(0x447)][_0x57e85a(0xcd4)],TextManager[_0x57e85a(0xbb8)]=VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x478)][_0x57e85a(0x447)][_0x57e85a(0x4ae)],TextManager[_0x57e85a(0x191)]=VisuMZ[_0x57e85a(0x734)]['Settings']['HpGauge']['Name'],ColorManager[_0x57e85a(0x3f4)]=function(_0x2d9180){const _0x46b2ad=_0x57e85a;return _0x2d9180=String(_0x2d9180),_0x2d9180[_0x46b2ad(0x392)](/#(.*)/i)?'#%1'[_0x46b2ad(0x554)](String(RegExp['$1'])):this[_0x46b2ad(0xe01)](Number(_0x2d9180));},DataManager[_0x57e85a(0x546)]=function(_0x13665c){const _0x10c42f=_0x57e85a;if(_0x13665c['note'][_0x10c42f(0x392)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x9678b7=String(RegExp['$1'])[_0x10c42f(0x307)]()[_0x10c42f(0xdf5)]();if(_0x9678b7===_0x10c42f(0x7f1))return _0x10c42f(0x7f1);if(VisuMZ[_0x10c42f(0x684)][_0x9678b7])return _0x9678b7;}const _0x2f4cf2=VisuMZ[_0x10c42f(0x734)]['Settings']['Damage'][_0x10c42f(0x689)][_0x10c42f(0x307)]()[_0x10c42f(0xdf5)]();if(VisuMZ[_0x10c42f(0x684)][_0x2f4cf2])return _0x2f4cf2;return'MANUAL';},DataManager[_0x57e85a(0x442)]=function(_0x5530ec){const _0xa30f56=_0x57e85a;_0x5530ec=_0x5530ec['toUpperCase']()[_0xa30f56(0xdf5)](),this['_stypeIDs']=this[_0xa30f56(0x929)]||{};if(this[_0xa30f56(0x929)][_0x5530ec])return this[_0xa30f56(0x929)][_0x5530ec];for(let _0x4ce4aa=0x1;_0x4ce4aa<0x64;_0x4ce4aa++){if(_0xa30f56(0x36e)!==_0xa30f56(0x45d)){if(!$dataSystem[_0xa30f56(0x243)][_0x4ce4aa])continue;let _0x2d4e3e=$dataSystem[_0xa30f56(0x243)][_0x4ce4aa][_0xa30f56(0x307)]()[_0xa30f56(0xdf5)]();_0x2d4e3e=_0x2d4e3e[_0xa30f56(0x795)](/\x1I\[(\d+)\]/gi,''),_0x2d4e3e=_0x2d4e3e[_0xa30f56(0x795)](/\\I\[(\d+)\]/gi,''),this[_0xa30f56(0x929)][_0x2d4e3e]=_0x4ce4aa;}else _0x235278[_0xa30f56(0x5fa)](_0x45971d(_0x349613['$1']));}return this[_0xa30f56(0x929)][_0x5530ec]||0x0;},DataManager['getSkillIdWithName']=function(_0x4b2079){const _0x373b9d=_0x57e85a;_0x4b2079=_0x4b2079[_0x373b9d(0x307)]()[_0x373b9d(0xdf5)](),this[_0x373b9d(0x5de)]=this[_0x373b9d(0x5de)]||{};if(this[_0x373b9d(0x5de)][_0x4b2079])return this[_0x373b9d(0x5de)][_0x4b2079];for(const _0x4b2dc9 of $dataSkills){if(!_0x4b2dc9)continue;this['_skillIDs'][_0x4b2dc9['name'][_0x373b9d(0x307)]()[_0x373b9d(0xdf5)]()]=_0x4b2dc9['id'];}return this[_0x373b9d(0x5de)][_0x4b2079]||0x0;},DataManager['getEnemyIdWithName']=function(_0x4159c5){const _0x449e42=_0x57e85a;_0x4159c5=_0x4159c5[_0x449e42(0x307)]()['trim'](),this[_0x449e42(0x8b1)]=this[_0x449e42(0x8b1)]||{};if(this[_0x449e42(0x8b1)][_0x4159c5])return this[_0x449e42(0x8b1)][_0x4159c5];for(const _0x5d8d9c of $dataEnemies){if(!_0x5d8d9c)continue;this[_0x449e42(0x8b1)][_0x5d8d9c[_0x449e42(0x7a3)][_0x449e42(0x307)]()[_0x449e42(0xdf5)]()]=_0x5d8d9c['id'];}return this[_0x449e42(0x8b1)][_0x4159c5]||0x0;},DataManager[_0x57e85a(0xc1d)]=function(_0x104200){const _0x3faea1=_0x57e85a;_0x104200=_0x104200['toUpperCase']()[_0x3faea1(0xdf5)](),this[_0x3faea1(0x4fa)]=this['_wtypeIDs']||{};if(this[_0x3faea1(0x4fa)][_0x104200])return this['_wtypeIDs'][_0x104200];for(let _0x5cbb64=0x1;_0x5cbb64<0x64;_0x5cbb64++){if(!$dataSystem[_0x3faea1(0x607)][_0x5cbb64])continue;let _0x44e9af=$dataSystem['weaponTypes'][_0x5cbb64][_0x3faea1(0x307)]()[_0x3faea1(0xdf5)]();_0x44e9af=_0x44e9af['replace'](/\x1I\[(\d+)\]/gi,''),_0x44e9af=_0x44e9af[_0x3faea1(0x795)](/\\I\[(\d+)\]/gi,''),this[_0x3faea1(0x4fa)][_0x44e9af]=_0x5cbb64;}return this[_0x3faea1(0x4fa)][_0x3faea1(0x4c3)]=0x0,this[_0x3faea1(0x4fa)][_0x104200]||0x0;},DataManager[_0x57e85a(0x6ff)]=function(_0x2fdae3){const _0x41b686=_0x57e85a,_0x10ee88='\x5cI[%1]%2';let _0x2683d3=_0x2fdae3['iconIndex'],_0x2f9b2f=_0x2fdae3[_0x41b686(0x7a3)];const _0x1fe372=_0x2fdae3['note'];return _0x1fe372[_0x41b686(0x392)](/<DISPLAY ICON: (\d+)>/i)&&(_0x2683d3=Number(RegExp['$1'])),_0x1fe372[_0x41b686(0x392)](/<DISPLAY TEXT: (.*)>/i)&&(_0x2f9b2f=String(RegExp['$1'])),_0x10ee88[_0x41b686(0x554)](_0x2683d3,_0x2f9b2f);},DataManager[_0x57e85a(0xade)]=function(_0x4764f9){const _0x5db2a2=_0x57e85a;return _0x4764f9[_0x5db2a2(0x40f)]['match'](/<COMMAND TEXT: (.*)>/i)?'rWHZl'===_0x5db2a2(0xa20)?this[_0x5db2a2(0xc65)]>0x0:String(RegExp['$1']):_0x4764f9[_0x5db2a2(0x7a3)];},DataManager[_0x57e85a(0xcaa)]=function(_0x4a5bfd){const _0x557eea=_0x57e85a;if(_0x4a5bfd[_0x557eea(0x40f)]['match'](/<COMMAND ICON: (\d+)>/i)){if(_0x557eea(0x71e)===_0x557eea(0x71e))return Number(RegExp['$1']);else{if(this[_0x557eea(0xd6d)]()&&this[_0x557eea(0x829)]())return![];}}else{if(_0x557eea(0x557)!==_0x557eea(0x557))_0xf8ab05['push'](_0x1bd6be);else return _0x4a5bfd['iconIndex'];}},DataManager[_0x57e85a(0xd61)]=function(_0x346eeb){const _0x34d45c=_0x57e85a,_0x3be70f=$dataEnemies[_0x346eeb];if(_0x3be70f){if(_0x3be70f[_0x34d45c(0x40f)][_0x34d45c(0x392)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if('nzvaD'==='sWIKZ')this[_0x34d45c(0x867)]['x']=this['_effectsContainer']['x'],this[_0x34d45c(0x867)]['y']=this[_0x34d45c(0x5a4)]['y'];else{const _0x5e85bb=String(RegExp['$1'])[_0x34d45c(0xc06)](/[\r\n]+/)[_0x34d45c(0xb45)](''),_0x385f00=this['processRandomizedData'](_0x5e85bb);_0x346eeb=this[_0x34d45c(0x3b5)](_0x385f00)||_0x346eeb,_0x346eeb=DataManager[_0x34d45c(0xd61)](_0x346eeb);}}}return _0x346eeb;},DataManager[_0x57e85a(0xdf3)]=function(_0x15cd83){const _0x25be99=_0x57e85a;let _0x461bee=0x0;const _0x437529={};for(const _0x538cf8 of _0x15cd83){if(_0x538cf8[_0x25be99(0x392)](/(.*):[ ](\d+)/i)){const _0x1624e9=String(RegExp['$1'])['trim'](),_0x4cc40d=Number(RegExp['$2']);_0x437529[_0x1624e9]=_0x4cc40d,_0x461bee+=_0x4cc40d;}else{if(_0x538cf8[_0x25be99(0x392)](/(.*):[ ](\d+\.?\d+)/i)){const _0x90553e=String(RegExp['$1'])['trim'](),_0x1069cb=Number(RegExp['$2']);_0x437529[_0x90553e]=_0x1069cb,_0x461bee+=_0x1069cb;}else{if(_0x538cf8!==''){if(_0x25be99(0x4fd)!==_0x25be99(0x4fd))return this[_0x25be99(0x497)]();else _0x437529[_0x538cf8]=0x1,_0x461bee++;}}}}if(_0x461bee<=0x0)return'';let _0x5c4cf9=Math[_0x25be99(0x47c)]()*_0x461bee;for(const _0x359550 in _0x437529){if(_0x25be99(0x9aa)===_0x25be99(0x293))_0x1de904['BattleCore'][_0x25be99(0x7e5)][_0x25be99(0xa23)](this,_0x2f977f),this[_0x25be99(0xa08)]();else{_0x5c4cf9-=_0x437529[_0x359550];if(_0x5c4cf9<=0x0)return _0x359550;}}return'';},DataManager[_0x57e85a(0x212)]=function(_0x3d3c28){const _0x24caeb=_0x57e85a;if(!_0x3d3c28)return![];if(!VisuMZ[_0x24caeb(0x734)][_0x24caeb(0x478)]['ActionSequence'][_0x24caeb(0x3fa)])return![];if(_0x3d3c28[_0x24caeb(0x40f)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x3d3c28['note'][_0x24caeb(0x392)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x6632c5 of _0x3d3c28['effects']){if(!_0x6632c5)continue;if(_0x6632c5[_0x24caeb(0x3d3)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x57e85a(0x7a6)]=function(_0x1bdcda){const _0x5b0884=_0x57e85a,_0x5f16df=$dataTroops[_0x1bdcda];if(!_0x5f16df)return'';let _0x5d91b2='';_0x5d91b2+=_0x5f16df[_0x5b0884(0x7a3)];for(const _0x193e1e of _0x5f16df[_0x5b0884(0x2b2)]){for(const _0x3806c3 of _0x193e1e['list']){if(_0x5b0884(0x273)===_0x5b0884(0xcf1))_0x1c0e54['BattleCore'][_0x5b0884(0x478)]['Actor'][_0x5b0884(0x902)]['call'](this,_0x2845bd);else{if([0x6c,0x198][_0x5b0884(0x3af)](_0x3806c3[_0x5b0884(0x3d3)])){if(_0x5b0884(0x901)!=='CDoAe'){if(!_0x1e85bd['isSceneBattle']())return;const _0x39c928=_0x456273[_0x5b0884(0xc21)]();if(!_0x39c928)return;_0x39c928[_0x5b0884(0x1f9)](_0x5b0884(0xa96));}else _0x5d91b2+='\x0a',_0x5d91b2+=_0x3806c3[_0x5b0884(0x7eb)][0x0];}}}}return _0x5d91b2;},ConfigManager[_0x57e85a(0x38a)]=ConfigManager[_0x57e85a(0x38a)]??![],ConfigManager['autoBattleUseSkills']=ConfigManager[_0x57e85a(0xa9f)]??![],ConfigManager[_0x57e85a(0x191)]=ConfigManager['visualHpGauge']??!![],VisuMZ['BattleCore'][_0x57e85a(0xc0c)]=ConfigManager['makeData'],ConfigManager[_0x57e85a(0x2c1)]=function(){const _0x86014a=_0x57e85a,_0x2ef299=VisuMZ[_0x86014a(0x734)][_0x86014a(0xc0c)][_0x86014a(0xa23)](this);return _0x2ef299[_0x86014a(0x38a)]=this[_0x86014a(0x38a)],_0x2ef299[_0x86014a(0xa9f)]=this[_0x86014a(0xa9f)],_0x2ef299['visualHpGauge']=this[_0x86014a(0x191)],_0x2ef299;},VisuMZ[_0x57e85a(0x734)]['ConfigManager_applyData']=ConfigManager[_0x57e85a(0x9e1)],ConfigManager['applyData']=function(_0x59f2cc){const _0x1dc748=_0x57e85a;VisuMZ[_0x1dc748(0x734)][_0x1dc748(0x24d)][_0x1dc748(0xa23)](this,_0x59f2cc),_0x1dc748(0x38a)in _0x59f2cc?this[_0x1dc748(0x38a)]=_0x59f2cc['autoBattleAtStart']:_0x1dc748(0x84a)===_0x1dc748(0x84a)?this[_0x1dc748(0x38a)]=![]:(_0x1282b4[_0x1dc748(0x734)]['Window_BattleLog_performActionStart']['call'](this,_0x872cbe,_0x144174),this[_0x1dc748(0x8d9)]()),'autoBattleUseSkills'in _0x59f2cc?this[_0x1dc748(0xa9f)]=_0x59f2cc[_0x1dc748(0xa9f)]:'SXBCg'===_0x1dc748(0xa1a)?this[_0x1dc748(0xa9f)]=![]:(_0x4f71ee=_0x1e7d3e['boxWidth']/0x2,_0x1dd27f=_0x153243[_0x1dc748(0x85e)]/0x2),_0x1dc748(0x191)in _0x59f2cc?this[_0x1dc748(0x191)]=_0x59f2cc[_0x1dc748(0x191)]:this['visualHpGauge']=!![];},ImageManager[_0x57e85a(0x67b)]=ImageManager[_0x57e85a(0x67b)]||0x9,ImageManager[_0x57e85a(0x9b5)]=ImageManager[_0x57e85a(0x9b5)]||0x6,VisuMZ['BattleCore'][_0x57e85a(0x8a6)]=BattleManager[_0x57e85a(0xb62)],BattleManager[_0x57e85a(0xb62)]=function(_0x4a7c7c,_0x4688e3,_0x44525e){const _0xa047f3=_0x57e85a;VisuMZ['BattleCore'][_0xa047f3(0x8a6)][_0xa047f3(0xa23)](this,_0x4a7c7c,_0x4688e3,_0x44525e),this['_battlerKeyCache']={};},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x61e)]=BattleManager[_0x57e85a(0x8dc)],BattleManager[_0x57e85a(0x8dc)]=function(){const _0x1c3cff=_0x57e85a;VisuMZ[_0x1c3cff(0x734)][_0x1c3cff(0x61e)][_0x1c3cff(0xa23)](this),this['_forcedBattlers']=[];},BattleManager[_0x57e85a(0x53f)]=function(){const _0x2b44d2=_0x57e85a;if(!SceneManager[_0x2b44d2(0x4b2)]())return;const _0x2d36f1=SceneManager[_0x2b44d2(0xd04)][_0x2b44d2(0x912)];if(_0x2d36f1)_0x2d36f1['requestRefresh']();},BattleManager[_0x57e85a(0x44d)]=function(){const _0x4b22bf=_0x57e85a;if(BattleManager[_0x4b22bf(0xad6)]())return _0x4b22bf(0x724);return _0x4b22bf(0x567);},BattleManager[_0x57e85a(0x17c)]=function(_0xd3886f){const _0xcf7524=_0x57e85a;return _0xd3886f=_0xd3886f['toUpperCase']()[_0xcf7524(0xdf5)](),this[_0xcf7524(0x44d)]()===_0xd3886f;},BattleManager['isDTB']=function(){const _0x445546=_0x57e85a;return this[_0x445546(0x17c)]('DTB');},BattleManager['isTurnBased']=function(){return this['isDTB']();},BattleManager['isTickBased']=function(){const _0x23dfc0=_0x57e85a;return!this[_0x23dfc0(0x1fb)]();},BattleManager['isTeamBased']=function(){const _0x7803f5=_0x57e85a;return!this['isTurnBased']()&&!this[_0x7803f5(0xdd7)]();},BattleManager['getBattlerFromKey']=function(_0x228651){const _0x37b9af=_0x57e85a;this['_battlerKeyCache']=this[_0x37b9af(0xdce)]||{};if(this[_0x37b9af(0xdce)][_0x228651]!==undefined)return this[_0x37b9af(0xdce)][_0x228651];this[_0x37b9af(0xdce)][_0x228651]=null;const _0x57b52c=this[_0x37b9af(0x3ef)](),_0x5c1eab=_0x57b52c['find'](_0x5b9f0b=>_0x5b9f0b[_0x37b9af(0xb6e)]()===_0x228651);if(_0x5c1eab)this[_0x37b9af(0xdce)][_0x228651]=_0x5c1eab;return this['_battlerKeyCache'][_0x228651];},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0xb6e)]=function(){const _0x493ac4=_0x57e85a;return'%1-%2'['format'](this[_0x493ac4(0x7d1)]()?'actor':'enemy',this['name']());},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xe27)]=function(_0x4b0914){const _0x305895=_0x57e85a;if(this[_0x305895(0xcb9)]!=='')return;typeof _0x4b0914===_0x305895(0x1e9)?this[_0x305895(0xcb9)]=_0x4b0914[_0x305895(0x2bc)]()[_0x305895(0xdf5)]():this[_0x305895(0xcb9)]=_0x4b0914['battlerKey']();},Game_Action[_0x57e85a(0x16f)]['getBattlerKeyTargets']=function(){const _0x5bd074=_0x57e85a;return[this[_0x5bd074(0xcd3)]()];},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xcd3)]=function(){const _0x2c8a13=_0x57e85a,_0x142cd9=this[_0x2c8a13(0xcb9)]||'',_0x237277=BattleManager[_0x2c8a13(0xa73)](_0x142cd9);if(!_0x237277)return this['getBattlerKeyTargetReplacement']();if(!_0x237277[_0x2c8a13(0x2e0)]())return this[_0x2c8a13(0x225)]();return _0x237277;},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x225)]=function(){const _0x34704e=_0x57e85a,_0x3ec37a=this[_0x34704e(0xcb9)];return _0x3ec37a[_0x34704e(0x392)](/ACTOR/i)?_0x34704e(0xa86)===_0x34704e(0xa86)?this[_0x34704e(0xafb)]()['trueRandomTarget']():this[_0x34704e(0xaa4)](_0x3ee37a):this[_0x34704e(0xd05)]()[_0x34704e(0xe1c)]();},BattleManager[_0x57e85a(0x936)]=function(){const _0x12f1a6=_0x57e85a;return this[_0x12f1a6(0x3ef)]()[_0x12f1a6(0x1db)](_0x179d6c=>_0x179d6c[_0x12f1a6(0x20e)]());},BattleManager[_0x57e85a(0x830)]=function(_0x2a0ba4){const _0x3eb78e=_0x57e85a;_0x2a0ba4===_0x3eb78e(0x23c)&&(this[_0x3eb78e(0x480)]=!![]),$gameParty[_0x3eb78e(0x830)](_0x2a0ba4),$gameTroop[_0x3eb78e(0x830)](_0x2a0ba4);},VisuMZ['BattleCore']['BattleManager_startBattle']=BattleManager['startBattle'],BattleManager['startBattle']=function(){const _0x483932=_0x57e85a;this[_0x483932(0x74b)]=![],this['_autoBattle']=ConfigManager[_0x483932(0x38a)],this[_0x483932(0x480)]=![],this[_0x483932(0x830)](_0x483932(0x8db)),VisuMZ['BattleCore'][_0x483932(0x93a)]['call'](this),this[_0x483932(0x830)](_0x483932(0x235));},BattleManager['processPostBattleCommonEvents']=function(_0x18c8d7){const _0x47811b=_0x57e85a,_0x3126bc=VisuMZ[_0x47811b(0x734)][_0x47811b(0x478)][_0x47811b(0x5ad)];_0x18c8d7!==_0x47811b(0x39e)&&_0x3126bc['BattleEndEvent']&&VisuMZ[_0x47811b(0x734)][_0x47811b(0x3c4)](_0x3126bc['BattleEndEvent'])&&$gameTemp[_0x47811b(0x428)](_0x3126bc[_0x47811b(0xdbc)]);const _0x2b85b7=_0x47811b(0x834)[_0x47811b(0x554)](_0x18c8d7);_0x3126bc[_0x2b85b7]&&VisuMZ['BattleCore'][_0x47811b(0x3c4)](_0x3126bc[_0x2b85b7])&&('HtyNp'!=='hKldo'?$gameTemp[_0x47811b(0x428)](_0x3126bc[_0x2b85b7]):(this['_borderPortraitSprite']['x']=0x0,this[_0x47811b(0x21d)]=_0x471ff4[_0x47811b(0x8a8)](_0x2b5a0c[_0x47811b(0x8b9)]/0x2)));},VisuMZ['BattleCore'][_0x57e85a(0x695)]=BattleManager[_0x57e85a(0x2e4)],BattleManager[_0x57e85a(0x2e4)]=function(){const _0x4f7016=_0x57e85a;if(this['_phase']===_0x4f7016(0x711)){if($gameTemp[_0x4f7016(0x30a)]())return![];}return VisuMZ['BattleCore'][_0x4f7016(0x695)]['call'](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xbee)]=BattleManager[_0x57e85a(0xb13)],BattleManager[_0x57e85a(0xb13)]=function(){const _0x53978a=_0x57e85a;this[_0x53978a(0x480)]=!![],this[_0x53978a(0x830)](_0x53978a(0x23c)),VisuMZ['BattleCore'][_0x53978a(0xbee)][_0x53978a(0xa23)](this),this[_0x53978a(0xce8)](_0x53978a(0x49b));},VisuMZ[_0x57e85a(0x734)]['BattleManager_processAbort']=BattleManager[_0x57e85a(0x9c7)],BattleManager[_0x57e85a(0x9c7)]=function(){const _0x564a2a=_0x57e85a;this[_0x564a2a(0x480)]=!![],VisuMZ['BattleCore'][_0x564a2a(0x77d)][_0x564a2a(0xa23)](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xddd)]=BattleManager['processDefeat'],BattleManager['processDefeat']=function(){const _0x532e85=_0x57e85a;this['_endingBattle']=!![],this[_0x532e85(0x830)]('BattleDefeatJS'),VisuMZ[_0x532e85(0x734)][_0x532e85(0xddd)][_0x532e85(0xa23)](this),this[_0x532e85(0xce8)](_0x532e85(0x645));},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x7aa)]=BattleManager[_0x57e85a(0x9ad)],BattleManager[_0x57e85a(0x9ad)]=function(_0x5b58d4){const _0x22167=_0x57e85a;this[_0x22167(0x74b)]=!![],this[_0x22167(0x449)]=![],this[_0x22167(0x830)](_0x22167(0x706)),VisuMZ[_0x22167(0x734)][_0x22167(0x7aa)][_0x22167(0xa23)](this,_0x5b58d4),this['processBattleCoreJS']('PostEndBattleJS');},VisuMZ['BattleCore'][_0x57e85a(0x6ba)]=BattleManager['startTurn'],BattleManager[_0x57e85a(0x856)]=function(){const _0x55dbba=_0x57e85a;if(this[_0x55dbba(0x1fb)]())this[_0x55dbba(0x830)](_0x55dbba(0xbf0));VisuMZ[_0x55dbba(0x734)]['BattleManager_startTurn'][_0x55dbba(0xa23)](this);if(this[_0x55dbba(0x1fb)]())this[_0x55dbba(0x830)]('PostStartTurnJS');},BattleManager[_0x57e85a(0x1cc)]=function(){const _0x271933=_0x57e85a,_0x2234f3=this[_0x271933(0xa77)],_0x1078e8=_0x2234f3['currentAction']();if(_0x1078e8){if(_0x271933(0x23b)===_0x271933(0x6dd)){const _0x1f904f=0xa,_0x2a324b=0x12c*_0x1f904f,_0xa95e92=0x1e*_0x1f904f;this[_0x271933(0xd1b)](_0x2a324b,0x0,_0xa95e92);}else{_0x1078e8[_0x271933(0xa75)]();if(_0x1078e8['isValid']())this[_0x271933(0x310)](),_0x2234f3[_0x271933(0xc26)]();else{if(_0x271933(0x81b)!==_0x271933(0x572))_0x2234f3['removeCurrentAction'](),this[_0x271933(0x9ec)]();else{if(_0xdb419f['isBattleRefreshRequested']())this[_0x271933(0xcde)](),this[_0x271933(0x30d)]=![],_0x4f843c[_0x271933(0x1a7)]();else this[_0x271933(0x30d)]&&(this[_0x271933(0x30d)]=![],this[_0x271933(0xa6a)](),this[_0x271933(0x6f1)]());}}}}else'DdRKR'!==_0x271933(0x322)?_0x4d544b[_0x271933(0xd04)]['updateBattleProcess']():(this[_0x271933(0x9ec)](),this[_0x271933(0xa77)]=null);},VisuMZ['BattleCore'][_0x57e85a(0x20b)]=BattleManager[_0x57e85a(0x310)],BattleManager['startAction']=function(){const _0x10523f=_0x57e85a,_0x1506ab=this[_0x10523f(0xa77)][_0x10523f(0x8ab)](),_0x6035e=this['_subject'];_0x1506ab&&_0x1506ab['subject']()===_0x6035e&&(_0x10523f(0xa2f)===_0x10523f(0x93f)?(_0x2b390c[_0x10523f(0x734)][_0x10523f(0x43b)]&&_0x3848c5['BattleCore'][_0x10523f(0x43b)][_0x10523f(0xa23)](this,_0x210f5f),_0x570049[_0x10523f(0x734)][_0x10523f(0x237)](_0x766825),_0x5b4516[_0x10523f(0x734)][_0x10523f(0x8c6)](_0x5cd57a)):_0x1506ab[_0x10523f(0x6dc)]('PreStartActionJS')),VisuMZ[_0x10523f(0x734)]['BattleManager_startAction'][_0x10523f(0xa23)](this),_0x1506ab&&_0x1506ab[_0x10523f(0xbe8)]()===_0x6035e&&_0x1506ab[_0x10523f(0x6dc)]('PostStartActionJS');},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x74f)]=BattleManager[_0x57e85a(0x9ec)],BattleManager[_0x57e85a(0x9ec)]=function(){const _0x5c0cc1=_0x57e85a,_0x38799f=this[_0x5c0cc1(0x577)],_0x59db47=this['_subject'];_0x38799f&&_0x38799f!==this['_lastAction']&&_0x38799f[_0x5c0cc1(0xbe8)]()===_0x59db47&&_0x38799f[_0x5c0cc1(0x6dc)](_0x5c0cc1(0x168)),this[_0x5c0cc1(0xa77)]?_0x5c0cc1(0x911)!=='CcOnA'?(_0x371488['BattleCore']['ParseEnemyNotetags']&&_0x3fb2fb['BattleCore'][_0x5c0cc1(0xc64)][_0x5c0cc1(0xa23)](this,_0x34378f),_0xa6ec00['BattleCore'][_0x5c0cc1(0x3e2)](_0x133106)):VisuMZ[_0x5c0cc1(0x734)][_0x5c0cc1(0x74f)][_0x5c0cc1(0xa23)](this):_0x5c0cc1(0xbb1)!=='ISkNK'?this[_0x5c0cc1(0x5a1)]='turn':(_0x1d9b41[_0x5c0cc1(0x734)]['Game_Action_setItem'][_0x5c0cc1(0xa23)](this,_0xbffc0e),this[_0x5c0cc1(0xa08)]()),_0x38799f&&_0x38799f!==this[_0x5c0cc1(0x980)]&&_0x38799f[_0x5c0cc1(0xbe8)]()===_0x59db47&&(_0x5c0cc1(0xc5c)!==_0x5c0cc1(0x186)?_0x38799f[_0x5c0cc1(0x6dc)](_0x5c0cc1(0x301)):(_0x115226['skew']['x']=(_0x532df2[_0x5c0cc1(0x481)]['x']*(_0x3b6ff2-0x1)+this[_0x5c0cc1(0xa49)])/_0x572601,_0x4fc5ac[_0x5c0cc1(0x481)]['y']=(_0x4133ca[_0x5c0cc1(0x481)]['y']*(_0x14d11f-0x1)+this[_0x5c0cc1(0x3e7)])/_0x5cc0b5)),this[_0x5c0cc1(0xbf7)](this[_0x5c0cc1(0x3ef)]()),this[_0x5c0cc1(0x980)]=this['_action'];},BattleManager[_0x57e85a(0xbf7)]=function(_0x382b53){const _0x45b0c4=_0x57e85a;for(const _0x88f424 of _0x382b53){if(!_0x88f424)continue;if(!_0x88f424[_0x45b0c4(0x3ab)]())continue;_0x88f424['battler']()[_0x45b0c4(0x88c)]();}},BattleManager[_0x57e85a(0x68d)]=function(){const _0x28b89d=_0x57e85a;!this[_0x28b89d(0x9e4)]['isBusy']()&&(_0x28b89d(0x720)!==_0x28b89d(0x720)?this['x']=this['enemy']()['battler']()[_0x28b89d(0x4aa)]:this[_0x28b89d(0x9ec)]());},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x3e9)]=function(){const _0x4a0a65=_0x57e85a;this[_0x4a0a65(0x165)]();if(Imported[_0x4a0a65(0xbaa)]){const _0x384a16=VisuMZ[_0x4a0a65(0xdd5)]['Settings']['States'];_0x384a16&&_0x384a16['ActionEndUpdate']===![]&&('XLlJV'===_0x4a0a65(0x1bc)?this[_0x4a0a65(0xcd9)](0x1):_0x2ec007*=this[_0x4a0a65(0xbe8)]()[_0x4a0a65(0x2a2)]);}else{if(_0x4a0a65(0x1f3)!==_0x4a0a65(0x2f9))this[_0x4a0a65(0xcd9)](0x1);else{_0x4fd5de['BattleCore'][_0x4a0a65(0x845)][_0x4a0a65(0xa23)](this);if(this[_0x4a0a65(0x61a)]&&!_0x3e936f[_0x4a0a65(0xa77)])this[_0x4a0a65(0xe17)]();}}this[_0x4a0a65(0x3c3)]();},BattleManager['makeEscapeRatio']=function(){const _0x1af0a7=_0x57e85a;this[_0x1af0a7(0x42e)]=VisuMZ[_0x1af0a7(0x734)][_0x1af0a7(0x478)][_0x1af0a7(0x5ad)][_0x1af0a7(0x18b)][_0x1af0a7(0xa23)](this);},VisuMZ['BattleCore'][_0x57e85a(0x894)]=BattleManager['onEscapeSuccess'],BattleManager[_0x57e85a(0x3bc)]=function(){const _0x264caa=_0x57e85a;this[_0x264caa(0x830)](_0x264caa(0xae4)),BattleManager['_spriteset']['processEscape'](),VisuMZ[_0x264caa(0x734)][_0x264caa(0x894)][_0x264caa(0xa23)](this),this[_0x264caa(0xce8)](_0x264caa(0xaef));},VisuMZ['BattleCore'][_0x57e85a(0x807)]=BattleManager[_0x57e85a(0x882)],BattleManager[_0x57e85a(0x882)]=function(){const _0x3d84ea=_0x57e85a;this[_0x3d84ea(0x830)](_0x3d84ea(0x927));const _0x4e4fff=this[_0x3d84ea(0x42e)];VisuMZ[_0x3d84ea(0x734)][_0x3d84ea(0x807)][_0x3d84ea(0xa23)](this),this['_escapeRatio']=_0x4e4fff+VisuMZ['BattleCore']['Settings'][_0x3d84ea(0x5ad)]['CalcEscapeRaiseJS'][_0x3d84ea(0xa23)](this),this[_0x3d84ea(0xa53)]=![],this['processPostBattleCommonEvents']('EscapeFail');},BattleManager['displayStartMessages']=function(){const _0x406569=_0x57e85a;let _0x11171e=![];if(this['isDisplayEmergedEnemies']())for(const _0x57aee1 of $gameTroop[_0x406569(0x8aa)]()){this['_logWindow'][_0x406569(0x5fa)](_0x406569(0x3fd),TextManager[_0x406569(0x535)][_0x406569(0x554)](_0x57aee1)),this[_0x406569(0x9e4)][_0x406569(0x5fa)](_0x406569(0x674)),_0x11171e=!![];}if(this[_0x406569(0x992)])this[_0x406569(0x9e4)][_0x406569(0x5fa)]('addText',TextManager[_0x406569(0x92d)][_0x406569(0x554)]($gameParty[_0x406569(0x7a3)]())),this[_0x406569(0x9e4)][_0x406569(0x5fa)](_0x406569(0x674));else this[_0x406569(0x60a)]&&(this['_logWindow']['push'](_0x406569(0x3fd),TextManager[_0x406569(0xbc7)]['format']($gameParty[_0x406569(0x7a3)]())),this[_0x406569(0x9e4)]['push']('wait'));if(_0x11171e){if('TUvAU'==='TUvAU')this['_logWindow'][_0x406569(0x5fa)](_0x406569(0x674)),this['_logWindow']['push'](_0x406569(0x896));else{if(this[_0x406569(0xce5)]()!=='')return this[_0x406569(0xce5)]();else{if(_0x9ddbb8['VisuMZ_1_MainMenuCore']&&this[_0x406569(0xb8d)]()!=='')return this['getMenuImage']();}return'';}}this['isTpb']()&&this[_0x406569(0xcdb)]()&&(_0x406569(0x993)===_0x406569(0xcf3)?_0x10528e[_0x406569(0x428)](_0x2f7d37):this[_0x406569(0xd8a)]=![]);},BattleManager[_0x57e85a(0x4fb)]=function(){const _0x39f3e8=_0x57e85a;if(BattleManager[_0x39f3e8(0x449)])return![];return VisuMZ[_0x39f3e8(0x734)]['Settings'][_0x39f3e8(0xb30)]['EmergeText'];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x757)]=BattleManager[_0x57e85a(0x7ee)],BattleManager[_0x57e85a(0x7ee)]=function(){const _0x3aba7a=_0x57e85a;VisuMZ[_0x3aba7a(0x734)][_0x3aba7a(0x757)][_0x3aba7a(0xa23)](this),this['isDTB']()&&this['isSkipPartyCommandWindow']()&&!this[_0x3aba7a(0x60a)]&&$gameParty[_0x3aba7a(0xaf9)]()&&this[_0x3aba7a(0x41a)]();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x13860b=_0x57e85a;return VisuMZ['BattleCore'][_0x13860b(0x478)]['PartyCmd'][_0x13860b(0x3a2)];},BattleManager[_0x57e85a(0x457)]=function(){const _0x11bf41=_0x57e85a;this[_0x11bf41(0xa5d)]()&&(_0x11bf41(0x82b)!==_0x11bf41(0x82b)?_0x370e16['BattleCore'][_0x11bf41(0xd8c)][_0x11bf41(0xa23)](this,_0x5a0da7):this['selectNextCommand']());},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xb09)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x977)],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x977)]=function(){const _0x590e6f=_0x57e85a;VisuMZ['BattleCore'][_0x590e6f(0xb09)][_0x590e6f(0xa23)](this),BattleManager[_0x590e6f(0xad6)]()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager['_tpbNeedsPartyCommand']=![],this[_0x590e6f(0xd0f)]());},BattleManager[_0x57e85a(0x5ff)]=function(_0x2f6a66,_0x54ebb8,_0x448881){const _0x294405=_0x57e85a;if(!_0x448881)return;if(!_0x2f6a66)return;if(!_0x54ebb8)return;const _0x22f0ec=this['_action'];this[_0x294405(0x577)]=new Game_Action(_0x2f6a66);if(DataManager['isItem'](_0x448881))this[_0x294405(0x577)][_0x294405(0x182)](_0x448881['id']);if(DataManager['isSkill'](_0x448881))this[_0x294405(0x577)][_0x294405(0x28d)](_0x448881['id']);if(this[_0x294405(0x577)][_0x294405(0x2df)]())BattleManager[_0x294405(0x37c)](_0x2f6a66,_0x54ebb8);this[_0x294405(0x577)]=_0x22f0ec;},BattleManager[_0x57e85a(0xcf9)]=function(_0x895406,_0x4dac6e){const _0xaf554b=_0x57e85a;this[_0xaf554b(0x577)][_0xaf554b(0xc17)]=_0x4dac6e,this[_0xaf554b(0x9e4)]['displayReflection'](_0x4dac6e),this['_logWindow'][_0xaf554b(0xc8c)](_0x895406,this[_0xaf554b(0x577)]),this[_0xaf554b(0x577)][_0xaf554b(0x8bb)](_0x895406),this[_0xaf554b(0x9e4)]['displayActionResults'](_0x895406,_0x895406);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xbe1)]=BattleManager[_0x57e85a(0x34f)],BattleManager[_0x57e85a(0x34f)]=function(){const _0x37ad4f=_0x57e85a;VisuMZ[_0x37ad4f(0x734)]['BattleManager_makeActionOrders']['call'](this),this['_actionBattlers']=this['_actionBattlers'][_0x37ad4f(0x1db)](_0x4c2d8c=>_0x4c2d8c&&_0x4c2d8c[_0x37ad4f(0x6e8)]());},VisuMZ['BattleCore'][_0x57e85a(0x461)]=BattleManager['updatePhase'],BattleManager[_0x57e85a(0xc38)]=function(_0x534427){const _0x4170aa=_0x57e85a;if(this['_phase']===_0x4170aa(0xd25))this[_0x4170aa(0x836)]();else this[_0x4170aa(0x5a1)]===_0x4170aa(0xc19)?this[_0x4170aa(0xc1c)]():VisuMZ[_0x4170aa(0x734)][_0x4170aa(0x461)]['call'](this,_0x534427);},BattleManager[_0x57e85a(0x2f6)]=function(){const _0x5d5720=_0x57e85a;this[_0x5d5720(0xc11)]=this[_0x5d5720(0x73c)][_0x5d5720(0x241)](0x0),this['_targetIndex']=0x0,this[_0x5d5720(0x3be)]=this[_0x5d5720(0xc11)][0x0]||null,this[_0x5d5720(0x5a1)]=_0x5d5720(0xd25);},BattleManager[_0x57e85a(0x836)]=function(){const _0x374786=_0x57e85a;!this[_0x374786(0xdf6)]()&&!this[_0x374786(0x9e4)][_0x374786(0x782)]()&&(this[_0x374786(0x5a1)]=_0x374786(0x581));},BattleManager[_0x57e85a(0xc19)]=function(_0x958dbc){const _0x57f901=_0x57e85a;this[_0x57f901(0xd93)][_0x57f901(0xb45)](_0x958dbc);if(_0x958dbc===this[_0x57f901(0xa77)])return;const _0x1afb6e=JsonEx[_0x57f901(0xbdc)](_0x958dbc['currentAction']());this['_forcedBattlers'][_0x57f901(0x5fa)]([_0x958dbc,_0x1afb6e]);},BattleManager[_0x57e85a(0xd58)]=function(){},BattleManager[_0x57e85a(0x789)]=function(){const _0x1fb28f=_0x57e85a;if(this['isTpb']())this[_0x1fb28f(0x5a1)]=_0x1fb28f(0x711);else{if(this[_0x1fb28f(0xca2)][_0x1fb28f(0xd36)]>0x0)this[_0x1fb28f(0x5a1)]='turn';else{if(_0x1fb28f(0x8d2)!=='ofnUG'){if(_0x4a1cc5)_0x43aa31[_0x1fb28f(0xa77)][_0x1fb28f(0xd9f)](![]);const _0x16ea12=_0x37fd3d[0x0];_0xc7c209['performSTBExploiter'](_0x16ea12,_0x2b18ad);}else this[_0x1fb28f(0x7ee)]();}}},BattleManager['getNextSubject']=function(){const _0xebec8a=_0x57e85a,_0x18cd66=this[_0xebec8a(0xa77)];_0x18cd66&&this['isTpb']()&&_0x18cd66[_0xebec8a(0x913)]('undecided');for(;;){const _0x3278bc=this[_0xebec8a(0xc71)]();if(!_0x3278bc){if('YoxVa'===_0xebec8a(0x530))return null;else{if(!_0x16803f[_0xebec8a(0xe14)]())return![];if(!_0x9dfba9[_0xebec8a(0xaf6)]())return![];if(this[_0xebec8a(0x5dd)]())return!![];if(this[_0xebec8a(0x338)]())return!![];if(this['_tpbChargeTime']>=0x1)return!![];return![];}}if(_0x3278bc['isBattleMember']()&&_0x3278bc[_0xebec8a(0x2e0)]())return _0x3278bc;}},BattleManager[_0x57e85a(0xc71)]=function(){const _0x56719f=_0x57e85a;if(this[_0x56719f(0xca2)][_0x56719f(0xd36)]>0x0){if(_0x56719f(0x3d0)===_0x56719f(0x3d0)){const _0x3a4bc7=this['_forcedBattlers'][_0x56719f(0x4d6)](),_0x5c94af=_0x3a4bc7[0x0];return _0x5c94af[_0x56719f(0x56f)]=_0x5c94af[_0x56719f(0x56f)]||[],_0x5c94af[_0x56719f(0x56f)][0x0]=_0x3a4bc7[0x1],_0x5c94af;}else this['_cancelButton']['x']=_0x8304a7[_0x56719f(0x8b9)]-(_0x5f2baf[_0x56719f(0x8b9)]-_0x132fca['boxWidth'])/0x2-this['_cancelButton'][_0x56719f(0x8b9)]-0x4;}else{if(_0x56719f(0xcd5)===_0x56719f(0xcd5))return this[_0x56719f(0xd93)][_0x56719f(0x4d6)]();else _0x9c06c8[_0x56719f(0x734)][_0x56719f(0x713)]['call'](this),this['createMultiTargetWindows']();}},VisuMZ['BattleCore']['Game_Battler_forceAction']=Game_Battler[_0x57e85a(0x16f)]['forceAction'],Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xc19)]=function(_0x3bf4e0,_0x5df4e4){const _0x5a6d1c=_0x57e85a;VisuMZ[_0x5a6d1c(0x734)][_0x5a6d1c(0xce2)]['call'](this,_0x3bf4e0,_0x5df4e4),this[_0x5a6d1c(0x56f)][this[_0x5a6d1c(0x56f)][_0x5a6d1c(0xd36)]-0x1][_0x5a6d1c(0x563)]=!![];},Game_Interpreter[_0x57e85a(0x16f)][_0x57e85a(0xd48)]=function(_0x3227bd){const _0x9ec677=_0x57e85a;return this[_0x9ec677(0x200)](_0x3227bd[0x0],_0x3227bd[0x1],_0xb2caab=>{const _0x489483=_0x9ec677;if(!_0xb2caab[_0x489483(0x72f)]()){if(_0x489483(0xc03)!=='OOdpj')_0xb2caab[_0x489483(0xc19)](_0x3227bd[0x2],_0x3227bd[0x3]),BattleManager[_0x489483(0xc19)](_0xb2caab);else{if(!_0x4d2419[_0x489483(0xe14)]())return;const _0xac6036=this[_0x489483(0x3ab)]();if(!_0xac6036)return;_0xac6036[_0x489483(0x999)](_0x46cf3c,_0x4a5219,_0x588548);}}}),!![];},VisuMZ[_0x57e85a(0x734)]['Game_Battler_makeSpeed']=Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xb53)],Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xb53)]=function(){const _0x187c3f=_0x57e85a;VisuMZ['BattleCore']['Game_Battler_makeSpeed']['call'](this),this[_0x187c3f(0x56f)][_0x187c3f(0xd36)]<=0x0&&(this['_speed']=Number['MIN_SAFE_INTEGER']);},BattleManager[_0x57e85a(0x2b4)]=function(){const _0x30e4cf=_0x57e85a;if(VisuMZ[_0x30e4cf(0x734)][_0x30e4cf(0x478)]['Damage'][_0x30e4cf(0x6b5)]??!![])return![];return SceneManager[_0x30e4cf(0x4b2)]()&&this[_0x30e4cf(0x480)];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x211)]=BattleManager[_0x57e85a(0x41a)],BattleManager[_0x57e85a(0x41a)]=function(){const _0x5a8ed5=_0x57e85a;if(this[_0x5a8ed5(0xad6)]()){if(_0x5a8ed5(0xc62)===_0x5a8ed5(0xc62))this[_0x5a8ed5(0xa11)]();else{const _0x4ce641=this[_0x5a8ed5(0xb74)];_0x4ce641[_0x5a8ed5(0xdf7)](_0x5a8ed5(0x6b7),this[_0x5a8ed5(0x8ee)]['bind'](this)),_0x4ce641[_0x5a8ed5(0xdf7)](_0x5a8ed5(0x635),this[_0x5a8ed5(0xc52)][_0x5a8ed5(0xc81)](this)),_0x4ce641['setHandler'](_0x5a8ed5(0x3a3),this[_0x5a8ed5(0x9d6)]['bind'](this)),_0x2f2b6a[_0x5a8ed5(0xad6)]()&&(this['isPartyCommandWindowDisabled']()?delete _0x4ce641[_0x5a8ed5(0x872)][_0x5a8ed5(0x2ac)]:_0x4ce641[_0x5a8ed5(0xdf7)](_0x5a8ed5(0x2ac),this['actorCommandCancelTPB']['bind'](this)));}}else VisuMZ['BattleCore'][_0x5a8ed5(0x211)]['call'](this);},BattleManager[_0x57e85a(0xa11)]=function(){const _0x54f850=_0x57e85a;if(this[_0x54f850(0x54f)]){if(this[_0x54f850(0x54f)][_0x54f850(0x41a)]())return;this['finishActorInput'](),this[_0x54f850(0xbc3)](),!this['_subject']&&!this[_0x54f850(0x54f)]&&(_0x54f850(0x78e)!==_0x54f850(0x172)?SceneManager[_0x54f850(0xd04)]['updateBattleProcess']():this[_0x54f850(0x5fa)]('showAnimation',_0x191e68,[_0x3cfac6[_0x54f850(0xa77)]],-0x1));}else!this[_0x54f850(0xa77)]&&this[_0x54f850(0x280)]();},BattleManager[_0x57e85a(0xbc3)]=function(){const _0xae9970=_0x57e85a;if(!this[_0xae9970(0xa5d)]()||this[_0xae9970(0x37b)]()){this[_0xae9970(0xbba)]&&('ovPXY'===_0xae9970(0x1d3)?!$gameParty[_0xae9970(0x57d)]()[_0xae9970(0x3af)](this[_0xae9970(0xbba)])&&(_0xae9970(0xad9)===_0xae9970(0x6b4)?(this['_logWindow'][_0xae9970(0x5fa)](_0xae9970(0x3fd),_0x2631fa['surprise'][_0xae9970(0x554)](_0x43ec87[_0xae9970(0x7a3)]())),this[_0xae9970(0x9e4)][_0xae9970(0x5fa)](_0xae9970(0x674))):this[_0xae9970(0xbba)]=null):this[_0xae9970(0xb2b)]='xp');if(!this[_0xae9970(0xbba)]){if('nIYUO'!=='WeRxS')this['cancelActorInput'](),this[_0xae9970(0x54f)]=null,this['_inputting']=![];else{if(!this[_0xae9970(0xb08)])return 0x0;if(this[_0xae9970(0x30e)])return this[_0xae9970(0x30e)];const _0x317f34=this[_0xae9970(0x7a3)]();return this[_0xae9970(0x6eb)](),this[_0xae9970(0x30e)]=this[_0xae9970(0x632)][_0xae9970(0x5c0)](_0x317f34)||0x1,this[_0xae9970(0x30e)];}}else{if('dnDVl'===_0xae9970(0x446)){if(!_0x56f4f2['isSceneBattle']())return;_0x664430[_0xae9970(0x15e)](_0x5c6a97,_0x4a7a3e);const _0x1436df=_0x2d2842[_0xae9970(0xc21)](),_0x27fe70=_0x3ab9ef['_subject'],_0x2617ed=_0xdbe495[_0xae9970(0xdd4)](_0xf18ab5[_0xae9970(0xa3a)]),_0x3d2133=_0x51a361['Mirror'],_0x56180b=_0x6e6249['_logWindow'];if(!_0x1436df||!_0x27fe70)return;const _0xb1518a=_0x27fe70[_0xae9970(0xbd9)]();_0x23cb3a[_0xae9970(0x986)](_0x2617ed,_0xb1518a,_0x3d2133),_0x3dd5e6[_0xae9970(0xd52)]&&_0x1436df[_0xae9970(0x1f9)]('battleAnimation');}else this[_0xae9970(0x935)]();}}},BattleManager['revertTpbCachedActor']=function(){const _0x24bfa4=_0x57e85a;if(!$gameParty[_0x24bfa4(0x57d)]()[_0x24bfa4(0x3af)](this[_0x24bfa4(0xbba)])){if(_0x24bfa4(0x341)!==_0x24bfa4(0x341)){if(!_0x4108d5[_0x24bfa4(0x734)]['Settings'][_0x24bfa4(0x52a)][_0x24bfa4(0xdd3)])return;_0x5b3026[_0x24bfa4(0x734)][_0x24bfa4(0x738)][_0x24bfa4(0xa23)](this,_0x104c3d);}else this[_0x24bfa4(0xbba)]=null;}if(this[_0x24bfa4(0xbba)]){if(_0x24bfa4(0x48b)!==_0x24bfa4(0xc24))this[_0x24bfa4(0x54f)]=this[_0x24bfa4(0xbba)],this[_0x24bfa4(0x54f)]['_tpbState']='charged',this[_0x24bfa4(0xa53)]=!![],this[_0x24bfa4(0xbba)]=null;else return this[_0x24bfa4(0x6c6)]&&this['_actor']['canUseItemCommand']();}else this[_0x24bfa4(0x4e2)](),this['_currentActor']=null,this[_0x24bfa4(0xa53)]=![];},VisuMZ['BattleCore'][_0x57e85a(0x83b)]=BattleManager['isTpbMainPhase'],BattleManager['isTpbMainPhase']=function(){const _0x482279=_0x57e85a;if(this[_0x482279(0x5a1)]==='custom'){if('SSDwq'===_0x482279(0x623)){_0x3ca025[_0x482279(0x734)][_0x482279(0x707)][_0x482279(0xa23)](this,_0x39c4ac,_0x4b37cf);if(!_0x3b74c8[_0x482279(0x334)]())return;if(_0x58a16a[_0x482279(0x885)]!==_0xbaee63[_0x482279(0x91e)]())return;let _0x263c9e=_0x230ec2[_0x482279(0x7f4)];!this[_0x482279(0xc27)]()&&(_0x263c9e*=_0x308c83[_0x482279(0x459)](_0x4a07a3[_0x482279(0x885)]),_0x263c9e*=this[_0x482279(0x943)](_0x5bc39a)),_0x267a22[_0x482279(0x47c)]()<_0x263c9e&&(_0x3c0f12['_deathStateApplied']=!![],this[_0x482279(0x97c)](_0x579b81));}else return this[_0x482279(0x56d)]();}else return VisuMZ[_0x482279(0x734)][_0x482279(0x83b)][_0x482279(0xa23)](this);},BattleManager[_0x57e85a(0x56d)]=function(){return this['isActiveTpb']();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x3c7)]=BattleManager['cancelActorInput'],BattleManager[_0x57e85a(0x4e2)]=function(){const _0x1268a2=_0x57e85a;this[_0x1268a2(0xad6)]()&&this[_0x1268a2(0x5a1)]===_0x1268a2(0xbec)&&(this[_0x1268a2(0x54f)]=null),VisuMZ[_0x1268a2(0x734)][_0x1268a2(0x3c7)][_0x1268a2(0xa23)](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x364)]=BattleManager[_0x57e85a(0xdab)],BattleManager['inputtingAction']=function(){const _0x267eda=_0x57e85a,_0x4ec9eb=this[_0x267eda(0x54f)];if(_0x4ec9eb&&!_0x4ec9eb[_0x267eda(0xdab)]()){if(_0x267eda(0xdac)===_0x267eda(0xdac)){const _0x5be479=_0x4ec9eb[_0x267eda(0xc29)];_0x4ec9eb['_actions'][_0x5be479]=new Game_Action(_0x4ec9eb);}else this[_0x267eda(0x829)]()?_0x41eacd[_0x267eda(0x734)][_0x267eda(0x1e6)][_0x267eda(0xa23)](this):(this[_0x267eda(0x395)]=!this[_0x267eda(0xb9b)][_0x267eda(0xcf4)](),!this[_0x267eda(0x395)]&&(this[_0x267eda(0x6a4)]=0x0));}return VisuMZ[_0x267eda(0x734)]['BattleManager_inputtingAction'][_0x267eda(0xa23)](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x809)]=BattleManager[_0x57e85a(0xaf2)],BattleManager['checkSubstitute']=function(_0x1c5ee6){const _0x57467b=_0x57e85a;if(this[_0x57467b(0x577)][_0x57467b(0xd6b)]())return![];return VisuMZ[_0x57467b(0x734)]['BattleManager_checkSubstitute']['call'](this,_0x1c5ee6);},SceneManager[_0x57e85a(0x4b2)]=function(){const _0x10bed3=_0x57e85a;return this['_scene']&&this[_0x10bed3(0xd04)][_0x10bed3(0xd77)]===Scene_Battle;},SceneManager[_0x57e85a(0xc66)]=function(){const _0x4bddd8=_0x57e85a;return Spriteset_Battle[_0x4bddd8(0x16f)][_0x4bddd8(0x728)]();},SceneManager[_0x57e85a(0xda4)]=function(){const _0xf7437a=_0x57e85a;if(SceneManager[_0xf7437a(0x488)](Scene_Options))return!![];return![];},SceneManager[_0x57e85a(0xd0e)]=function(){const _0x4fef34=_0x57e85a;if(SceneManager[_0x4fef34(0xc46)](Scene_Options))return!![];return![];},SceneManager[_0x57e85a(0x5c2)]=function(_0x57538f){const _0x1113ea=_0x57e85a;if(!SceneManager[_0x1113ea(0x4b2)]())return!![];const _0x19ee75=['Scene_Options',_0x1113ea(0xa31)];return _0x19ee75[_0x1113ea(0x3af)](_0x57538f[_0x1113ea(0x7a3)]);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xadc)]=SceneManager[_0x57e85a(0x5fa)],SceneManager[_0x57e85a(0x5fa)]=function(_0x44c2dc){const _0x4f4673=_0x57e85a;if(!SceneManager[_0x4f4673(0x5c2)](_0x44c2dc)){if(_0x4f4673(0x42c)===_0x4f4673(0x42c))return this[_0x4f4673(0x400)](_0x44c2dc);else _0x45863b[_0x4f4673(0x484)]([_0x377beb]);}VisuMZ['BattleCore'][_0x4f4673(0xadc)][_0x4f4673(0xa23)](this,_0x44c2dc);},SceneManager['displayBattleCoreTransitionErrorMsg']=function(_0x2fff6d){const _0x16110f=_0x57e85a;if(!$gameTemp[_0x16110f(0x48c)]())return;if(this[_0x16110f(0x6bf)])return;this['_displayBattleCoreTransitionErrorMsg']=!![];let _0x3dea4d='';_0x3dea4d+=_0x16110f(0x4be),_0x3dea4d+=_0x16110f(0x995)['format'](_0x2fff6d['name']),alert(_0x3dea4d);},VisuMZ[_0x57e85a(0x734)]['Game_Temp_initialize']=Game_Temp[_0x57e85a(0x16f)][_0x57e85a(0x84c)],Game_Temp['prototype'][_0x57e85a(0x84c)]=function(){const _0x32cfb1=_0x57e85a;VisuMZ['BattleCore'][_0x32cfb1(0xba3)][_0x32cfb1(0xa23)](this),this[_0x32cfb1(0x9f2)]=[];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x6aa)]=Game_Temp[_0x57e85a(0x16f)]['requestAnimation'],Game_Temp[_0x57e85a(0x16f)][_0x57e85a(0x986)]=function(_0x1eeb4c,_0xb7305,_0x121789){const _0xca36ea=_0x57e85a;_0x1eeb4c=_0x1eeb4c['filter']((_0x460c6c,_0x4818bb,_0x17200d)=>_0x17200d[_0xca36ea(0x9b6)](_0x460c6c)===_0x4818bb);if(SceneManager['isSceneBattle']()&&SceneManager[_0xca36ea(0xc66)]()){if(_0xca36ea(0xab1)===_0xca36ea(0xdad))return-0x1;else _0x121789=!_0x121789;}VisuMZ['BattleCore'][_0xca36ea(0x6aa)][_0xca36ea(0xa23)](this,_0x1eeb4c,_0xb7305,_0x121789);if(SceneManager[_0xca36ea(0x4b2)]()){if(_0xca36ea(0x43f)==='vQtOo'){const _0xb72760=_0x197562[_0xca36ea(0x313)](_0x1b28c0['x'],_0x531a1f['y']);if(this[_0xca36ea(0x31e)]&&this['_regionBattleback1'][_0xb72760])return this[_0xca36ea(0x31e)][_0xb72760];}else BattleManager[_0xca36ea(0x78d)][_0xca36ea(0x705)]();}},Game_Temp[_0x57e85a(0x16f)][_0x57e85a(0x19c)]=function(_0x24eaf4){this['_lastPluginCommandInterpreter']=_0x24eaf4;},Game_Temp[_0x57e85a(0x16f)]['getLastPluginCommandInterpreter']=function(){const _0x1ba984=_0x57e85a;return this[_0x1ba984(0x431)];},Game_Temp[_0x57e85a(0x16f)][_0x57e85a(0x98f)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x57e85a(0x16f)][_0x57e85a(0x5e0)]=function(_0x198ec4){const _0x6cd328=_0x57e85a;$gameMap&&$dataMap&&$dataMap[_0x6cd328(0x40f)]&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x6cd328(0x40f)]);const _0x3ec4b5=$dataTroops[_0x198ec4];if(_0x3ec4b5){let _0x436b1b=DataManager[_0x6cd328(0x7a6)](_0x3ec4b5['id']);this[_0x6cd328(0x3c8)](_0x436b1b);}},Game_Temp[_0x57e85a(0x16f)][_0x57e85a(0x3c8)]=function(_0x5bb72a){const _0xe0164b=_0x57e85a;if(!_0x5bb72a)return;if(_0x5bb72a[_0xe0164b(0x392)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x1348bd=String(RegExp['$1']);if(_0x1348bd[_0xe0164b(0x392)](/DEFAULT/i)){if(_0xe0164b(0xcdc)!==_0xe0164b(0xcdc)){const _0x1a51cd=_0x91dbda[_0xe0164b(0x734)][_0xe0164b(0x478)][_0xe0164b(0xcab)],_0x475c75=_0x50b31d[_0xe0164b(0x16f)][_0xe0164b(0x765)](),_0x490b0a=_0x571f70['boxWidth']-(_0x1a51cd['CommandWidth']||0xc0),_0x4f54ab=this[_0xe0164b(0x1b0)]()+_0x475c75,_0xc3b021=this['isRightInputMode']()?0x0:_0x558009[_0xe0164b(0x418)]-_0x490b0a,_0x560c82=_0x161745['boxHeight']-_0x4f54ab+_0x475c75;return new _0x36ae6a(_0xc3b021,_0x560c82,_0x490b0a,_0x4f54ab);}else this[_0xe0164b(0xb2b)]=_0xe0164b(0xd1f);}else{if(_0x1348bd['match'](/LIST/i))this[_0xe0164b(0xb2b)]=_0xe0164b(0x7df);else{if(_0x1348bd[_0xe0164b(0x392)](/XP/i))_0xe0164b(0xcda)===_0xe0164b(0x196)?(_0x496cf0['removeCurrentAction'](),this[_0xe0164b(0x9ec)]()):this[_0xe0164b(0xb2b)]='xp';else{if(_0x1348bd[_0xe0164b(0x392)](/PORTRAIT/i))this['_forcedBattleLayout']=_0xe0164b(0x801);else{if(_0x1348bd['match'](/BORDER/i))this[_0xe0164b(0xb2b)]='border';else{if(_0x1348bd[_0xe0164b(0x392)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported[_0xe0164b(0xb06)])this[_0xe0164b(0xb2b)]=_0xe0164b(0xd9e);else{if('eRPiZ'!=='eRPiZ'){const _0x44fb76=_0x231f73[_0xe0164b(0x734)][_0xe0164b(0x478)][_0xe0164b(0xcab)],_0x3cc3d7=_0x44fb76[_0xe0164b(0xbdf)]||0xc0,_0x361b9d=this[_0xe0164b(0x1b0)](),_0x108119=this[_0xe0164b(0x184)]()?_0x48276d[_0xe0164b(0x418)]-_0x3cc3d7:0x0,_0xf80025=_0x58e1f6[_0xe0164b(0x85e)]-_0x361b9d;return new _0x204ca3(_0x108119,_0xf80025,_0x3cc3d7,_0x361b9d);}else this['_forcedBattleLayout']=_0xe0164b(0xd1f);}}else _0x1348bd['match'](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0xe0164b(0xba9)]?this[_0xe0164b(0xb2b)]=_0xe0164b(0x1ba):this[_0xe0164b(0xb2b)]='default');}}}}}}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x268)]=Game_Temp[_0x57e85a(0x16f)][_0x57e85a(0x1bb)],Game_Temp[_0x57e85a(0x16f)][_0x57e85a(0x1bb)]=function(_0xf6ce96,_0x1ef918){const _0x22c05a=_0x57e85a;if(SceneManager[_0x22c05a(0x4b2)]()){if(_0x22c05a(0x1ce)===_0x22c05a(0x1ce))this[_0x22c05a(0x385)](_0xf6ce96,_0x1ef918);else return _0x1a082a[_0x22c05a(0x734)]['Settings'][_0x22c05a(0x573)][_0x22c05a(0x528)][_0x22c05a(0xa23)](this,_0x1a17e3,_0xfe8661);}else VisuMZ['BattleCore'][_0x22c05a(0x268)][_0x22c05a(0xa23)](this,_0xf6ce96,_0x1ef918);},Game_Temp[_0x57e85a(0x16f)]['requestBattleBalloon']=function(_0x54b8b3,_0x4fd6b8){const _0x5bd5ad=_0x57e85a,_0xc55895={'target':_0x54b8b3,'balloonId':_0x4fd6b8};this[_0x5bd5ad(0x9f2)]=this[_0x5bd5ad(0x9f2)]||[],this['_battleBalloonQueue'][_0x5bd5ad(0x5fa)](_0xc55895);},Game_Temp['prototype']['retrieveBattleBalloon']=function(){const _0x16c687=_0x57e85a;return this[_0x16c687(0x9f2)]=this['_battleBalloonQueue']||[],this[_0x16c687(0x9f2)][_0x16c687(0x4d6)]();},Game_Temp[_0x57e85a(0x16f)][_0x57e85a(0xd31)]=function(){const _0x4b84fb=_0x57e85a;this[_0x4b84fb(0x9f2)]=[];},Spriteset_Battle['prototype']['updateBattleBalloons']=function(){const _0x454307=_0x57e85a;this['_battleBalloonSprites']===undefined&&(this[_0x454307(0x5bf)]=[]);for(const _0x4e7c45 of this[_0x454307(0x5bf)]){if(_0x454307(0x939)==='NodHu'){const _0x252b40=this[_0x454307(0xb67)]();if(_0x252b40>=0x0){const _0x3bbadf=this[_0x454307(0x1c0)]()?_0x454307(0x7ae):_0x454307(0x8be);_0x4fd0be[_0x454307(0x2c6)](_0x3bbadf);}}else!_0x4e7c45[_0x454307(0xa6f)]()&&this[_0x454307(0xa05)](_0x4e7c45);}this[_0x454307(0x8f4)]();},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x8f4)]=function(){const _0x6b3dff=_0x57e85a;for(;;){const _0x447e7a=$gameTemp['retrieveBattleBalloon']();if(_0x447e7a){if('tJUtY'===_0x6b3dff(0xb73)){if(!_0x57ca7f['isSceneBattle']())return;if(_0x11f0d3[_0x6b3dff(0x2b4)]())return;if(!this['_damagePopupArray'])this[_0x6b3dff(0xb83)]();this[_0x6b3dff(0x206)]();const _0x565982=this[_0x6b3dff(0x3ab)]();if(_0x565982)_0x565982[_0x6b3dff(0x84d)]();}else this[_0x6b3dff(0x8c7)](_0x447e7a);}else break;}},Spriteset_Battle[_0x57e85a(0x16f)]['createBattleBalloon']=function(_0x4ebdfe){const _0x5cecdb=_0x57e85a,_0x348a7d=this[_0x5cecdb(0x8df)](_0x4ebdfe['target']);if(_0x348a7d){if('yGJyL'!=='ISZPP'){let _0x2fd3c0=null;if(Imported[_0x5cecdb(0xc7c)]&&Array[_0x5cecdb(0xd7c)](_0x4ebdfe[_0x5cecdb(0x6a1)]))_0x2fd3c0=new Sprite_IconBalloon();else{if(_0x5cecdb(0x1fa)!==_0x5cecdb(0x1fa)){if(!_0xe204db)return 0x0;let _0x143f31=0x0;const _0x35b6e9=_0x590d7a[_0x5cecdb(0x40f)];return _0x35b6e9['match'](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x143f31+=_0x254184(_0x14e9ad['$1'])),_0x35b6e9[_0x5cecdb(0x392)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x143f31+=_0xf20ce0(_0x145ca6['$1'])),_0x143f31;}else _0x2fd3c0=new Sprite_Balloon();}_0x2fd3c0[_0x5cecdb(0x7a7)]=_0x4ebdfe[_0x5cecdb(0x162)],_0x2fd3c0[_0x5cecdb(0x3be)]=_0x348a7d,_0x2fd3c0[_0x5cecdb(0x3be)][_0x5cecdb(0x22a)]=_0x348a7d,_0x2fd3c0[_0x5cecdb(0xb62)](_0x348a7d,_0x4ebdfe[_0x5cecdb(0x6a1)]),BattleManager['addChildToUiContainer'](_0x2fd3c0),this[_0x5cecdb(0x5bf)][_0x5cecdb(0x5fa)](_0x2fd3c0);}else _0x2078b2+=_0x545c33;}},Spriteset_Battle['prototype'][_0x57e85a(0xa05)]=function(_0xe4c02b){const _0x94c0f0=_0x57e85a;this[_0x94c0f0(0x5bf)]['remove'](_0xe4c02b),BattleManager[_0x94c0f0(0x202)](_0xe4c02b),_0xe4c02b[_0x94c0f0(0xd2b)]();},Sprite_Battler['prototype'][_0x57e85a(0x655)]=function(_0x1f10ff,_0xb67c84){},Sprite_Battler['prototype'][_0x57e85a(0xe03)]=function(){return![];},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x9e3)]=function(){const _0x9f5a41=_0x57e85a;return this['_battleBalloonSprites']=this[_0x9f5a41(0x5bf)]||[],this[_0x9f5a41(0x5bf)][_0x9f5a41(0xd36)]>0x0;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xd3e)]=Game_System[_0x57e85a(0x16f)][_0x57e85a(0x84c)],Game_System[_0x57e85a(0x16f)][_0x57e85a(0x84c)]=function(){const _0x2d526f=_0x57e85a;VisuMZ['BattleCore'][_0x2d526f(0xd3e)][_0x2d526f(0xa23)](this),this[_0x2d526f(0x4a8)]();},Game_System[_0x57e85a(0x16f)][_0x57e85a(0x4a8)]=function(){const _0x50d83e=_0x57e85a;this[_0x50d83e(0x89c)]=this[_0x50d83e(0x89c)]||[];},Game_System['prototype'][_0x57e85a(0xa2a)]=function(){const _0x453ce4=_0x57e85a;if(this[_0x453ce4(0x89c)]===undefined)this[_0x453ce4(0x4a8)]();return this[_0x453ce4(0x89c)];},Game_System['prototype'][_0x57e85a(0xd1e)]=function(_0x2cafcf){const _0x1211cd=_0x57e85a;if(this[_0x1211cd(0x89c)]===undefined)this['initBattleCore']();if(!_0x2cafcf)return;if(this[_0x1211cd(0x89c)]['includes'](_0x2cafcf))return;this[_0x1211cd(0x89c)][_0x1211cd(0x5fa)](_0x2cafcf),this[_0x1211cd(0x89c)][_0x1211cd(0x494)]((_0x235b63,_0x482306)=>_0x235b63-_0x482306);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x798)]=Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x21f)],Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x21f)]=function(_0x3a39f1){const _0x3c8c16=_0x57e85a,_0x187bf8=this[_0x3c8c16(0x2e0)](),_0xdd6b1a=this['stateMotionIndex']();VisuMZ[_0x3c8c16(0x734)][_0x3c8c16(0x798)]['call'](this,_0x3a39f1),this[_0x3c8c16(0xd89)]()&&_0x187bf8&&this['isDead']()&&(this[_0x3c8c16(0xaed)]=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x3c8c16(0xd1e)](this[_0x3c8c16(0xacb)]())),SceneManager[_0x3c8c16(0x4b2)]()&&_0xdd6b1a!==this[_0x3c8c16(0x2eb)]()&&('qQCbT'!==_0x3c8c16(0x76d)?(this['x']=_0x9491eb[_0x3c8c16(0x92a)](_0x36bbb5[_0x3c8c16(0x418)]/0x2),this['y']=_0x350ded[_0x3c8c16(0x92a)](_0x28a34f['boxHeight']/0x2)):this['battler']()&&this['battler']()[_0x3c8c16(0x88c)]());},Game_Enemy['prototype']['hasBeenDefeatedBefore']=function(){const _0x1a79bd=_0x57e85a;return $gameSystem[_0x1a79bd(0xa2a)]()['includes'](this[_0x1a79bd(0xc34)]);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x99c)]=Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x224)],Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x224)]=function(_0x253978){const _0x322f93=_0x57e85a;VisuMZ[_0x322f93(0x734)]['Game_BattlerBase_eraseState'][_0x322f93(0xa23)](this,_0x253978),this['isEnemy']()&&_0x253978===this['deathStateId']()&&this[_0x322f93(0x2e0)]()&&(this[_0x322f93(0xaed)]=![]),!this['_tempActor']&&!this[_0x322f93(0xd87)]&&SceneManager['isSceneBattle']()&&(_0x322f93(0x6e2)===_0x322f93(0x6e2)?this[_0x322f93(0x26a)]():this[_0x322f93(0x87a)]()&&this[_0x322f93(0x9fb)]['refreshMotion']());},VisuMZ[_0x57e85a(0x734)]['Game_Action_clear']=Game_Action[_0x57e85a(0x16f)]['clear'],Game_Action['prototype']['clear']=function(){const _0x51ddac=_0x57e85a;VisuMZ['BattleCore']['Game_Action_clear'][_0x51ddac(0xa23)](this),this[_0x51ddac(0x819)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x51ddac(0x4e6)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']='default',this[_0x51ddac(0xa08)]();},Game_Action['prototype'][_0x57e85a(0xa08)]=function(){this['_targetBattlerKey']='';},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x778)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x493)],Game_Action['prototype']['setSubject']=function(_0x301c17){const _0x4b7f02=_0x57e85a;VisuMZ[_0x4b7f02(0x734)][_0x4b7f02(0x778)][_0x4b7f02(0xa23)](this,_0x301c17),this[_0x4b7f02(0xa08)]();},VisuMZ[_0x57e85a(0x734)]['Game_Action_setSkill']=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x28d)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x28d)]=function(_0x4099a2){const _0x568726=_0x57e85a;VisuMZ[_0x568726(0x734)][_0x568726(0x7e5)][_0x568726(0xa23)](this,_0x4099a2),this['clearTargetBattlerKey']();},VisuMZ[_0x57e85a(0x734)]['Game_Action_setItem']=Game_Action['prototype'][_0x57e85a(0x182)],Game_Action['prototype']['setItem']=function(_0x2151d5){const _0x1a65da=_0x57e85a;VisuMZ['BattleCore']['Game_Action_setItem']['call'](this,_0x2151d5),this[_0x1a65da(0xa08)]();},Game_Action[_0x57e85a(0x16f)]['makeDamageValue']=function(_0xb2c0a3,_0x16896a){const _0x445f8d=_0x57e85a;return VisuMZ[_0x445f8d(0x734)][_0x445f8d(0x478)][_0x445f8d(0x573)]['OverallFormulaJS'][_0x445f8d(0xa23)](this,_0xb2c0a3,_0x16896a);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x1bf)]=function(_0x410d45,_0x4c7ffb){const _0x40537d=_0x57e85a;return VisuMZ[_0x40537d(0x734)][_0x40537d(0x478)][_0x40537d(0x573)][_0x40537d(0x71f)]['call'](this,_0x410d45,_0x4c7ffb);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xa60)]=function(_0x375a98,_0x82ddc1){const _0x17ff43=_0x57e85a;return VisuMZ[_0x17ff43(0x734)][_0x17ff43(0x478)][_0x17ff43(0x573)]['GuardFormulaJS'][_0x17ff43(0xa23)](this,_0x375a98,_0x82ddc1);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x4c4)]=Game_Action['prototype'][_0x57e85a(0x396)],Game_Action['prototype']['itemHit']=function(_0x571a5c){const _0xf3bf1=_0x57e85a,_0x11041f=this['item']()[_0xf3bf1(0x40f)];if(_0x11041f['match'](/<ALWAYS HIT>/i)){if(_0xf3bf1(0xa9b)===_0xf3bf1(0xa9b))return 0x1;else this['setup'](this[_0xf3bf1(0xa7d)][_0xf3bf1(0xb08)]);}else{if(_0x11041f[_0xf3bf1(0x392)](/<ALWAYS HIT RATE: (\d+)([%％])>/i)){if(_0xf3bf1(0xaca)!=='QaLCc')this[_0xf3bf1(0xa05)](_0xb874d5);else return Number(RegExp['$1'])/0x64;}else{if(_0xf3bf1(0xaa8)===_0xf3bf1(0xb2d)){if(_0x1676bd[_0xf3bf1(0x4b2)]()){const _0xeff071=this[_0xf3bf1(0x3ab)]();if(_0xeff071)_0xeff071[_0xf3bf1(0x97e)](_0x2f83d4);}}else{let _0x298fae=VisuMZ['BattleCore'][_0xf3bf1(0x4c4)]['call'](this,_0x571a5c);return _0x298fae=this[_0xf3bf1(0x4e6)][_0xf3bf1(0x7d8)]*_0x298fae+this[_0xf3bf1(0x4e6)][_0xf3bf1(0x498)],_0x298fae;}}}},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x784)]=function(_0x16d3b8){const _0x416c8d=_0x57e85a;if(!this['item']()[_0x416c8d(0x356)][_0x416c8d(0x2be)])return 0x0;let _0x21cb71=VisuMZ[_0x416c8d(0x734)][_0x416c8d(0x478)][_0x416c8d(0x573)][_0x416c8d(0xa8e)][_0x416c8d(0xa23)](this,_0x16d3b8);return _0x21cb71=this[_0x416c8d(0x4e6)][_0x416c8d(0x50a)]*_0x21cb71+this[_0x416c8d(0x4e6)][_0x416c8d(0xbc4)],_0x21cb71;},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x2b1)]=function(_0x351fb9){const _0x935c49=_0x57e85a;return _0x351fb9=VisuMZ['BattleCore']['Settings'][_0x935c49(0x573)][_0x935c49(0x9cf)]['call'](this,_0x351fb9),_0x351fb9=this['_multipliers'][_0x935c49(0xa0b)]*_0x351fb9+this[_0x935c49(0x4e6)]['criticalDmgFlat'],_0x351fb9;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x483)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x6ef)],Game_Action[_0x57e85a(0x16f)]['evalDamageFormula']=function(_0x1022f8){const _0x5593d6=_0x57e85a;if(this[_0x5593d6(0x53e)]!=='default')return this[_0x5593d6(0xe15)](_0x1022f8);else{if(DataManager[_0x5593d6(0x546)](this['item']())===_0x5593d6(0x7f1)){if(_0x5593d6(0x75d)!==_0x5593d6(0x75d))this[_0x5593d6(0x75a)]();else return VisuMZ['BattleCore'][_0x5593d6(0x483)][_0x5593d6(0xa23)](this,_0x1022f8);}else return this[_0x5593d6(0xaa4)](_0x1022f8);}},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x967)]=function(_0x32e2b3){const _0x2f7735=_0x57e85a;this[_0x2f7735(0x53e)]=_0x32e2b3;},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xe15)]=function(_0x4d1db4){const _0x4d90fd=_0x57e85a,_0x3cab55=this[_0x4d90fd(0x2df)](),_0x2c0ef4=_0x3cab55[_0x4d90fd(0x356)][_0x4d90fd(0x726)];_0x3cab55[_0x4d90fd(0x356)][_0x4d90fd(0x726)]=this['_customDamageFormula'];let _0x44c63c=VisuMZ[_0x4d90fd(0x734)][_0x4d90fd(0x483)][_0x4d90fd(0xa23)](this,_0x4d1db4);return _0x3cab55[_0x4d90fd(0x356)][_0x4d90fd(0x726)]=_0x2c0ef4,_0x44c63c;},Game_Action[_0x57e85a(0x16f)]['damageStyle']=function(){const _0x1c79fb=_0x57e85a;if(this[_0x1c79fb(0x2df)]()[_0x1c79fb(0x40f)][_0x1c79fb(0x392)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x586367=String(RegExp['$1'])[_0x1c79fb(0x307)]()[_0x1c79fb(0xdf5)]();return _0x586367;}return _0x1c79fb(0x7f1);},Game_Action['prototype'][_0x57e85a(0xaa4)]=function(_0x17ce39){const _0x56b021=_0x57e85a,_0x50cdab=DataManager[_0x56b021(0x546)](this[_0x56b021(0x2df)]()),_0x44f06a=VisuMZ['DamageStyles'][_0x50cdab];try{return _0x44f06a[_0x56b021(0xb96)][_0x56b021(0xa23)](this,_0x17ce39);}catch(_0x28cb3d){if($gameTemp[_0x56b021(0x48c)]())console['log'](_0x28cb3d);return VisuMZ['BattleCore']['Game_Action_evalDamageFormula'][_0x56b021(0xa23)](this);}},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xc43)]=function(_0x1e17b9,_0x4dfbde){const _0x1adbf4=_0x57e85a;if(this[_0x1adbf4(0xc27)]())return _0x4dfbde;const _0x2d85ae=this[_0x1adbf4(0xbe8)](),_0x111647=_0x1e17b9;let _0x550f07=[],_0x1f3465=[];_0x550f07[_0x1adbf4(0x5fa)](this[_0x1adbf4(0x819)][_0x1adbf4(0xd23)],this[_0x1adbf4(0x819)]['arRedFlat']),_0x1f3465[_0x1adbf4(0x5fa)](this[_0x1adbf4(0x819)][_0x1adbf4(0xe09)],this[_0x1adbf4(0x819)][_0x1adbf4(0x949)]);const _0xde921=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5dd92a=this[_0x1adbf4(0xd06)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0xa41337=this[_0x1adbf4(0xd06)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x8d6367=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x550f07=_0x550f07[_0x1adbf4(0x60f)](_0x111647[_0x1adbf4(0x7c9)]()['map'](_0x11a780=>_0x11a780&&_0x11a780[_0x1adbf4(0x40f)][_0x1adbf4(0x392)](_0xde921)?Number(RegExp['$1']):0x0)),_0x1f3465=_0x1f3465[_0x1adbf4(0x60f)](_0x111647[_0x1adbf4(0x7c9)]()[_0x1adbf4(0x260)](_0x49844c=>_0x49844c&&_0x49844c[_0x1adbf4(0x40f)][_0x1adbf4(0x392)](_0x5dd92a)?Number(RegExp['$1'])/0x64:0x0)),_0x550f07=_0x550f07[_0x1adbf4(0x60f)](_0x2d85ae[_0x1adbf4(0x7c9)]()['map'](_0x308eeb=>_0x308eeb&&_0x308eeb[_0x1adbf4(0x40f)][_0x1adbf4(0x392)](_0xa41337)?Number(RegExp['$1']):0x0)),_0x1f3465=_0x1f3465[_0x1adbf4(0x60f)](_0x2d85ae['traitObjects']()['map'](_0x35a796=>_0x35a796&&_0x35a796['note']['match'](_0x8d6367)?Number(RegExp['$1'])/0x64:0x0)),this[_0x1adbf4(0x2df)]()[_0x1adbf4(0x40f)][_0x1adbf4(0x392)](_0xa41337)&&_0x550f07[_0x1adbf4(0x5fa)](Number(RegExp['$1'])),this[_0x1adbf4(0x2df)]()['note'][_0x1adbf4(0x392)](_0x8d6367)&&_0x1f3465[_0x1adbf4(0x5fa)](Number(RegExp['$1'])),_0x4dfbde=_0x550f07[_0x1adbf4(0xba1)]((_0x1ff83d,_0x5178de)=>_0x1ff83d-_0x5178de,_0x4dfbde),_0x4dfbde>0x0&&(_0x4dfbde=_0x1f3465[_0x1adbf4(0xba1)]((_0x1fb07e,_0x347408)=>_0x1fb07e*(0x1-_0x347408),_0x4dfbde)),_0x4dfbde;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x3ce)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x2a6)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x2a6)]=function(_0x5cb3f4,_0x34b7cf){const _0xcca1dc=_0x57e85a;_0x34b7cf=_0x34b7cf*this[_0xcca1dc(0x4e6)][_0xcca1dc(0x401)],_0x34b7cf+=this['_multipliers'][_0xcca1dc(0x247)]*(_0x34b7cf>=0x0?0x1:-0x1),_0x34b7cf=this[_0xcca1dc(0xb4e)](_0xcca1dc(0x4c5),_0x5cb3f4,_0x34b7cf,![]),_0x34b7cf=this[_0xcca1dc(0xa3f)](_0x34b7cf),_0x34b7cf=Math[_0xcca1dc(0x92a)](_0x34b7cf),this['_executedValue']=_0x34b7cf,this['_totalValue']=this['_totalValue']||0x0,this[_0xcca1dc(0xe1b)]+=_0x34b7cf,VisuMZ[_0xcca1dc(0x734)][_0xcca1dc(0x3ce)]['call'](this,_0x5cb3f4,_0x34b7cf),this[_0xcca1dc(0xb4e)](_0xcca1dc(0x368),_0x5cb3f4,_0x34b7cf,!![]);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xa3f)]=function(_0x314f20){const _0x1ceb41=_0x57e85a;if(this[_0x1ceb41(0x4c1)]())return _0x314f20;return _0x314f20=this[_0x1ceb41(0x38b)](_0x314f20),_0x314f20=this[_0x1ceb41(0x9ab)](_0x314f20),_0x314f20;},Game_Action['prototype'][_0x57e85a(0x4c1)]=function(){const _0x89fce0=_0x57e85a,_0x4aa850=/<BYPASS DAMAGE CAP>/i;if(this[_0x89fce0(0x2df)]()['note'][_0x89fce0(0x392)](_0x4aa850))return!![];if(this[_0x89fce0(0xbe8)]()[_0x89fce0(0x7c9)]()[_0x89fce0(0x54d)](_0x174489=>_0x174489&&_0x174489[_0x89fce0(0x40f)][_0x89fce0(0x392)](_0x4aa850)))return!![];return!VisuMZ[_0x89fce0(0x734)]['Settings'][_0x89fce0(0x573)][_0x89fce0(0xdea)];},Game_Action['prototype'][_0x57e85a(0x38b)]=function(_0x10c5d8){const _0x30c9e0=_0x57e85a;if(!VisuMZ[_0x30c9e0(0x734)][_0x30c9e0(0x478)]['Damage'][_0x30c9e0(0x9b9)])return _0x10c5d8;const _0x5409ee=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x30c9e0(0x2df)]()[_0x30c9e0(0x40f)]['match'](_0x5409ee))return _0x10c5d8;if(this['subject']()[_0x30c9e0(0x7c9)]()[_0x30c9e0(0x54d)](_0x50dece=>_0x50dece&&_0x50dece[_0x30c9e0(0x40f)][_0x30c9e0(0x392)](_0x5409ee)))return _0x10c5d8;const _0x17c591=_0x10c5d8<0x0?-0x1:0x1;_0x10c5d8=Math['abs'](_0x10c5d8);let _0x167e23=this['subject']()[_0x30c9e0(0x846)]();this[_0x30c9e0(0x2df)]()[_0x30c9e0(0x40f)][_0x30c9e0(0x392)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x167e23+=Number(RegExp['$1'])/0x64);_0x167e23=_0x167e23[_0x30c9e0(0x1fc)](0.01,0x1);const _0x124d92=this[_0x30c9e0(0xa35)](),_0x3b2ca1=_0x167e23*_0x124d92;if(_0x10c5d8>_0x3b2ca1&&_0x124d92>_0x3b2ca1){_0x10c5d8-=_0x3b2ca1;const _0x1aabe4=VisuMZ[_0x30c9e0(0x734)][_0x30c9e0(0x478)][_0x30c9e0(0x573)][_0x30c9e0(0x15f)],_0x170c01=Math['max'](0x1-_0x10c5d8/((_0x124d92-_0x3b2ca1)*_0x1aabe4+_0x10c5d8),0.01);_0x10c5d8*=_0x170c01,_0x10c5d8+=_0x3b2ca1;}return _0x10c5d8*_0x17c591;},Game_Action['prototype'][_0x57e85a(0xa35)]=function(){const _0x1783a7=_0x57e85a;if(this[_0x1783a7(0x2df)]()[_0x1783a7(0x40f)][_0x1783a7(0x392)](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0x1783a7(0x3e8)==='auEVY')_0x115a01['x']=_0x2b07b9['x']+_0xd941f[_0x1783a7(0x249)]*_0x50c83a,_0x340f4c['y']=_0x236cfe['y']+_0x1c0ef4[_0x1783a7(0x74c)];else return Number(RegExp['$1']);}else return this[_0x1783a7(0xbe8)]()[_0x1783a7(0x983)]();},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x9ab)]=function(_0x3fbc76){const _0xa41122=_0x57e85a;let _0x3c1f7c=this['getHardDamageCap']();return _0x3fbc76[_0xa41122(0x1fc)](-_0x3c1f7c,_0x3c1f7c);},Game_Action[_0x57e85a(0x16f)]['shouldDisperseDamage']=function(){const _0x30fed8=_0x57e85a;if(!this['item']())return![];if(!$gameParty[_0x30fed8(0x358)]())return![];return(this[_0x30fed8(0x2df)]()['note']||'')[_0x30fed8(0x392)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x8a3)]=function(_0x23f217){const _0x41659b=_0x57e85a;if(this[_0x41659b(0xdc9)]()){let _0x269d38=BattleManager[_0x41659b(0x73c)];_0x23f217/=_0x269d38[_0x41659b(0xd36)];if(this['isAttack']()){if('IUxwi'!==_0x41659b(0xb17))_0x23f217*=this[_0x41659b(0xbe8)]()[_0x41659b(0x6ab)]()+0x1;else{if(!_0x352df2[_0x41659b(0xe14)]())return;const _0x12b87b=this[_0x41659b(0x3ab)]();if(!_0x12b87b)return;_0x12b87b[_0x41659b(0x2d9)](_0x5afd0c,_0x4e5d67);}}_0x23f217=_0x23f217>0x0?Math[_0x41659b(0x8a8)](_0x23f217):Math[_0x41659b(0x7f8)](_0x23f217);}return _0x23f217;},VisuMZ['BattleCore'][_0x57e85a(0x4ca)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x66f)],Game_Action['prototype'][_0x57e85a(0x66f)]=function(_0xce722c,_0x97442b){const _0x3a619f=_0x57e85a;let _0x2696cf=VisuMZ[_0x3a619f(0x734)][_0x3a619f(0x4ca)][_0x3a619f(0xa23)](this,_0xce722c,_0x97442b);return this['disperseDamage'](_0x2696cf);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xc3e)]=function(_0x351789,_0x208eea){const _0x33dd09=_0x57e85a;let _0x1816c4=(_0x351789[_0x33dd09(0xbe0)]*_0x208eea[_0x33dd09(0x7f4)]+_0x208eea[_0x33dd09(0xd57)])*_0x351789[_0x33dd09(0x236)];_0x1816c4=this[_0x33dd09(0x8a3)](_0x1816c4),this[_0x33dd09(0x68b)]()&&('SPYGK'===_0x33dd09(0x74a)?_0x5961bd=_0x349518>=_0x3fbe17?_0x54a89c:_0x561497:_0x1816c4*=this[_0x33dd09(0xbe8)]()['pha']),_0x1816c4=Math[_0x33dd09(0x7f8)](_0x1816c4),_0x1816c4!==0x0&&(_0x351789['gainHp'](_0x1816c4),this['makeSuccess'](_0x351789));},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x47b)]=function(_0x20a4db,_0x363468){const _0x1d9495=_0x57e85a;let _0x581d52=(_0x20a4db['mmp']*_0x363468[_0x1d9495(0x7f4)]+_0x363468['value2'])*_0x20a4db[_0x1d9495(0x236)];_0x581d52=this[_0x1d9495(0x8a3)](_0x581d52);this['isItem']()&&(_0x581d52*=this[_0x1d9495(0xbe8)]()[_0x1d9495(0x2a2)]);_0x581d52=Math['floor'](_0x581d52);if(_0x581d52!==0x0){if(_0x1d9495(0x374)==='ACXSL')_0x20a4db[_0x1d9495(0x65e)](_0x581d52),this[_0x1d9495(0x97c)](_0x20a4db);else return this[_0x1d9495(0x3ee)]();}},Game_Action[_0x57e85a(0x16f)]['itemEffectGainTp']=function(_0x3e31f9,_0x2654da){const _0x3be351=_0x57e85a;let _0x4629e9=Math[_0x3be351(0x7f8)](_0x2654da[_0x3be351(0x7f4)]);_0x4629e9=this[_0x3be351(0x8a3)](_0x4629e9),_0x4629e9!==0x0&&(_0x3e31f9[_0x3be351(0x640)](_0x4629e9),this[_0x3be351(0x97c)](_0x3e31f9));},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x2a7)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x8bb)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x8bb)]=function(_0x3281ba){const _0x187ae1=_0x57e85a;this[_0x187ae1(0xb4e)](_0x187ae1(0x794),_0x3281ba,0x0,!![]),VisuMZ['BattleCore'][_0x187ae1(0x2a7)][_0x187ae1(0xa23)](this,_0x3281ba),this['applyBattleCoreJS'](_0x187ae1(0x9d0),_0x3281ba,this[_0x187ae1(0xb68)]||0x0,!![]),this[_0x187ae1(0x53b)](_0x3281ba);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xb4e)]=function(_0x3b6db8,_0x56b5d7,_0x42ca62,_0x24b4b4){const _0x363ad7=_0x57e85a;if(this[_0x363ad7(0xd87)]||this[_0x363ad7(0x3a9)])return;_0x42ca62=_0x42ca62||0x0;const _0x294ac5=_0x42ca62,_0x14c7b4=VisuMZ[_0x363ad7(0x734)][_0x363ad7(0x478)][_0x363ad7(0x5ad)],_0x505302=_0x3b6db8[_0x363ad7(0x554)]('');if(_0x14c7b4[_0x505302]){_0x42ca62=_0x14c7b4[_0x505302][_0x363ad7(0xa23)](this,_0x42ca62,_0x56b5d7);if(_0x24b4b4)_0x42ca62=_0x294ac5;}let _0x19410b=VisuMZ[_0x363ad7(0x734)]['createKeyJS'](this[_0x363ad7(0x2df)](),_0x3b6db8[_0x363ad7(0x554)](''));if(VisuMZ[_0x363ad7(0x734)]['JS'][_0x19410b]){_0x42ca62=VisuMZ[_0x363ad7(0x734)]['JS'][_0x19410b][_0x363ad7(0xa23)](this,this[_0x363ad7(0xbe8)](),_0x56b5d7,this['item'](),_0x42ca62);if(_0x24b4b4)_0x42ca62=_0x294ac5;}for(const _0x4b33aa of this[_0x363ad7(0xbe8)]()[_0x363ad7(0x7c9)]()){if(_0x363ad7(0x4a7)==='BixNk'){if(!_0x2fed38[_0x363ad7(0x4b2)]())return;_0x3ea1c5['_scene'][_0x363ad7(0x1b9)](this),_0x37bdd1[_0x363ad7(0x16f)][_0x363ad7(0xd2e)][_0x363ad7(0xa23)](this);}else{if(!_0x4b33aa)continue;_0x19410b=VisuMZ[_0x363ad7(0x734)]['createKeyJS'](_0x4b33aa,_0x3b6db8['format'](_0x363ad7(0xb55)));if(VisuMZ[_0x363ad7(0x734)]['JS'][_0x19410b]){_0x42ca62=VisuMZ['BattleCore']['JS'][_0x19410b]['call'](this,this[_0x363ad7(0xbe8)](),_0x56b5d7,_0x4b33aa,_0x42ca62);if(_0x24b4b4)_0x42ca62=_0x294ac5;}}}for(const _0x39d98f of _0x56b5d7['traitObjects']()){if(!_0x39d98f)continue;_0x19410b=VisuMZ[_0x363ad7(0x734)]['createKeyJS'](_0x39d98f,_0x3b6db8[_0x363ad7(0x554)]('AsTarget'));if(VisuMZ[_0x363ad7(0x734)]['JS'][_0x19410b]){_0x42ca62=VisuMZ[_0x363ad7(0x734)]['JS'][_0x19410b][_0x363ad7(0xa23)](this,this[_0x363ad7(0xbe8)](),_0x56b5d7,_0x39d98f,_0x42ca62);if(_0x24b4b4)_0x42ca62=_0x294ac5;}}return _0x42ca62;},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x6dc)]=function(_0x5b2f98){const _0x351b1e=_0x57e85a,_0xe47bef=this[_0x351b1e(0xe1b)]||0x0,_0x308879=VisuMZ[_0x351b1e(0x734)][_0x351b1e(0x478)][_0x351b1e(0x5ad)],_0x44bda1=_0x5b2f98[_0x351b1e(0x554)]('');_0x308879[_0x44bda1]&&('QpfiT'===_0x351b1e(0x767)?_0x308879[_0x44bda1][_0x351b1e(0xa23)](this,_0xe47bef):(_0x2bc64f[_0x351b1e(0x734)]['Scene_Battle_start'][_0x351b1e(0xa23)](this),_0x36e44f[_0x351b1e(0x38f)]()));let _0x1602c9=VisuMZ[_0x351b1e(0x734)][_0x351b1e(0x8b5)](this[_0x351b1e(0x2df)](),_0x5b2f98);VisuMZ[_0x351b1e(0x734)]['JS'][_0x1602c9]&&VisuMZ[_0x351b1e(0x734)]['JS'][_0x1602c9]['call'](this,this[_0x351b1e(0xbe8)](),this[_0x351b1e(0xbe8)](),this['item'](),_0xe47bef);for(const _0x1b2337 of this['subject']()[_0x351b1e(0x7c9)]()){if(_0x351b1e(0x8ef)!==_0x351b1e(0xdfa)){if(!_0x1b2337)continue;_0x1602c9=VisuMZ['BattleCore']['createKeyJS'](_0x1b2337,_0x5b2f98),VisuMZ[_0x351b1e(0x734)]['JS'][_0x1602c9]&&VisuMZ[_0x351b1e(0x734)]['JS'][_0x1602c9][_0x351b1e(0xa23)](this,this[_0x351b1e(0xbe8)](),this[_0x351b1e(0xbe8)](),_0x1b2337,_0xe47bef);}else return![];}},Game_Action['prototype'][_0x57e85a(0x2cd)]=function(){const _0x4d7d25=_0x57e85a;return VisuMZ[_0x4d7d25(0x734)][_0x4d7d25(0x478)][_0x4d7d25(0x5ad)]['CalcActionSpeedJS']['call'](this);},Game_Action['prototype'][_0x57e85a(0x3d1)]=function(){const _0x5aa4fe=_0x57e85a;return VisuMZ[_0x5aa4fe(0x734)]['Settings'][_0x5aa4fe(0x5ad)]['AllowRandomSpeed'];},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xe02)]=function(){const _0x131462=_0x57e85a;if(this['_targetBattlerKey']===_0x131462(0x940))return![];if(this['_targetBattlerKey']===_0x131462(0xbb5))return![];if(!this[_0x131462(0x2df)]())return![];return this[_0x131462(0x2df)]()['note'][_0x131462(0x392)](/<JS TARGETS>/i);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x489)]=function(){const _0x11bf7b=_0x57e85a;if(this[_0x11bf7b(0xcb9)]===_0x11bf7b(0x940))return![];if(this[_0x11bf7b(0xcb9)]===_0x11bf7b(0xbb5))return![];if(!this['_forcing']&&this[_0x11bf7b(0xbe8)]()['isConfused']())return![];if(this[_0x11bf7b(0xe02)]())return!![];if(!this[_0x11bf7b(0x2df)]())return![];return typeof this[_0x11bf7b(0x2df)]()[_0x11bf7b(0x219)]===_0x11bf7b(0x1e9);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x328)]=Game_Action['prototype'][_0x57e85a(0x57b)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x57b)]=function(){const _0x41a1f9=_0x57e85a;if(this[_0x41a1f9(0xcb9)]===_0x41a1f9(0x940))return![];if(this[_0x41a1f9(0xcb9)]==='all\x20enemies')return!![];if(this[_0x41a1f9(0x489)]()&&!this[_0x41a1f9(0xe02)]())return this[_0x41a1f9(0xbe5)]();else{if(_0x41a1f9(0x250)!==_0x41a1f9(0xde8))return VisuMZ[_0x41a1f9(0x734)]['Game_Action_isForOpponent'][_0x41a1f9(0xa23)](this);else _0x336070[_0x41a1f9(0xa75)](),_0x3b6bbc[_0x41a1f9(0xaee)]()?(this[_0x41a1f9(0x310)](),_0x139fd0['removeCurrentAction']()):(_0xc5e9ff[_0x41a1f9(0xc26)](),this[_0x41a1f9(0x9ec)]());}},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xbe5)]=function(){const _0x4904f8=_0x57e85a,_0x3c7c91=this[_0x4904f8(0x2df)]()['scope'];if(_0x3c7c91[_0x4904f8(0x392)](/ANY/i))return!![];return _0x3c7c91[_0x4904f8(0x392)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xa47)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xd6b)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xd6b)]=function(){const _0x176dcf=_0x57e85a;if(this[_0x176dcf(0xcb9)]==='all\x20actors')return!![];if(this['_targetBattlerKey']===_0x176dcf(0xbb5))return![];if(this[_0x176dcf(0x489)]()&&!this[_0x176dcf(0xe02)]())return this[_0x176dcf(0xc61)]();else{if(_0x176dcf(0xc68)!=='Vwjwz')return VisuMZ[_0x176dcf(0x734)][_0x176dcf(0xa47)][_0x176dcf(0xa23)](this);else{_0x1be629(_0x176dcf(0x299)),_0x27219e[_0x176dcf(0x4f1)]();return;}}},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xc61)]=function(){const _0x39db1f=_0x57e85a,_0x55f29a=this[_0x39db1f(0x2df)]()['scope'];return _0x55f29a[_0x39db1f(0x392)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x9bc)]=function(){const _0x28c2f3=_0x57e85a;if(this[_0x28c2f3(0x489)]()&&!this[_0x28c2f3(0xe02)]()){const _0x397a53=this['item']()[_0x28c2f3(0x219)];return _0x397a53[_0x28c2f3(0x392)](/(?:ENEMY|FOE)/i)&&_0x397a53[_0x28c2f3(0x392)](/OR/i)&&_0x397a53[_0x28c2f3(0x392)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x57e85a(0x16f)]['isForAnyoneFocusFriends']=function(){const _0x1a5600=_0x57e85a;if(this[_0x1a5600(0x9bc)]()){const _0x55e98d=this[_0x1a5600(0x2df)]()[_0x1a5600(0x219)];if(_0x55e98d[_0x1a5600(0x392)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x57e85a(0x16f)]['isForAnyoneFocusOpponents']=function(){const _0x4f1c31=_0x57e85a;if(this['isForAnyone']()){if('UPuyx'!=='yhayr'){const _0x39d97b=this[_0x4f1c31(0x2df)]()['scope'];if(_0x39d97b['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}else return;}return![];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xdb2)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xd3b)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xd3b)]=function(){const _0x473f60=_0x57e85a;if(this['_targetBattlerKey']===_0x473f60(0x940))return'HhCST'===_0x473f60(0x4f0)?0x0:!![];if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()){if(_0x473f60(0xa25)===_0x473f60(0x21c))this[_0x473f60(0x25e)]=this['_onceParallelInterpreters']||[],this[_0x473f60(0x25e)][_0x473f60(0x5fa)](_0x132611);else return this[_0x473f60(0xa58)]();}else return VisuMZ['BattleCore'][_0x473f60(0xdb2)][_0x473f60(0xa23)](this);},VisuMZ[_0x57e85a(0x734)]['Game_Action_isForDeadFriend']=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xbbf)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xbbf)]=function(){const _0x45e68c=_0x57e85a;if(this[_0x45e68c(0xcb9)]==='all\x20actors')return _0x45e68c(0x614)===_0x45e68c(0x614)?VisuMZ[_0x45e68c(0x734)]['Game_Action_isForDeadFriend'][_0x45e68c(0xa23)](this):this[_0x45e68c(0x937)]||this['_mainSprite']||this;return VisuMZ[_0x45e68c(0x734)][_0x45e68c(0x5c8)][_0x45e68c(0xa23)](this);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xa58)]=function(){const _0x362dcf=_0x57e85a;if(this[_0x362dcf(0x9bc)]())return!![];return![];},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x8d5)]=function(){const _0x2445c1=_0x57e85a;return this['item']()&&this[_0x2445c1(0x2df)]()['note'][_0x2445c1(0x392)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ['BattleCore'][_0x57e85a(0x303)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x703)],Game_Action[_0x57e85a(0x16f)]['isForOne']=function(){const _0x50abf0=_0x57e85a;if(this[_0x50abf0(0xcb9)]===_0x50abf0(0x940))return![];if(this[_0x50abf0(0xcb9)]===_0x50abf0(0xbb5))return![];if(this['isBattleCoreTargetScope']()&&!this[_0x50abf0(0xe02)]()){if('XiXrk'===_0x50abf0(0x542)){const _0x437373=this['item']()[_0x50abf0(0x219)];if(_0x437373[_0x50abf0(0x392)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}else return this[_0x50abf0(0xded)]();}else{if('jHDNZ'===_0x50abf0(0xa8d))this[_0x50abf0(0xbc8)]=0x0,this['_currentAngle']=0x0;else return VisuMZ[_0x50abf0(0x734)][_0x50abf0(0x303)][_0x50abf0(0xa23)](this);}},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xded)]=function(){const _0x272f49=_0x57e85a;if(this[_0x272f49(0x9bc)]())return!![];return![];},VisuMZ['BattleCore'][_0x57e85a(0x439)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x90e)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x90e)]=function(){const _0x4737d5=_0x57e85a;if(this['_targetBattlerKey']===_0x4737d5(0x940))return![];if(this[_0x4737d5(0xcb9)]===_0x4737d5(0xbb5))return![];return this[_0x4737d5(0x489)]()&&!this[_0x4737d5(0xe02)]()?this[_0x4737d5(0x497)]():VisuMZ[_0x4737d5(0x734)][_0x4737d5(0x439)][_0x4737d5(0xa23)](this);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x497)]=function(){const _0x44478b=_0x57e85a,_0x5890bf=this[_0x44478b(0x2df)]()[_0x44478b(0x219)];return _0x5890bf[_0x44478b(0x392)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x57e85a(0xd38)]=Game_Action[_0x57e85a(0x16f)]['isForAll'],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x585)]=function(){const _0x5ef629=_0x57e85a;if(this['_targetBattlerKey']===_0x5ef629(0x940))return!![];if(this['_targetBattlerKey']===_0x5ef629(0xbb5))return!![];return VisuMZ['BattleCore'][_0x5ef629(0xd38)][_0x5ef629(0xa23)](this);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x7d2)]=function(){const _0x3cef68=_0x57e85a;if(!this[_0x3cef68(0x2df)]())return![];if(this[_0x3cef68(0xbbf)]())return![];return(this['item']()[_0x3cef68(0x40f)]||'')['match'](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xd0c)]=Game_Action['prototype'][_0x57e85a(0x91d)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x91d)]=function(_0x400935){const _0x2ba29a=_0x57e85a;if(this['isForNotUser']()&&_0x400935===this[_0x2ba29a(0xbe8)]())return![];return VisuMZ[_0x2ba29a(0x734)][_0x2ba29a(0xd0c)][_0x2ba29a(0xa23)](this,_0x400935);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x593)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xdb3)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xdb3)]=function(){const _0x535545=_0x57e85a,_0x1fbc5f=VisuMZ['BattleCore'][_0x535545(0x593)][_0x535545(0xa23)](this);if(this[_0x535545(0x8d5)]())_0x1fbc5f['remove'](this[_0x535545(0xbe8)]());return _0x1fbc5f;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x521)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x749)],Game_Action['prototype'][_0x57e85a(0x749)]=function(){const _0x5421ed=_0x57e85a;if(this[_0x5421ed(0x489)]()&&!this[_0x5421ed(0xe02)]())return this[_0x5421ed(0x3ee)]();else{if(_0x5421ed(0x6ea)!==_0x5421ed(0x997))return VisuMZ[_0x5421ed(0x734)][_0x5421ed(0x521)][_0x5421ed(0xa23)](this);else _0x3b017c+=_0x50149e['isActor']()?-_0x24f73f:_0x598062,_0x5bd228+=_0x5ad267[_0x5421ed(0x7d1)]()?-_0x3586cc:_0x46b604;}},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x3ee)]=function(){const _0x2b8fa8=_0x57e85a,_0x449d10=this[_0x2b8fa8(0x2df)]()[_0x2b8fa8(0x219)];if(_0x449d10[_0x2b8fa8(0x392)](/RANDOM/i))return![];if(_0x449d10['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x449d10['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x449d10[_0x2b8fa8(0x392)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x449d10[_0x2b8fa8(0x392)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ['BattleCore'][_0x2b8fa8(0x521)][_0x2b8fa8(0xa23)](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xe23)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x4ec)],Game_Action[_0x57e85a(0x16f)]['makeTargets']=function(){const _0x333442=_0x57e85a;let _0x137273=[];return this[_0x333442(0x489)]()?this[_0x333442(0xe02)]()?'lHmWf'!=='lHmWf'?(this['_statusWindow'][_0x333442(0x216)](),this['_actorWindow'][_0x333442(0x639)](),this[_0x333442(0xb74)][_0x333442(0xa13)]()):_0x137273=this[_0x333442(0x54a)]():_0x333442(0x3c2)===_0x333442(0x3c2)?_0x137273=this[_0x333442(0x6ad)]():_0x4b4d11=_0x1e27e5:_0x137273=VisuMZ['BattleCore']['Game_Action_makeTargets'][_0x333442(0xa23)](this),_0x137273=this[_0x333442(0xb4b)](_0x137273),_0x137273;},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x9e0)]=function(){const _0x256f73=_0x57e85a;return this['subject']()[_0x256f73(0x7d1)]()&&!this[_0x256f73(0xbe8)]()[_0x256f73(0x471)]();},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x54a)]=function(){const _0x3f6792=_0x57e85a,_0x39d3cc=VisuMZ[_0x3f6792(0x734)][_0x3f6792(0x8b5)](this[_0x3f6792(0x2df)](),_0x3f6792(0xa3a));if(VisuMZ['BattleCore']['JS'][_0x39d3cc]){targets=VisuMZ[_0x3f6792(0x734)][_0x3f6792(0xe23)][_0x3f6792(0xa23)](this);const _0xe22b4e=VisuMZ[_0x3f6792(0x734)][_0x3f6792(0x8b5)](this['item'](),_0x3f6792(0xa3a));return targets=VisuMZ[_0x3f6792(0x734)]['JS'][_0xe22b4e][_0x3f6792(0xa23)](this,this[_0x3f6792(0xbe8)](),targets),this['repeatTargets'](targets);}return this[_0x3f6792(0x6ad)]();},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x6ad)]=function(){const _0x161908=_0x57e85a;let _0x3c0dc9=[];const _0x1c0f8f=String(this['item']()[_0x161908(0x219)]);if(this[_0x161908(0xbe4)]()){if(_0x161908(0x721)!==_0x161908(0x7f7)){if(this[_0x161908(0x9e0)]()){if(_0x161908(0xccc)!==_0x161908(0xd50))return _0x3c0dc9=this[_0x161908(0xa28)](),this[_0x161908(0x97a)](_0x3c0dc9);else this[_0x161908(0x4a5)]=!![];}else{if(_0x161908(0xa72)!==_0x161908(0xa72))_0x4402a4['BattleCore'][_0x161908(0x5ae)][_0x161908(0xa23)](this),this[_0x161908(0xc18)]();else return this['_targetIndex']=-0x1,_0x3c0dc9[_0x161908(0x5fa)](...this[_0x161908(0xd00)]()),this[_0x161908(0x97a)](_0x3c0dc9);}}else{if(!_0x32ba2b['isBattleTest']()){const _0x1e6026=_0x1bbb9e[_0x161908(0x313)](_0x4ed440['x'],_0x1abc2f['y']);if(this[_0x161908(0x31e)]&&this[_0x161908(0x31e)][_0x1e6026])return this[_0x161908(0x31e)][_0x1e6026];}return _0x5b3de6[_0x161908(0x734)][_0x161908(0x503)][_0x161908(0xa23)](this);}}if(this[_0x161908(0x5f3)]()){if(this['isSubjectValidForAnyoneSelect']()){if(_0x161908(0x4eb)===_0x161908(0x464))_0x51719b[_0x161908(0x734)]['Game_BattlerBase_initMembers'][_0x161908(0xa23)](this),this[_0x161908(0x611)]();else return _0x3c0dc9=this[_0x161908(0xa28)](),this['repeatTargets'](_0x3c0dc9);}else{if(Imported['VisuMZ_3_BattleAI']){if(VisuMZ['BattleAI']['version']<1.19){if(_0x161908(0x402)===_0x161908(0x3d7)){_0x3a722e('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x293558[_0x161908(0x4f1)]();return;}else{let _0x1ff890='';_0x1ff890+=_0x161908(0x598),_0x1ff890+=_0x161908(0x3e4),_0x1ff890+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0x1ff890),SceneManager[_0x161908(0x4f1)]();}}}return this['_targetIndex']=-0x1,_0x3c0dc9[_0x161908(0x5fa)](...this[_0x161908(0x257)]()),this[_0x161908(0x97a)](_0x3c0dc9);}}if(_0x1c0f8f[_0x161908(0x392)](/(\d+) RANDOM ANY/i)){let _0x2d06f8=Number(RegExp['$1']);while(_0x2d06f8--){if(_0x161908(0x8de)===_0x161908(0x8de)){const _0x92b0e2=Math[_0x161908(0xdd9)](0x2)===0x0?this[_0x161908(0xd05)]():this[_0x161908(0xafb)]();_0x3c0dc9[_0x161908(0x5fa)](_0x92b0e2[_0x161908(0xe1c)]());}else{if(this[_0x161908(0xca2)][_0x161908(0xd36)]>0x0){const _0x1bb663=this[_0x161908(0xca2)]['shift'](),_0x4567fe=_0x1bb663[0x0];return _0x4567fe[_0x161908(0x56f)]=_0x4567fe[_0x161908(0x56f)]||[],_0x4567fe[_0x161908(0x56f)][0x0]=_0x1bb663[0x1],_0x4567fe;}else return this[_0x161908(0xd93)][_0x161908(0x4d6)]();}}return this['repeatTargets'](_0x3c0dc9);}if(_0x1c0f8f['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x2406aa=Number(RegExp['$1']);while(_0x2406aa--){'oUvaT'===_0x161908(0xc91)?_0x3c0dc9[_0x161908(0x5fa)](this[_0x161908(0xd05)]()[_0x161908(0xe1c)]()):this[_0x161908(0x8cb)](_0x4e9ca9);}return this['repeatTargets'](_0x3c0dc9);}if(_0x1c0f8f['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x4511f2=Number(RegExp['$1']);while(_0x4511f2--){_0x3c0dc9['push'](this[_0x161908(0xafb)]()['trueRandomTarget']());}return this[_0x161908(0x97a)](_0x3c0dc9);}if(_0x1c0f8f[_0x161908(0x392)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x161908(0x587)==='RfxOF'?(_0x5ef37a=_0x3c3fce[_0x161908(0x734)]['Settings'][_0x161908(0x573)][_0x161908(0x9cf)][_0x161908(0xa23)](this,_0xd9b77),_0x598463=this[_0x161908(0x4e6)]['criticalDmgRate']*_0x68eb4e+this[_0x161908(0x4e6)]['criticalDmgFlat'],_0x498fa2):(_0x3c0dc9[_0x161908(0x5fa)](...this[_0x161908(0xafb)]()[_0x161908(0x8a1)]()[_0x161908(0x1db)](_0x4ad5aa=>_0x4ad5aa!==this[_0x161908(0xbe8)]())),this['repeatTargets'](_0x3c0dc9));return VisuMZ[_0x161908(0x734)][_0x161908(0xe23)]['call'](this);},Game_Action['prototype']['randomTargets']=function(_0x152ebd){const _0x180032=_0x57e85a,_0x4ebfee=[];for(let _0x5647ec=0x0;_0x5647ec<this['numTargets']();_0x5647ec++){_0x4ebfee[_0x180032(0x5fa)](_0x152ebd[_0x180032(0xe1c)]());}return _0x4ebfee;},Game_Action[_0x57e85a(0x16f)]['applyTargetFilters']=function(_0xae0d75){const _0x2e4968=_0x57e85a;if(!this[_0x2e4968(0x2df)]())return _0xae0d75;const _0x4c7bfe=this[_0x2e4968(0x2df)]()[_0x2e4968(0x40f)];if(this[_0x2e4968(0x8d5)]()){if('UZJxu'===_0x2e4968(0x267)){this[_0x2e4968(0x585)]()&&_0xae0d75[_0x2e4968(0xb45)](this[_0x2e4968(0xbe8)]());if(_0xae0d75[_0x2e4968(0x3af)](this['subject']())){const _0x5eb1ca=this[_0x2e4968(0xafb)]()['aliveMembers']()[_0x2e4968(0xb45)](this[_0x2e4968(0xbe8)]());if(_0x5eb1ca[_0x2e4968(0xd36)]>0x0){_0x5eb1ca[_0x2e4968(0x494)]((_0x221eed,_0xf31b5c)=>_0x221eed[_0x2e4968(0x9f8)]()-_0xf31b5c['hpRate']());while(_0xae0d75[_0x2e4968(0x3af)](this[_0x2e4968(0xbe8)]())){const _0x34898a=_0xae0d75[_0x2e4968(0x9b6)](this[_0x2e4968(0xbe8)]());_0xae0d75[_0x34898a]=_0x5eb1ca[Math['randomInt'](_0x5eb1ca[_0x2e4968(0xd36)])];}}else _0xae0d75[_0x2e4968(0xb45)](this[_0x2e4968(0xbe8)]());}}else this[_0x2e4968(0x67f)](this[_0x2e4968(0xd66)]);}return _0xae0d75;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x4d1)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x436)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x436)]=function(_0x54cf0d,_0xfcd1c1){const _0x3fe62b=_0x57e85a;VisuMZ[_0x3fe62b(0x734)][_0x3fe62b(0x4d1)][_0x3fe62b(0xa23)](this,_0x54cf0d,_0xfcd1c1);if(!_0x54cf0d['isImmortal']())return;for(const _0x5d6947 of this['subject']()[_0x3fe62b(0x8d0)]()){if('KZjkg'!=='yjtoa'){if(_0x5d6947===_0x54cf0d[_0x3fe62b(0x91e)]()){let _0x8a22d0=_0xfcd1c1[_0x3fe62b(0x7f4)];_0x8a22d0*=_0x54cf0d['stateRate'](_0x5d6947),_0x8a22d0*=this['subject']()[_0x3fe62b(0x335)](_0x5d6947),_0x8a22d0*=this[_0x3fe62b(0x943)](_0x54cf0d),Math['random']()<_0x8a22d0&&(_0x3fe62b(0x9a2)===_0x3fe62b(0x955)?(_0x4b8538[_0x3fe62b(0x481)]['x']=this[_0x3fe62b(0x3bb)](_0x2ac497[_0x3fe62b(0x481)]['x'],this['_targetSkewX'],_0x577590,_0x8a7f4c,_0x55c9d3),_0x38f94e[_0x3fe62b(0x481)]['y']=this[_0x3fe62b(0x3bb)](_0x4f3f76['skew']['y'],this[_0x3fe62b(0x3e7)],_0x2cf6cc,_0xe64a72,_0x75e853)):(_0x54cf0d['_deathStateApplied']=!![],this[_0x3fe62b(0x97c)](_0x54cf0d)));}}else{this[_0x3fe62b(0x6d3)](_0x5b25e8);if(_0x1bd2fc['isClicked']()){const _0xb13035=_0x1d9295[_0x3fe62b(0x828)]()[_0x548695],_0x50ac03=_0x291df4['_enemies']['indexOf'](_0xb13035);_0x50ac03>=0x0&&(_0x12284c[_0x3fe62b(0x6d3)](_0x50ac03),_0x3acd6b[_0x3fe62b(0x73f)]());}}}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x707)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x3cb)],Game_Action[_0x57e85a(0x16f)]['itemEffectAddNormalState']=function(_0xb866d7,_0x50e96a){const _0x28bf57=_0x57e85a;VisuMZ[_0x28bf57(0x734)]['Game_Action_itemEffectAddNormalState'][_0x28bf57(0xa23)](this,_0xb866d7,_0x50e96a);if(!_0xb866d7[_0x28bf57(0x334)]())return;if(_0x50e96a[_0x28bf57(0x885)]!==_0xb866d7['deathStateId']())return;let _0x4bdeb7=_0x50e96a['value1'];!this[_0x28bf57(0xc27)]()&&(_0x28bf57(0x29d)!==_0x28bf57(0x21a)?(_0x4bdeb7*=_0xb866d7[_0x28bf57(0x459)](_0x50e96a['dataId']),_0x4bdeb7*=this['lukEffectRate'](_0xb866d7)):_0x5c2cdb['setWaitMode'](_0x28bf57(0x9da))),Math[_0x28bf57(0x47c)]()<_0x4bdeb7&&(_0xb866d7[_0x28bf57(0x8b2)]=!![],this[_0x28bf57(0x97c)](_0xb866d7));},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x691)]=Game_Action['prototype'][_0x57e85a(0x39d)],Game_Action[_0x57e85a(0x16f)]['applyGlobal']=function(){const _0x3a65d9=_0x57e85a;VisuMZ[_0x3a65d9(0x734)]['Game_Action_applyGlobal'][_0x3a65d9(0xa23)](this),this[_0x3a65d9(0x56a)](),this['resetResultSwitches']();},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x56a)]=function(){const _0x482f96=_0x57e85a;if(!SceneManager[_0x482f96(0x4b2)]())return;const _0x294277=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x5aff6d=this[_0x482f96(0x2df)]()[_0x482f96(0x40f)][_0x482f96(0x392)](_0x294277);if(_0x5aff6d){if(_0x482f96(0x197)===_0x482f96(0x30b)){const _0x4df0a0=this[_0x482f96(0x3ab)]();_0x4df0a0&&_0x4df0a0[_0x482f96(0x47f)]();}else for(const _0x23eaa4 of _0x5aff6d){if(!_0x23eaa4)continue;_0x23eaa4[_0x482f96(0x392)](_0x294277);const _0x5181f0=String(RegExp['$1'])[_0x482f96(0xc06)](',')[_0x482f96(0x260)](_0x190189=>String(_0x190189)['trim']()),_0xd9d8cb=_0x5181f0[_0x482f96(0x260)](_0x5c8288=>DataManager[_0x482f96(0x8f1)](_0x5c8288));for(const _0x49d98d of _0xd9d8cb){const _0x43d4fe=$dataCommonEvents[_0x49d98d];_0x43d4fe&&$gameTemp[_0x482f96(0x428)](_0x49d98d);}}}},DataManager[_0x57e85a(0x8f1)]=function(_0x9ece88){const _0x4bc5f3=_0x57e85a;_0x9ece88=_0x9ece88[_0x4bc5f3(0x307)]()[_0x4bc5f3(0xdf5)](),this[_0x4bc5f3(0x6a0)]=this[_0x4bc5f3(0x6a0)]||{};if(this['_commonEventIDs'][_0x9ece88])return this[_0x4bc5f3(0x6a0)][_0x9ece88];for(const _0x4593fa of $dataCommonEvents){if(!_0x4593fa)continue;let _0x5198f5=_0x4593fa[_0x4bc5f3(0x7a3)];_0x5198f5=_0x5198f5[_0x4bc5f3(0x795)](/\x1I\[(\d+)\]/gi,''),_0x5198f5=_0x5198f5[_0x4bc5f3(0x795)](/\\I\[(\d+)\]/gi,''),this[_0x4bc5f3(0x6a0)][_0x5198f5['toUpperCase']()['trim']()]=_0x4593fa['id'];}return this[_0x4bc5f3(0x6a0)][_0x9ece88]||0x0;},Game_Action[_0x57e85a(0x16f)]['resetResultSwitches']=function(){const _0x19b5de=_0x57e85a;if(!SceneManager[_0x19b5de(0x4b2)]())return;const _0x5b13cb=VisuMZ[_0x19b5de(0x734)][_0x19b5de(0x478)][_0x19b5de(0x5ad)];_0x5b13cb[_0x19b5de(0x6ca)]&&$gameSwitches[_0x19b5de(0x565)](_0x5b13cb[_0x19b5de(0x6ca)],![]),_0x5b13cb[_0x19b5de(0x317)]&&(_0x19b5de(0x278)!==_0x19b5de(0x278)?_0x55fb06[_0x19b5de(0x734)]['Scene_Battle_terminate'][_0x19b5de(0xa23)](this):$gameSwitches[_0x19b5de(0x565)](_0x5b13cb[_0x19b5de(0x317)],![])),_0x5b13cb[_0x19b5de(0x5e7)]&&$gameVariables[_0x19b5de(0x565)](_0x5b13cb['VariableDmg'],0x0),_0x5b13cb[_0x19b5de(0xc96)]&&$gameVariables[_0x19b5de(0x565)](_0x5b13cb[_0x19b5de(0xc96)],0x0);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x53b)]=function(_0xea9133){const _0x584d6d=_0x57e85a;if(!SceneManager[_0x584d6d(0x4b2)]())return;if(!_0xea9133)return;const _0x230cf3=_0xea9133[_0x584d6d(0x2b9)](),_0x617d30=VisuMZ['BattleCore'][_0x584d6d(0x478)][_0x584d6d(0x5ad)];if(_0x617d30[_0x584d6d(0x6ca)]&&_0x230cf3[_0x584d6d(0x2be)]){if(_0x584d6d(0x586)!==_0x584d6d(0x8d1))$gameSwitches[_0x584d6d(0x565)](_0x617d30['SwitchCritical'],!![]);else{const _0x144177=_0xf51048['indexOf'](_0x566db6);return _0x144177>=0x0?[_0x182d52[_0x144177-0x1]||_0x27efd9]:[_0x422a49];}}_0x617d30['SwitchMissEvade']&&(_0x230cf3[_0x584d6d(0x869)]||_0x230cf3[_0x584d6d(0x46a)])&&(_0x584d6d(0x909)===_0x584d6d(0x9c6)?(this[_0x584d6d(0x85c)]++,this['active']=!![]):$gameSwitches[_0x584d6d(0x565)](_0x617d30[_0x584d6d(0x317)],!![]));if(_0x617d30['VariableDmg']){let _0x2e1a02=$gameVariables[_0x584d6d(0x3a6)](_0x617d30[_0x584d6d(0x5e7)]);_0x230cf3[_0x584d6d(0xaeb)]>0x0&&(_0x2e1a02+=Math[_0x584d6d(0xe06)](_0x230cf3['hpDamage'])),$gameVariables[_0x584d6d(0x565)](_0x617d30[_0x584d6d(0x5e7)],_0x2e1a02);}if(_0x617d30['VariableHeal']){if(_0x584d6d(0xb72)==='QEkhj')return 0x0;else{let _0x1689d1=$gameVariables[_0x584d6d(0x3a6)](_0x617d30[_0x584d6d(0xc96)]);_0x230cf3['hpDamage']<0x0&&(_0x1689d1+=Math[_0x584d6d(0xe06)](_0x230cf3[_0x584d6d(0xaeb)])),$gameVariables[_0x584d6d(0x565)](_0x617d30[_0x584d6d(0xc96)],_0x1689d1);}}},VisuMZ[_0x57e85a(0x734)]['LifeStealRegExp']={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ['BattleCore'][_0x57e85a(0x17a)]=Game_Action['prototype'][_0x57e85a(0x4c6)],Game_Action['prototype']['executeHpDamage']=function(_0x1c09e8,_0x3d5115){const _0x5cb5a3=_0x57e85a;VisuMZ[_0x5cb5a3(0x734)][_0x5cb5a3(0x17a)][_0x5cb5a3(0xa23)](this,_0x1c09e8,_0x3d5115);!this[_0x5cb5a3(0x28b)]()&&_0x1c09e8&&_0x1c09e8[_0x5cb5a3(0x2b9)]()[_0x5cb5a3(0xaeb)]>0x0&&this[_0x5cb5a3(0x7ed)]('HP',_0x1c09e8,_0x1c09e8[_0x5cb5a3(0x2b9)]()[_0x5cb5a3(0xaeb)]);if(_0x1c09e8){if(_0x5cb5a3(0x80a)==='YYPKy'){this['_executeHpDamage']=this[_0x5cb5a3(0x29e)]||{};const _0x4cd7dc=_0x1c09e8[_0x5cb5a3(0xb6e)]();this[_0x5cb5a3(0x29e)][_0x4cd7dc]=_0x3d5115;}else{if(!_0xb5cdbf[_0x5cb5a3(0xd86)])return;const _0x7403f5=_0x2fbcf8['_scene'][_0x5cb5a3(0x78d)];if(!_0x7403f5)return;_0x2fc43b[_0x5cb5a3(0x15e)](_0x3e200e,_0x4a3882);const _0x1849e1=_0x5ea5c3['X']||0x0,_0x37b931=_0x3e84cd['Y']||0x0,_0x40898c=_0x2cb26f[_0x5cb5a3(0x6fb)]||0x0,_0x4122df=_0x277563[_0x5cb5a3(0x73b)]||0x0,_0x5bd17b=_0x5bb37d['Duration']||0x1;_0x7403f5['setupShockwaveImpactFilter'](_0x1849e1,_0x37b931,_0x40898c,_0x4122df,_0x5bd17b);}}},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xadf)]=function(_0x1257f4){const _0x1c2f85=_0x57e85a;this[_0x1c2f85(0x29e)]=this[_0x1c2f85(0x29e)]||{};const _0x39ff97=_0x1257f4[_0x1c2f85(0xb6e)]();return this['_executeHpDamage'][_0x39ff97]||0x0;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x58e)]=Game_Action[_0x57e85a(0x16f)]['executeMpDamage'],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x6d0)]=function(_0xd3b4c9,_0xa85f58){const _0x321341=_0x57e85a;VisuMZ[_0x321341(0x734)][_0x321341(0x58e)][_0x321341(0xa23)](this,_0xd3b4c9,_0xa85f58),!this[_0x321341(0x28b)]()&&_0xd3b4c9&&_0xd3b4c9[_0x321341(0x2b9)]()[_0x321341(0xad3)]>0x0&&this[_0x321341(0x7ed)]('MP',_0xd3b4c9,_0xd3b4c9[_0x321341(0x2b9)]()[_0x321341(0xad3)]);},Game_Action['prototype'][_0x57e85a(0x7ed)]=function(_0x47c3b9,_0x9d091d,_0x59c9b3){const _0x569eef=_0x57e85a;_0x47c3b9=_0x47c3b9[_0x569eef(0x307)]()[_0x569eef(0xdf5)]();const _0xed3886=this[_0x569eef(0xcb8)](_0x47c3b9,_0x9d091d);if(_0xed3886<=0x0)return;const _0x1e7e9a=Math[_0x569eef(0x92a)](_0x59c9b3*_0xed3886);if(_0x1e7e9a<=0x0)return;let _0xe37a4f=this[_0x569eef(0xbe8)]();if(this[_0x569eef(0xc17)])_0xe37a4f=this[_0x569eef(0xc17)];const _0x4ae312=_0x9d091d['isNegativeLifeSteal'](_0x47c3b9)?-0x1:0x1;if(_0x47c3b9==='HP')_0xe37a4f[_0x569eef(0x602)](_0x4ae312*_0x1e7e9a);if(_0x47c3b9==='MP')_0xe37a4f['gainMp'](_0x4ae312*_0x1e7e9a);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xcb8)]=function(_0x451217,_0x4a4bb8){const _0xa5b6e=_0x57e85a;if(this['isCancelLifeSteal'](_0x451217))return 0x0;if(this[_0xa5b6e(0xbe8)]()[_0xa5b6e(0x28c)](_0x451217))return 0x0;if(_0x4a4bb8[_0xa5b6e(0x7e8)](_0x451217))return 0x0;let _0x34f647=0x0;return _0x34f647+=this[_0xa5b6e(0xc76)](_0x451217),_0x34f647+=this[_0xa5b6e(0xbe8)]()[_0xa5b6e(0xcb8)](_0x451217,this['item']()[_0xa5b6e(0x63c)]),_0x34f647[_0xa5b6e(0x1fc)](0x0,0x1);},Game_Action[_0x57e85a(0x16f)][_0x57e85a(0xb61)]=function(_0x3b745a){const _0x2bfa61=_0x57e85a;_0x3b745a=_0x3b745a[_0x2bfa61(0x307)]()[_0x2bfa61(0xdf5)]();const _0x7e7980=VisuMZ[_0x2bfa61(0x734)][_0x2bfa61(0x771)],_0x8b2583=this[_0x2bfa61(0x2df)]()[_0x2bfa61(0x40f)]||'';if(_0x8b2583[_0x2bfa61(0x392)](_0x7e7980[_0x2bfa61(0x4a4)]))return!![];if(_0x3b745a==='HP'&&_0x8b2583['match'](_0x7e7980['cancelHpLifeSteal']))return!![];if(_0x3b745a==='MP'&&_0x8b2583[_0x2bfa61(0x392)](_0x7e7980[_0x2bfa61(0x6e9)])){if('xRehq'==='xRehq')return!![];else _0x1985cf=![];}return![];},Game_Action['prototype'][_0x57e85a(0xc76)]=function(_0x48d96c){const _0x204ea8=_0x57e85a,_0x4d1b6c=VisuMZ[_0x204ea8(0x734)][_0x204ea8(0x771)],_0xa603bf=this['item']()['note']||'';_0x48d96c=_0x48d96c[_0x204ea8(0x307)]()[_0x204ea8(0xdf5)]();const _0x42d593=_0xa603bf['match'](_0x4d1b6c[_0x204ea8(0xb93)]);if(_0x42d593){if('rglGN'!==_0x204ea8(0x359)){if(this[_0x204ea8(0x68f)]<=0x0)return;if(!this[_0x204ea8(0x937)])return;const _0x6b6b61=this['_growDuration'],_0x33f463=this[_0x204ea8(0x346)],_0x3c2a0b=this[_0x204ea8(0x2ef)];_0x3dc6cc[_0x204ea8(0x376)]?(this[_0x204ea8(0xc94)]=this[_0x204ea8(0x3bb)](this[_0x204ea8(0xc94)],this['_targetGrowX'],_0x6b6b61,_0x33f463,_0x3c2a0b),this[_0x204ea8(0x9cb)]=this[_0x204ea8(0x3bb)](this['_growY'],this[_0x204ea8(0x857)],_0x6b6b61,_0x33f463,_0x3c2a0b)):(this['_growX']=(this[_0x204ea8(0xc94)]*(_0x6b6b61-0x1)+this[_0x204ea8(0x4e7)])/_0x6b6b61,this['_growY']=(this[_0x204ea8(0x9cb)]*(_0x6b6b61-0x1)+this['_targetGrowY'])/_0x6b6b61);this['_growDuration']--;if(this[_0x204ea8(0x68f)]<=0x0)this[_0x204ea8(0x6d8)]();}else for(const _0x4e08c9 of _0x42d593){if(_0x204ea8(0x92c)===_0x204ea8(0x92c)){_0x4e08c9['match'](_0x4d1b6c[_0x204ea8(0xb93)]);const _0x3d033c=String(RegExp['$1'])[_0x204ea8(0x307)]()[_0x204ea8(0xdf5)](),_0x194ef7=Number(RegExp['$2'])*0.01;if(_0x3d033c!==_0x48d96c)continue;return _0x194ef7;}else return this['_actionBattlers'][_0x204ea8(0x4d6)]();}}return 0x0;},Game_BattlerBase[_0x57e85a(0x16f)]['lifeStealRate']=function(_0x1ff7f7,_0x4b5448){const _0x422502=_0x57e85a,_0x56247f=VisuMZ[_0x422502(0x734)][_0x422502(0x771)];let _0x599b6e=0x0;_0x1ff7f7=_0x1ff7f7[_0x422502(0x307)]()['trim']();for(const _0x196819 of this[_0x422502(0x7c9)]()){if(!_0x196819)continue;const _0x1c09e7=_0x196819[_0x422502(0x40f)]||'',_0x3a57e7=_0x1c09e7[_0x422502(0x392)](_0x56247f[_0x422502(0xa38)]);if(_0x3a57e7)for(const _0x1ff102 of _0x3a57e7){_0x1ff102[_0x422502(0x392)](_0x56247f[_0x422502(0xa38)]);const _0x1271ee=String(RegExp['$1'])[_0x422502(0x307)]()[_0x422502(0xdf5)](),_0xae2a26=String(RegExp['$2']),_0x596952=Number(RegExp['$3'])*0.01;if(_0x1271ee!==_0x1ff7f7)continue;if(_0x4b5448===Game_Action[_0x422502(0x45c)]&&_0xae2a26['match'](/CERTAIN/i)){if(_0x422502(0x1dc)!==_0x422502(0x1dc)){if(_0x4a588b[_0x422502(0x2b4)]())return;const _0x40a9c7=_0x1dcda0[_0x422502(0x734)]['Settings'][_0x422502(0x573)],_0x5335c9=new _0xc2adbf();_0x5335c9[_0x422502(0x70d)]=_0x40a9c7[_0x422502(0x2fe)],this[_0x422502(0x5d3)](_0x5335c9),_0x5335c9[_0x422502(0xb62)](this['_battler']),_0x5335c9[_0x422502(0x821)](this[_0x422502(0xb08)]),this[_0x422502(0x631)](_0x5335c9);}else _0x599b6e+=_0x596952;}else{if(_0x4b5448===Game_Action[_0x422502(0x51c)]&&_0xae2a26['match'](/PHYS/i))_0x422502(0x348)===_0x422502(0x348)?_0x599b6e+=_0x596952:_0x58c380=!![];else _0x4b5448===Game_Action['HITTYPE_MAGICAL']&&_0xae2a26[_0x422502(0x392)](/MAGIC/i)&&(_0x599b6e+=_0x596952);}}}return _0x599b6e;},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x28c)]=function(_0x1f9353){const _0xf4a9b3=_0x57e85a;_0x1f9353=_0x1f9353['toUpperCase']()['trim']();const _0x51ebb2=VisuMZ[_0xf4a9b3(0x734)]['LifeStealRegExp'];for(const _0x443f3a of this[_0xf4a9b3(0x7c9)]()){if('vAfvM'!=='JLfIV'){if(!_0x443f3a)continue;const _0x52fd10=_0x443f3a[_0xf4a9b3(0x40f)]||'';if(_0x52fd10['match'](_0x51ebb2['disarmLifeSteal']))return!![];if(_0x1f9353==='HP'&&_0x52fd10[_0xf4a9b3(0x392)](_0x51ebb2[_0xf4a9b3(0x1b6)]))return!![];if(_0x1f9353==='MP'&&_0x52fd10[_0xf4a9b3(0x392)](_0x51ebb2[_0xf4a9b3(0xa5b)]))return!![];}else{const _0x1a1fd3=_0x27b110[_0xf4a9b3(0x734)][_0xf4a9b3(0x478)][_0xf4a9b3(0xcab)];if(_0x1a1fd3[_0xf4a9b3(0xda5)]){const _0x1f0176=new _0x30e8e0();_0x1f0176[_0xf4a9b3(0x632)]=_0x4be882[_0xf4a9b3(0x95e)](_0x1a1fd3['StatusWindowAttachmentBack']),_0x1f0176['x']=_0x1a1fd3[_0xf4a9b3(0x43d)]||0x0,_0x1f0176['y']=_0x1a1fd3[_0xf4a9b3(0xc7e)]||0x0,this[_0xf4a9b3(0xd19)](_0x1f0176),this[_0xf4a9b3(0x246)]=_0x1f0176;}if(_0x1a1fd3[_0xf4a9b3(0xc4f)]){const _0x3fa1ad=new _0x3a2c0f();_0x3fa1ad[_0xf4a9b3(0x632)]=_0x180cb8[_0xf4a9b3(0x95e)](_0x1a1fd3[_0xf4a9b3(0xc4f)]),_0x3fa1ad['x']=_0x1a1fd3[_0xf4a9b3(0x361)]||0x0,_0x3fa1ad['y']=_0x1a1fd3['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0xf4a9b3(0x67f)](_0x3fa1ad),this[_0xf4a9b3(0xd66)]=_0x3fa1ad;}}}return![];},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0xe1f)]=function(_0x2673da){const _0x5f31be=_0x57e85a;_0x2673da=_0x2673da[_0x5f31be(0x307)]()[_0x5f31be(0xdf5)]();const _0x258943=VisuMZ['BattleCore'][_0x5f31be(0x771)];for(const _0x34800e of this[_0x5f31be(0x7c9)]()){if(!_0x34800e)continue;const _0x399af6=_0x34800e['note']||'';if(_0x399af6[_0x5f31be(0x392)](_0x258943['negativeLifeSteal']))return!![];if(_0x2673da==='HP'&&_0x399af6['match'](_0x258943['negativeHpLifeSteal'])){if(_0x5f31be(0x7be)!==_0x5f31be(0x7be))this[_0x5f31be(0x25e)]=[];else return!![];}if(_0x2673da==='MP'&&_0x399af6[_0x5f31be(0x392)](_0x258943[_0x5f31be(0x7ea)]))return!![];}return![];},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x7e8)]=function(_0xacc64b){const _0x2589b6=_0x57e85a;_0xacc64b=_0xacc64b[_0x2589b6(0x307)]()[_0x2589b6(0xdf5)]();const _0x30c27d=VisuMZ[_0x2589b6(0x734)]['LifeStealRegExp'];for(const _0x8bc7f5 of this[_0x2589b6(0x7c9)]()){if(!_0x8bc7f5)continue;const _0x2b80d5=_0x8bc7f5[_0x2589b6(0x40f)]||'';if(_0x2b80d5[_0x2589b6(0x392)](_0x30c27d['guardLifeSteal']))return!![];if(_0xacc64b==='HP'&&_0x2b80d5[_0x2589b6(0x392)](_0x30c27d[_0x2589b6(0xbc6)]))return!![];if(_0xacc64b==='MP'&&_0x2b80d5[_0x2589b6(0x392)](_0x30c27d[_0x2589b6(0x1a4)]))return!![];}return![];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x452)]=Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x8dc)],Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x8dc)]=function(){const _0x23e990=_0x57e85a;VisuMZ[_0x23e990(0x734)][_0x23e990(0x452)][_0x23e990(0xa23)](this),this[_0x23e990(0x611)]();},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x611)]=function(){this['_immortal']=![];},VisuMZ[_0x57e85a(0x734)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0xa6a)],Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0xa6a)]=function(){const _0x39177f=_0x57e85a;this['_cache']={},VisuMZ[_0x39177f(0x734)]['Game_BattlerBase_refresh']['call'](this);},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x547)]=function(_0x26d853){const _0x896a5c=_0x57e85a;return this[_0x896a5c(0x879)]=this[_0x896a5c(0x879)]||{},this[_0x896a5c(0x879)][_0x26d853]!==undefined;},Game_BattlerBase['prototype'][_0x57e85a(0x983)]=function(){const _0x4c4a36=_0x57e85a;if(this['_cache'][_0x4c4a36(0x983)]!==undefined)return this[_0x4c4a36(0x879)]['hardDamageCap'];const _0x1a2a6f=/<DAMAGE CAP:[ ](\d+)>/i,_0x399047=this[_0x4c4a36(0x7c9)]()['map'](_0x40956f=>_0x40956f&&_0x40956f[_0x4c4a36(0x40f)][_0x4c4a36(0x392)](_0x1a2a6f)?Number(RegExp['$1']):0x0);let _0x324cc9=_0x399047['length']>0x0?Math[_0x4c4a36(0xde7)](..._0x399047):0x0;if(_0x324cc9<=0x0)_0x324cc9=VisuMZ[_0x4c4a36(0x734)][_0x4c4a36(0x478)]['Damage'][_0x4c4a36(0xd3d)];return this[_0x4c4a36(0x879)][_0x4c4a36(0x983)]=_0x324cc9,this[_0x4c4a36(0x879)]['hardDamageCap'];},Game_BattlerBase['prototype'][_0x57e85a(0x846)]=function(){const _0x4881f8=_0x57e85a;if(this[_0x4881f8(0x879)][_0x4881f8(0x403)]!==undefined)return this[_0x4881f8(0x879)][_0x4881f8(0x403)];let _0x40eea5=VisuMZ['BattleCore']['Settings']['Damage']['DefaultSoftCap'];const _0x4f0093=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x49f45b=this[_0x4881f8(0x7c9)]()[_0x4881f8(0x260)](_0x45fba1=>_0x45fba1&&_0x45fba1['note'][_0x4881f8(0x392)](_0x4f0093)?Number(RegExp['$1'])/0x64:0x0);return _0x40eea5=_0x49f45b['reduce']((_0x5ee081,_0x74112)=>_0x5ee081+_0x74112,_0x40eea5),this[_0x4881f8(0x879)]['softDamageCap']=_0x40eea5,this['_cache'][_0x4881f8(0x403)]['clamp'](0.01,0x1);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x215)]=Game_BattlerBase[_0x57e85a(0x16f)]['die'],Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x2f2)]=function(){const _0x4af2d3=_0x57e85a;VisuMZ[_0x4af2d3(0x734)][_0x4af2d3(0x215)][_0x4af2d3(0xa23)](this),SceneManager[_0x4af2d3(0x4b2)]()&&this[_0x4af2d3(0x4c9)](_0x4af2d3(0x605));},Game_BattlerBase['prototype'][_0x57e85a(0x3ab)]=function(){const _0x13cc61=_0x57e85a;if(!SceneManager['isSceneBattle']())return null;if(!SceneManager[_0x13cc61(0xd04)]['_spriteset'])return null;return SceneManager['_scene'][_0x13cc61(0x78d)][_0x13cc61(0x8df)](this);},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x4df)]=function(){const _0x3b1cb8=_0x57e85a;return VisuMZ[_0x3b1cb8(0x734)][_0x3b1cb8(0x478)][_0x3b1cb8(0x876)]['AnchorX'];},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0xbcd)]=function(){const _0x53d483=_0x57e85a;return VisuMZ['BattleCore'][_0x53d483(0x478)]['Actor'][_0x53d483(0xab8)];},Game_BattlerBase['prototype'][_0x57e85a(0x996)]=function(){const _0x1de428=_0x57e85a;return this[_0x1de428(0x7d1)]&&this[_0x1de428(0x7d1)]()?VisuMZ[_0x1de428(0x734)][_0x1de428(0x478)]['Actor'][_0x1de428(0xc13)]:VisuMZ[_0x1de428(0x734)]['Settings']['Enemy'][_0x1de428(0xc13)];},Game_BattlerBase['prototype'][_0x57e85a(0x217)]=function(){return!![];},Game_BattlerBase['prototype'][_0x57e85a(0x510)]=function(){return 0x0;},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x6c1)]=function(){return 0x0;},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0xae6)]=function(_0x54a36d){const _0x20fbe2=_0x57e85a;if(!_0x54a36d)return 0x0;let _0x2e4270=0x0;const _0x48fe97=_0x54a36d[_0x20fbe2(0x40f)];_0x48fe97[_0x20fbe2(0x392)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x2e4270+=Number(RegExp['$1']));if(_0x48fe97[_0x20fbe2(0x392)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x20fbe2(0xa55)!==_0x20fbe2(0xa55)){if(!this[_0x20fbe2(0x622)]()&&this!==_0x39fe06['_subject']){if(this[_0x20fbe2(0x3ab)]())this[_0x20fbe2(0x3ab)]()[_0x20fbe2(0x88c)]();}this[_0x20fbe2(0x662)]();return;}else _0x2e4270+=Number(RegExp['$1']);}return _0x2e4270;},Game_BattlerBase['prototype'][_0x57e85a(0xd18)]=function(_0x1733a6){const _0x302d88=_0x57e85a;if(!_0x1733a6)return 0x0;let _0x5b6e53=0x0;const _0x27939c=_0x1733a6[_0x302d88(0x40f)];if(_0x27939c['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x302d88(0xc05)!==_0x302d88(0xa90))_0x5b6e53+=Number(RegExp['$1']);else return!this[_0x302d88(0x1fb)]();}return _0x27939c[_0x302d88(0x392)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x5b6e53+=Number(RegExp['$2'])),_0x5b6e53;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x3df)]=Game_BattlerBase['prototype'][_0x57e85a(0x920)],Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x920)]=function(_0x4a1f44){const _0x34bbf6=_0x57e85a;if(_0x4a1f44===this[_0x34bbf6(0x91e)]()&&this['isImmortal']()){if('DeQiI'!==_0x34bbf6(0xc97)){const _0x31c341=_0x437614[_0x34bbf6(0x734)][_0x34bbf6(0x478)][_0x34bbf6(0x192)];if(_0x31c341&&_0x31c341[_0x34bbf6(0x4ef)])return _0x31c341[_0x34bbf6(0x4ef)][_0x34bbf6(0xa23)](this);this['width']=_0x3c0dd6[_0x34bbf6(0x8b9)],this[_0x34bbf6(0x54b)]=_0x362e37[_0x34bbf6(0x54b)];const _0x59fe04=this[_0x34bbf6(0x8b9)]/this[_0x34bbf6(0x632)][_0x34bbf6(0x8b9)],_0x3c4f37=this[_0x34bbf6(0x54b)]/this[_0x34bbf6(0x632)][_0x34bbf6(0x54b)],_0x592d50=_0xc6a1f5[_0x34bbf6(0xde7)](_0x59fe04,_0x3c4f37);this[_0x34bbf6(0xa63)]['x']=_0x592d50,this[_0x34bbf6(0xa63)]['y']=_0x592d50,this['x']=(_0x526aad[_0x34bbf6(0x8b9)]-this['width'])/0x2,this['y']=_0xb29be2['height']-this[_0x34bbf6(0x54b)];}else return!![];}return VisuMZ['BattleCore'][_0x34bbf6(0x3df)][_0x34bbf6(0xa23)](this,_0x4a1f44);},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x334)]=function(){const _0x13ebcb=_0x57e85a;return this[_0x13ebcb(0xbbe)];},Game_BattlerBase['prototype'][_0x57e85a(0x861)]=function(_0x42c156){const _0x255708=_0x57e85a;_0x42c156?this[_0x255708(0x658)]():this['removeImmortal']();},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x658)]=function(){const _0x28d428=_0x57e85a;if(this[_0x28d428(0xd6d)]())return;this['_immortal']=!![],this[_0x28d428(0x8b2)]=![];},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x831)]=function(){const _0x50503b=_0x57e85a,_0x1c0e74=this[_0x50503b(0x2e0)]();this['_immortal']=![];if(_0x1c0e74&&this[_0x50503b(0x8b2)]){if(_0x50503b(0x892)===_0x50503b(0x892))this['die']();else{let _0x522c49=_0x50503b(0x6c1);if(this[_0x50503b(0x547)](_0x522c49))return this[_0x50503b(0x879)][_0x522c49];return this[_0x50503b(0x879)][_0x522c49]=this[_0x50503b(0xd18)](this[_0x50503b(0x2ee)]()),this['_cache'][_0x522c49];}}this[_0x50503b(0x8b2)]=![],this['refresh'](),this[_0x50503b(0xd6d)]()&&_0x1c0e74&&(this[_0x50503b(0x932)](),this[_0x50503b(0x26a)]());},VisuMZ[_0x57e85a(0x734)]['Game_Action_numRepeats']=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x2c8)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x2c8)]=function(){const _0x25099b=_0x57e85a;if(this['item']())return VisuMZ[_0x25099b(0x734)]['Game_Action_numRepeats']['call'](this);else{if('IcMQd'===_0x25099b(0x60c))_0x169332[_0x25099b(0x674)](0x1),_0x5c6f11['setWaitMode'](_0x25099b(0x2ab));else return 0x0;}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x1e2)]=Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x4a2)],Game_Action['prototype'][_0x57e85a(0x4a2)]=function(){const _0x4ab0a4=_0x57e85a;this[_0x4ab0a4(0xbe8)]()&&this[_0x4ab0a4(0xbe8)]()[_0x4ab0a4(0x415)]()?VisuMZ[_0x4ab0a4(0x734)][_0x4ab0a4(0x1e2)][_0x4ab0a4(0xa23)](this):this[_0x4ab0a4(0x896)]();},VisuMZ[_0x57e85a(0x734)]['Game_BattlerBase_canAttack']=Game_BattlerBase['prototype'][_0x57e85a(0x415)],Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x415)]=function(){const _0x5275f4=_0x57e85a;if(!this[_0x5275f4(0x687)]())return![];return VisuMZ[_0x5275f4(0x734)][_0x5275f4(0x2cf)][_0x5275f4(0xa23)](this);},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x687)]=function(){const _0x44868f=_0x57e85a;for(const _0x458a81 of this[_0x44868f(0x7c9)]()){if(!_0x458a81)continue;if(_0x458a81[_0x44868f(0x40f)][_0x44868f(0x392)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x57e85a(0x734)]['Game_Action_setGuard']=Game_Action['prototype'][_0x57e85a(0x80d)],Game_Action[_0x57e85a(0x16f)][_0x57e85a(0x80d)]=function(){const _0x1c0156=_0x57e85a;this[_0x1c0156(0xbe8)]()['canGuard']()&&(_0x1c0156(0xdcf)===_0x1c0156(0x38c)?(_0x1230f6[_0x1c0156(0x734)][_0x1c0156(0x5b7)]['call'](this),this[_0x1c0156(0x1cd)]()):VisuMZ[_0x1c0156(0x734)][_0x1c0156(0x94c)][_0x1c0156(0xa23)](this));},VisuMZ['BattleCore'][_0x57e85a(0xc88)]=Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x3d4)],Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x3d4)]=function(){const _0x47844e=_0x57e85a;if(!this[_0x47844e(0xaa2)]())return![];return VisuMZ[_0x47844e(0x734)][_0x47844e(0xc88)][_0x47844e(0xa23)](this);},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0xaa2)]=function(){const _0x15b5a0=_0x57e85a;for(const _0x5ec421 of this[_0x15b5a0(0x7c9)]()){if(!_0x5ec421)continue;if(_0x5ec421['note']['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0xa8a)]=function(){const _0x347c16=_0x57e85a;for(const _0x30058f of this[_0x347c16(0x7c9)]()){if(!_0x30058f)continue;if(_0x30058f[_0x347c16(0x40f)][_0x347c16(0x392)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x796)]=Game_BattlerBase[_0x57e85a(0x16f)]['meetsUsableItemConditions'],Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x450)]=function(_0x90513a){const _0x2c66d3=_0x57e85a;if(_0x90513a&&_0x90513a[_0x2c66d3(0x40f)]['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x22b711=this[_0x2c66d3(0xafb)]()['aliveMembers']();if(_0x22b711[_0x2c66d3(0xd36)]===0x1&&_0x22b711[0x0]===this)return![];}return VisuMZ['BattleCore'][_0x2c66d3(0x796)][_0x2c66d3(0xa23)](this,_0x90513a);},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x3d1)]=function(){const _0x5df92f=_0x57e85a;return VisuMZ[_0x5df92f(0x734)][_0x5df92f(0x478)][_0x5df92f(0x5ad)][_0x5df92f(0xaa6)];},VisuMZ['BattleCore'][_0x57e85a(0x22f)]=Game_Battler['prototype']['regenerateAll'],Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xa18)]=function(){const _0x9adf10=_0x57e85a;if(SceneManager[_0x9adf10(0x4b2)]()){if(_0x9adf10(0x978)!==_0x9adf10(0x55c)){if(BattleManager[_0x9adf10(0xad6)]()){if(this['turnCount']()<=0x0)return;}else{if($gameTroop['turnCount']()<=0x0){if(_0x9adf10(0xd2a)===_0x9adf10(0xd2a))return;else return _0x4f4778[_0x9adf10(0x734)][_0x9adf10(0x330)]['call'](this,_0x200cfe);}}}else _0xc1b630[_0x9adf10(0x734)]['Window_BattleStatus_initialize'][_0x9adf10(0xa23)](this,_0x44c4b3),this[_0x9adf10(0x4a8)](),this['createAttachmentSprites']();}if(SceneManager[_0x9adf10(0x4b2)]()&&BattleManager[_0x9adf10(0xad6)]()&&this[_0x9adf10(0x33e)]===Graphics[_0x9adf10(0x868)])return;this[_0x9adf10(0x33e)]=Graphics['frameCount'],SceneManager['isSceneBattle']()&&this[_0x9adf10(0x830)](_0x9adf10(0xc8f)),VisuMZ[_0x9adf10(0x734)]['Game_Battler_regenerateAll'][_0x9adf10(0xa23)](this),SceneManager[_0x9adf10(0x4b2)]()&&(this[_0x9adf10(0x7fd)](),this['processBattleCoreJS'](_0x9adf10(0x424)));},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x7fd)]=function(){const _0xd0b338=_0x57e85a;if(SceneManager['isSceneBattle']())for(const _0x3013e5 of this[_0xd0b338(0x7c9)]()){if(!_0x3013e5)continue;this[_0xd0b338(0x4c8)](_0x3013e5);}},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x4c8)]=function(_0x242018){const _0x494408=_0x57e85a;if(!Imported[_0x494408(0x376)])return;if(!SceneManager[_0x494408(0x4b2)]())return;if(this[_0x494408(0xd6d)]())return;if(this[_0x494408(0xcf4)]())return;if(_0x242018[_0x494408(0x40f)][_0x494408(0x392)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x1911fd=Number(RegExp['$1']);$gameTemp[_0x494408(0xd22)]([this],_0x1911fd,![],![]);}},VisuMZ['BattleCore']['Game_Battler_startTpbTurn']=Game_Battler['prototype']['startTpbTurn'],Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x1b3)]=function(){const _0x53a03d=_0x57e85a;this[_0x53a03d(0x830)](_0x53a03d(0xbf0)),VisuMZ[_0x53a03d(0x734)]['Game_Battler_startTpbTurn'][_0x53a03d(0xa23)](this),this[_0x53a03d(0x830)](_0x53a03d(0xdc6));},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x499)]=Game_Battler[_0x57e85a(0x16f)]['onTurnEnd'],Game_Battler[_0x57e85a(0x16f)]['onTurnEnd']=function(){const _0xf9cd62=_0x57e85a;this[_0xf9cd62(0x830)](_0xf9cd62(0xe0c)),VisuMZ[_0xf9cd62(0x734)]['Game_Battler_onTurnEnd']['call'](this),VisuMZ[_0xf9cd62(0x734)]['Settings']['Mechanics']['SyncBuffExpire']&&this[_0xf9cd62(0x3c3)](),this[_0xf9cd62(0x830)](_0xf9cd62(0x875));},Game_Battler['prototype']['processBattleCoreJS']=function(_0x338092){const _0x1585aa=_0x57e85a;if(this[_0x1585aa(0xd87)]||this['_tempActor'])return;const _0x2a0f3a=VisuMZ[_0x1585aa(0x734)][_0x1585aa(0x478)][_0x1585aa(0x5ad)];if(_0x2a0f3a[_0x338092])_0x2a0f3a[_0x338092][_0x1585aa(0xa23)](this);for(const _0x34cb51 of this[_0x1585aa(0x7c9)]()){if(_0x1585aa(0x90a)!=='sYAdo'){if(!_0x34cb51)continue;key=VisuMZ[_0x1585aa(0x734)][_0x1585aa(0x8b5)](_0x34cb51,_0x338092),VisuMZ[_0x1585aa(0x734)]['JS'][key]&&(_0x1585aa(0x566)!==_0x1585aa(0x566)?_0xe071cf[_0x1585aa(0x808)](_0x637bf5):VisuMZ['BattleCore']['JS'][key]['call'](this,this,this,_0x34cb51,0x0));}else _0x509c1c[_0x1585aa(0x734)][_0x1585aa(0x624)][_0x1585aa(0xa23)](this),this[_0x1585aa(0x5aa)]();}},Game_Battler['prototype'][_0x57e85a(0xd8b)]=function(){const _0x24349e=_0x57e85a;return VisuMZ[_0x24349e(0x734)]['Settings'][_0x24349e(0x876)][_0x24349e(0x941)]||![];},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x764)]=function(){const _0x5c7972=_0x57e85a;if(this[_0x5c7972(0x99a)]()){if(this[_0x5c7972(0xd8b)]()){if(_0x5c7972(0x4bf)!==_0x5c7972(0x4bf))return this['_battler']['isSelected']();else{if(this['_actions'][_0x5c7972(0x54d)](_0x3511c5=>_0x3511c5[_0x5c7972(0x2df)]()&&_0x3511c5[_0x5c7972(0xcba)]()))return!![];}}else{if(this['_actions'][_0x5c7972(0x54d)](_0xe4826c=>_0xe4826c['item']()&&_0xe4826c[_0x5c7972(0xac7)]()))return!![];}}if(BattleManager['isTpb']()&&this[_0x5c7972(0xac9)]===_0x5c7972(0x852))return _0x5c7972(0x7b9)===_0x5c7972(0x4ce)?_0x1369a6[_0x5c7972(0x828)]()[this[_0x5c7972(0xde9)]]:this[_0x5c7972(0xd8b)]()?this['currentAction']()&&this[_0x5c7972(0x8ab)]()[_0x5c7972(0x2df)]()&&this[_0x5c7972(0x8ab)]()[_0x5c7972(0xcba)]():this['currentAction']()&&this[_0x5c7972(0x8ab)]()[_0x5c7972(0x2df)]()&&this[_0x5c7972(0x8ab)]()[_0x5c7972(0xac7)]();return![];},Game_Battler['prototype'][_0x57e85a(0xdb8)]=function(){const _0x1d0ffd=_0x57e85a;if(BattleManager['isTpb']()&&this['_tpbState']===_0x1d0ffd(0x852)){if(_0x1d0ffd(0x5bd)===_0x1d0ffd(0x5bd)){if(this['chantStyle']())return this[_0x1d0ffd(0x8ab)]()&&this[_0x1d0ffd(0x8ab)]()[_0x1d0ffd(0x2df)]()&&!this[_0x1d0ffd(0x8ab)]()[_0x1d0ffd(0xcba)]();else{if(_0x1d0ffd(0x772)===_0x1d0ffd(0x772))return this[_0x1d0ffd(0x8ab)]()&&this[_0x1d0ffd(0x8ab)]()[_0x1d0ffd(0x2df)]()&&!this[_0x1d0ffd(0x8ab)]()[_0x1d0ffd(0xac7)]();else{if(!_0x1a8632[_0x1d0ffd(0x4b2)]())return;if(!_0x33076e[_0x1d0ffd(0x58c)])return;const _0x32ccf1=_0x3501fe[_0x1d0ffd(0x577)];if(!_0x32ccf1)return;_0x32ccf1[_0x1d0ffd(0x2e1)]();}}}else{if(!_0x1b02de[_0x1d0ffd(0x4b2)]())return;if(!_0x1b13f1[_0x1d0ffd(0x272)])return;_0x54b3cd[_0x1d0ffd(0x15e)](_0x21e06f,_0x3a41e6);const _0x137e3a=_0x44289d['getLastPluginCommandInterpreter'](),_0x24c54a=_0x2f7af7[_0x1d0ffd(0x544)];if(!_0x137e3a)return;_0x38ee08['setBattleSkew'](_0x1ce41b[_0x1d0ffd(0x961)],_0x3660f2[_0x1d0ffd(0x203)],_0x2e8f43[_0x1d0ffd(0x692)],_0x54e478[_0x1d0ffd(0xa42)]);if(_0x24c54a)_0x137e3a['setWaitMode'](_0x1d0ffd(0x723));}}return![];},VisuMZ['BattleCore']['Game_Battler_clearDamagePopup']=Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xb83)],Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xb83)]=function(){const _0x5b7ab0=_0x57e85a;VisuMZ[_0x5b7ab0(0x734)][_0x5b7ab0(0xa30)][_0x5b7ab0(0xa23)](this),this['_damagePopupArray']=[];},Game_Battler['prototype'][_0x57e85a(0xbad)]=function(){const _0x504f35=_0x57e85a;if(!this['_damagePopupArray'])this[_0x504f35(0xb83)]();return this['_damagePopupArray']['length']>0x0;},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x742)]=function(){const _0x467fd5=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0x467fd5(0x2b4)]())return;if(!this[_0x467fd5(0x916)])this['clearDamagePopup']();this[_0x467fd5(0x206)]();const _0x1e92c5=this[_0x467fd5(0x3ab)]();if(_0x1e92c5)_0x1e92c5[_0x467fd5(0x84d)]();},Game_Battler['prototype'][_0x57e85a(0x206)]=function(){const _0x10bd48=_0x57e85a,_0x535c6b=this[_0x10bd48(0x2b9)]();if(_0x535c6b['missed']||_0x535c6b[_0x10bd48(0x46a)]){const _0x129f51=JsonEx['makeDeepCopy'](_0x535c6b);_0x129f51[_0x10bd48(0x741)]=![],_0x129f51['mpDamage']=0x0,this[_0x10bd48(0x916)][_0x10bd48(0x5fa)](_0x129f51);}if(_0x535c6b[_0x10bd48(0x741)]){if(_0x10bd48(0x7ce)!==_0x10bd48(0x7ce))return _0x5c7039[_0x519907];else{const _0x38a923=JsonEx[_0x10bd48(0xbdc)](_0x535c6b);_0x38a923[_0x10bd48(0x869)]=![],_0x38a923[_0x10bd48(0x46a)]=![],_0x38a923[_0x10bd48(0xad3)]=0x0,this[_0x10bd48(0x916)][_0x10bd48(0x5fa)](_0x38a923);}}if(_0x535c6b['mpDamage']!==0x0){const _0x19fea6=JsonEx['makeDeepCopy'](_0x535c6b);_0x19fea6[_0x10bd48(0x869)]=![],_0x19fea6[_0x10bd48(0x46a)]=![],_0x19fea6[_0x10bd48(0x741)]=![],this[_0x10bd48(0x916)][_0x10bd48(0x5fa)](_0x19fea6);}},Game_Battler[_0x57e85a(0x16f)]['getNextDamagePopup']=function(){const _0x47576e=_0x57e85a;if(!this[_0x47576e(0x916)])this[_0x47576e(0xb83)]();return VisuMZ['BattleCore'][_0x47576e(0x478)][_0x47576e(0x573)]['NewPopupBottom']?this[_0x47576e(0x916)][_0x47576e(0x4d6)]():this[_0x47576e(0x916)][_0x47576e(0x527)]();},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xd41)]=function(_0x3e746c,_0x2e5a0c){const _0x5511d1=_0x57e85a;if(!SceneManager[_0x5511d1(0x4b2)]())return;if(BattleManager[_0x5511d1(0x2b4)]())return;if(!this[_0x5511d1(0x3ab)]())return;if(_0x3e746c[_0x5511d1(0xd36)]<=0x0)return;_0x2e5a0c=_0x2e5a0c||{},_0x2e5a0c[_0x5511d1(0xe01)]=_0x2e5a0c[_0x5511d1(0xe01)]||_0x5511d1(0xdd8),_0x2e5a0c[_0x5511d1(0xae7)]=_0x2e5a0c[_0x5511d1(0xae7)]||[0x0,0x0,0x0,0x0],_0x2e5a0c[_0x5511d1(0x947)]=_0x2e5a0c[_0x5511d1(0x947)]||0x0,this['battler']()['setupTextPopup'](_0x3e746c,_0x2e5a0c);},Game_Battler[_0x57e85a(0x16f)]['setupIconTextPopup']=function(_0x36e63d,_0x156dc5,_0x1fc77d){const _0xc7d403=_0x57e85a;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0xc7d403(0x2b4)]())return;if(!this[_0xc7d403(0x3ab)]())return;if(_0x156dc5[_0xc7d403(0xd36)]<=0x0)return;_0x1fc77d=_0x1fc77d||{},_0x1fc77d[_0xc7d403(0xe01)]=_0x1fc77d[_0xc7d403(0xe01)]||_0xc7d403(0xdd8),_0x1fc77d[_0xc7d403(0xae7)]=_0x1fc77d[_0xc7d403(0xae7)]||[0x0,0x0,0x0,0x0],_0x1fc77d[_0xc7d403(0x947)]=_0x1fc77d[_0xc7d403(0x947)]||0x0,this['battler']()[_0xc7d403(0x5e5)](_0x36e63d,_0x156dc5,_0x1fc77d);},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x29f)]=function(){const _0x4e9d31=_0x57e85a;if(this[_0x4e9d31(0xcf4)]())return![];if(this[_0x4e9d31(0x2e0)]()&&this[_0x4e9d31(0x6e8)]())return!![];if(this[_0x4e9d31(0xd89)]()&&this[_0x4e9d31(0x87a)]()){if('lCWmJ'!=='lCWmJ')return _0x1c586b[_0x4e9d31(0x734)][_0x4e9d31(0x5f8)][_0x4e9d31(0xa23)](this);else{if(this[_0x4e9d31(0xd6d)]()&&this[_0x4e9d31(0x829)]())return![];}}else{if(this[_0x4e9d31(0xd6d)]()){if('sIxRW'==='bofvZ'){this['removeAnimationFromContainer'](_0x287dda);for(const _0x3baa43 of _0x55e589['targetObjects']){_0x3baa43[_0x4e9d31(0xc2f)]&&_0x3baa43[_0x4e9d31(0xc2f)]();}_0x345dd1[_0x4e9d31(0xd2b)]();}else return![];}}return!![];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xa40)]=Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x759)],Game_Battler['prototype'][_0x57e85a(0x759)]=function(){const _0x9eb66c=_0x57e85a;VisuMZ['BattleCore'][_0x9eb66c(0xa40)][_0x9eb66c(0xa23)](this),this[_0x9eb66c(0x662)]();},Game_Battler[_0x57e85a(0x16f)]['canBattlerMove']=function(){return!![];},Game_Battler['prototype'][_0x57e85a(0x287)]=function(){return![];},VisuMZ[_0x57e85a(0x734)]['Game_Battler_onBattleStart']=Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x99b)],Game_Battler[_0x57e85a(0x16f)]['onBattleStart']=function(_0x5e52ff){const _0x526a69=_0x57e85a;VisuMZ[_0x526a69(0x734)][_0x526a69(0x931)][_0x526a69(0xa23)](this,_0x5e52ff),this[_0x526a69(0xd4f)](_0x5e52ff),this['clearDamagePopup']();},Game_Battler[_0x57e85a(0x16f)]['onBattleStartBattleCore']=function(_0x1205f8){const _0x47eeaa=_0x57e85a;this[_0x47eeaa(0x409)](![]),this[_0x47eeaa(0xc9b)]=undefined,this[_0x47eeaa(0x987)]=undefined;},VisuMZ[_0x57e85a(0x734)]['Game_Battler_onBattleEnd']=Game_Battler['prototype']['onBattleEnd'],Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xbdd)]=function(){const _0x28e0ce=_0x57e85a;VisuMZ[_0x28e0ce(0x734)][_0x28e0ce(0x1ec)][_0x28e0ce(0xa23)](this),this['onBattleEndBattleCore']();},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x924)]=function(){const _0x26be65=_0x57e85a;this[_0x26be65(0xc9b)]=undefined,this[_0x26be65(0x987)]=undefined;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x52d)]=Game_Battler['prototype']['performActionStart'],Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x716)]=function(_0x49c89c){const _0x41c199=_0x57e85a;VisuMZ[_0x41c199(0x734)]['Game_Battler_performActionStart'][_0x41c199(0xa23)](this,_0x49c89c);if(!_0x49c89c[_0x41c199(0x60e)]()){const _0x38d407=this[_0x41c199(0x3ab)]();if(_0x38d407){if('uOlkE'===_0x41c199(0x95b))_0x38d407[_0x41c199(0x47f)]();else{const _0xc02a6c=_0x6e8dbc[_0x41c199(0xd04)]['_statusWindow'];_0xc02a6c&&_0xc02a6c[_0x41c199(0x7a2)](this);}}}this['setBattlerFlip'](![]);},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x2c0)]=function(){const _0x4888af=_0x57e85a,_0x46e0a7=this[_0x4888af(0x56b)];this[_0x4888af(0x56b)]=![];if(BattleManager[_0x4888af(0xaf6)]()&&this[_0x4888af(0x5dd)]()){if(_0x4888af(0x230)!==_0x4888af(0x230)){_0x3be763('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x734e53[_0x4888af(0x4f1)]();return;}else{const _0x34d521=this[_0x4888af(0x3ab)]();if(_0x34d521&&_0x46e0a7)_0x34d521[_0x4888af(0x47f)]();return;}}const _0x3e8c3b=this['battler']();if(_0x3e8c3b)_0x3e8c3b[_0x4888af(0xb3e)]();this['setBattlerFlip'](![]),this[_0x4888af(0x26a)]();},Game_Battler['prototype']['performActionMotions']=function(_0xbe1e8a){const _0x19ef47=_0x57e85a;if(_0xbe1e8a[_0x19ef47(0x8bd)]())this[_0x19ef47(0xafa)]();else{if(_0xbe1e8a[_0x19ef47(0x60e)]())_0x19ef47(0x680)===_0x19ef47(0x680)?this['requestMotion'](_0x19ef47(0xd9a)):_0x209c06+=(_0x5e15bd[_0x19ef47(0xd89)]()?-0x1:0x1)*_0x383a02[_0x19ef47(0x6f2)]()/0x2;else{if(_0xbe1e8a['isMagical']())this['requestMotion']('spell');else{if(_0xbe1e8a[_0x19ef47(0x49c)]()){if(_0x19ef47(0x33b)===_0x19ef47(0x33b)){if([0x1,0x2,0x5,0x6][_0x19ef47(0x3af)](_0xbe1e8a['item']()[_0x19ef47(0x356)]['type']))this[_0x19ef47(0xafa)]();else{if('SnfxE'!=='SnfxE'){const _0x360fbc=this[_0x19ef47(0x2df)]()['scope'];return _0x360fbc[_0x19ef47(0x392)](/(?:ENEMY|FOE)/i)&&_0x360fbc[_0x19ef47(0x392)](/OR/i)&&_0x360fbc[_0x19ef47(0x392)](/(?:ALLY|FRIEND)/i);}else this[_0x19ef47(0x4c9)](_0x19ef47(0x94f));}}else return _0x76d397[_0x19ef47(0x734)][_0x19ef47(0x478)][_0x19ef47(0xcab)][_0x19ef47(0x5c5)];}else{if(_0xbe1e8a[_0x19ef47(0x68b)]()){if(_0x19ef47(0x51e)===_0x19ef47(0x51e))this[_0x19ef47(0x4c9)](_0x19ef47(0x2df));else{const _0xc41ece=_0x479907['_scene']['partyCommandWindowRectBorderStyle']();this['move'](_0xc41ece['x'],_0xc41ece['y'],_0xc41ece[_0x19ef47(0x8b9)],_0xc41ece[_0x19ef47(0x54b)]),this[_0x19ef47(0x9dd)](),this[_0x19ef47(0x337)](0x0);}}}}}}},Game_Battler[_0x57e85a(0x16f)]['getAttackMotion']=function(){const _0x28bc61=_0x57e85a;return $dataSystem[_0x28bc61(0x5d0)][0x0];},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x3a0)]=function(){const _0x11f415=_0x57e85a,_0x161966=this['getAttackMotion']();return _0x161966?_0x161966[_0x11f415(0x98a)]:0x0;},Game_Battler['prototype'][_0x57e85a(0x4e8)]=function(_0x1751d2){const _0x4bdfc2=_0x57e85a;if(!$gameSystem[_0x4bdfc2(0xe14)]())return;const _0x372a6d=this[_0x4bdfc2(0x3ab)](),_0x175ee5=_0x1751d2[_0x4bdfc2(0x3ab)]();if(!_0x372a6d||!_0x175ee5)return;const _0x2cd98c=_0x175ee5[_0x4bdfc2(0x4aa)],_0x3456ba=_0x175ee5[_0x4bdfc2(0x20d)];this['moveBattlerToPoint'](_0x2cd98c,_0x3456ba,0x0,![],_0x4bdfc2(0x23a),-0x1),_0x372a6d['updatePosition']();const _0x3de3b9=VisuMZ['BattleCore'][_0x4bdfc2(0x478)][_0x4bdfc2(0x7b8)];let _0x263979=(_0x175ee5['width']+_0x372a6d['width'])/0x2;_0x263979*=this[_0x4bdfc2(0x7d1)]()?0x1:-0x1;let _0x246bc2=_0x3de3b9[_0x4bdfc2(0x730)]*(this['isActor']()?0x1:-0x1);_0x1751d2[_0x4bdfc2(0x4bc)](_0x263979,_0x246bc2,0x0,![],_0x4bdfc2(0x23a)),_0x175ee5['updatePosition']();},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x4c9)]=function(_0x5b88b0){const _0x1193a6=_0x57e85a;if(SceneManager[_0x1193a6(0x4b2)]()){if(_0x1193a6(0xac6)===_0x1193a6(0xac6)){const _0x5ebf6f=this[_0x1193a6(0x3ab)]();if(_0x5ebf6f){if('WOkiL'===_0x1193a6(0x308))_0x1ab808[_0x1193a6(0x734)]['ParseSkillNotetags'][_0x1193a6(0xa23)](this,_0x2376b8);else{_0x5ebf6f[_0x1193a6(0x97b)](_0x5b88b0);if([_0x1193a6(0x22b),_0x1193a6(0x416),_0x1193a6(0x9c0)][_0x1193a6(0x3af)](_0x5b88b0)){if(_0x1193a6(0x600)!==_0x1193a6(0x600))return this[_0x1193a6(0xbbe)];else this[_0x1193a6(0xc28)]();}}}}else return!![];}this[_0x1193a6(0x662)]();},Game_Battler[_0x57e85a(0x16f)]['performWeaponAnimation']=function(){},Game_Battler['prototype'][_0x57e85a(0x7b3)]=function(_0x968007){const _0x94ad9=_0x57e85a;if(SceneManager[_0x94ad9(0x4b2)]()){const _0x479e0d=this[_0x94ad9(0x3ab)]();if(_0x479e0d)_0x479e0d[_0x94ad9(0x97e)](_0x968007);}},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xdba)]=function(){const _0xc4227a=_0x57e85a;if(SceneManager[_0xc4227a(0x4b2)]()){if('IiJjw'!==_0xc4227a(0x67a)){const _0x386bcc=this[_0xc4227a(0x3a0)]();this[_0xc4227a(0x7b3)](_0x386bcc);}else{if(!_0x511937[_0xc4227a(0x734)][_0xc4227a(0x478)][_0xc4227a(0x876)]['PrioritySortActive'])return;const _0x35faff=_0x3388ec['_subject'];if(_0x35faff){if(_0x35faff['isActor']()&&!_0x5f28a7[_0xc4227a(0xe14)]())return;const _0x21a9c7=_0x35faff[_0xc4227a(0x3ab)]();if(_0x21a9c7&&_0x35faff[_0xc4227a(0x7d1)]())this[_0xc4227a(0xc14)]['addChild'](_0x21a9c7);}}}},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xab9)]=function(_0x52abae,_0x374acc){const _0x277369=_0x57e85a;if(!_0x52abae)return;if(!_0x52abae['item']())return;if(_0x52abae[_0x277369(0x8bd)]())return;if(_0x52abae[_0x277369(0x60e)]())return;if(_0x52abae[_0x277369(0x68b)]())return;if($gameTemp[_0x277369(0xb32)])return;let _0x490386=0x0;const _0x2a4b6a=VisuMZ[_0x277369(0x734)][_0x277369(0x478)][_0x277369(0x7b8)],_0x1819bf=_0x52abae['item']()[_0x277369(0x40f)];if(_0x1819bf[_0x277369(0x392)](/<CAST ANIMATION: (\d+)>/i))_0x490386=Number(RegExp['$1']);else{if(_0x1819bf[_0x277369(0x392)](/<NO CAST ANIMATION>/i))return;else{if(_0x52abae[_0x277369(0xc27)]())_0x490386=_0x2a4b6a[_0x277369(0x467)];else{if(_0x52abae[_0x277369(0xd06)]()){if(_0x277369(0xd83)!==_0x277369(0xd83)){const _0x149c21=_0x2130ea[_0x277369(0x1ee)]('['+_0x2a1f4b['$1'][_0x277369(0x392)](/\d+/g)+']');for(const _0x11d028 of _0x149c21){if(!_0x4c1ffb[_0x277369(0x3a6)](_0x11d028))return![];}return!![];}else _0x490386=_0x2a4b6a['CastPhysical'];}else _0x52abae[_0x277369(0xcba)]()&&(_0x490386=_0x2a4b6a[_0x277369(0x991)]);}}}_0x490386>0x0&&$gameTemp[_0x277369(0x986)]([this],_0x490386,!!_0x374acc);},Game_Battler[_0x57e85a(0x16f)]['performReflection']=function(){const _0x56a8c8=_0x57e85a;SoundManager[_0x56a8c8(0x69c)]();let _0xaa9a30=VisuMZ['BattleCore'][_0x56a8c8(0x478)]['ActionSequence'][_0x56a8c8(0x2ae)];_0xaa9a30>0x0&&(Imported[_0x56a8c8(0x376)]?_0x56a8c8(0xc3d)===_0x56a8c8(0xdfb)?(this[_0x56a8c8(0x577)][_0x56a8c8(0xc17)]=_0xd1096e,this[_0x56a8c8(0x9e4)][_0x56a8c8(0x889)](_0x5b7332),this[_0x56a8c8(0x9e4)][_0x56a8c8(0xc8c)](_0x388584,this[_0x56a8c8(0x577)]),this['_action'][_0x56a8c8(0x8bb)](_0x171413),this[_0x56a8c8(0x9e4)][_0x56a8c8(0x545)](_0x12fbf0,_0x752bfb)):$gameTemp[_0x56a8c8(0xd22)]([this],_0xaa9a30):_0x56a8c8(0x5d7)!==_0x56a8c8(0x897)?$gameTemp[_0x56a8c8(0x986)]([this],_0xaa9a30):(this[_0x56a8c8(0xa98)]='',this[_0x56a8c8(0x2ee)]()&&this[_0x56a8c8(0x2ee)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=_0xb60fae(_0xd4b2fd['$1']))));},Game_Battler['prototype'][_0x57e85a(0x965)]=function(){const _0x2b545c=_0x57e85a;if(!$gameSystem[_0x2b545c(0xe14)]())return![];if(!BattleManager['isActiveTpb']())return![];if(this[_0x2b545c(0x5dd)]())return!![];if(this['isTpbReady']())return!![];if(this[_0x2b545c(0x787)]>=0x1)return!![];return![];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x170)]=Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xa1c)],Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xa1c)]=function(){const _0x3712a7=_0x57e85a;if(this[_0x3712a7(0x965)]()){if(_0x3712a7(0x319)===_0x3712a7(0x87e)){let _0x2d3482=_0x1f8e0b['value'](_0x3a5981[_0x3712a7(0x5e7)]);_0x4072a5['hpDamage']>0x0&&(_0x2d3482+=_0x218bcc['abs'](_0x40e3cb[_0x3712a7(0xaeb)])),_0xa81849[_0x3712a7(0x565)](_0x1db834[_0x3712a7(0x5e7)],_0x2d3482);}else this[_0x3712a7(0x4a5)]=!![];}VisuMZ[_0x3712a7(0x734)][_0x3712a7(0x170)][_0x3712a7(0xa23)](this),this[_0x3712a7(0x1ab)](),this['performShakeFlinch']();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xc92)]=Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x7d6)],Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x7d6)]=function(){const _0x3aa31a=_0x57e85a;this[_0x3aa31a(0x965)]()&&(_0x3aa31a(0x28e)!==_0x3aa31a(0xd12)?this[_0x3aa31a(0x4a5)]=!![]:(this[_0x3aa31a(0x5fa)](_0x3aa31a(0x98c),[_0x1d5d1f],_0x375f0a,_0x1745c6),this['push'](_0x3aa31a(0x18e),_0x1a7da3,_0x182cf4,_0x3aa31a(0x5be),_0x40063d,!![],_0x3aa31a(0x23a),!![]),this[_0x3aa31a(0x5fa)]('requestMotion',[_0xbbbcb0],_0x3aa31a(0xb49)),this[_0x3aa31a(0x5fa)](_0x3aa31a(0xd1d)))),VisuMZ[_0x3aa31a(0x734)][_0x3aa31a(0xc92)]['call'](this),this[_0x3aa31a(0x1ab)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xd8e)]=Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xbf3)],Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xbf3)]=function(){const _0x8bd14a=_0x57e85a;this[_0x8bd14a(0x965)]()&&(this[_0x8bd14a(0x4a5)]=!![]),VisuMZ[_0x8bd14a(0x734)][_0x8bd14a(0xd8e)]['call'](this),this['performFlinch']();},Game_Battler['prototype']['performFlinch']=function(){const _0x5f2f31=_0x57e85a;if(!$gameSystem[_0x5f2f31(0xe14)]())return;if(this[_0x5f2f31(0x56b)])return;this[_0x5f2f31(0x56b)]=!![];const _0x25d794=this[_0x5f2f31(0x3ab)]();if(_0x25d794)_0x25d794[_0x5f2f31(0x899)]();},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x87f)]=function(){const _0x57b5aa=_0x57e85a;if(!this[_0x57b5aa(0x652)]())return;const _0x3ba1f0=VisuMZ[_0x57b5aa(0x734)][_0x57b5aa(0x478)][_0x57b5aa(0x876)];if(!(_0x3ba1f0['ShakeFlinch']??![]))return;if(this['_lastHpDamage']<=0x0)return;const _0x912b21=this[_0x57b5aa(0x3ab)]();if(_0x912b21){const _0x10f1d3=this[_0x57b5aa(0x413)],_0x40d411=(_0x10f1d3/this['mhp'])['clamp'](0.8,0x1),_0x3f50fc=_0x3ba1f0[_0x57b5aa(0x701)]??0x30,_0xae2037=_0x40d411*_0x3f50fc;_0x912b21[_0x57b5aa(0x445)](_0xae2037,_0x40d411);}},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x26a)]=function(){const _0x5e93cd=_0x57e85a;if(this['isDead']()&&this[_0x5e93cd(0x5f0)]!=='dead'){if('buZGX'!==_0x5e93cd(0x849))_0x144eb9['_ptbActionCost']=_0x3497df[_0x5e93cd(0x727)]||{},_0x3a6aee[_0x5e93cd(0x727)]['priority']=0x0;else{this['requestMotion'](_0x5e93cd(0x605));return;}}if(this[_0x5e93cd(0xd6d)]()&&this[_0x5e93cd(0x5f0)]==='dead')return;if(!!this[_0x5e93cd(0x7db)])return;if(this[_0x5e93cd(0xd89)]()){if(!this[_0x5e93cd(0x622)]()&&this!==BattleManager[_0x5e93cd(0xa77)]){if(_0x5e93cd(0x2e7)!==_0x5e93cd(0x40b)){if(this[_0x5e93cd(0x3ab)]())this[_0x5e93cd(0x3ab)]()[_0x5e93cd(0x88c)]();}else{if(!this[_0x5e93cd(0xb08)][_0x5e93cd(0x9ca)]())return;if(_0x4350a1[_0x5e93cd(0x2b4)]())return;const _0x26bb8d=_0x1a39a0[_0x5e93cd(0x734)][_0x5e93cd(0x478)][_0x5e93cd(0x573)],_0x1a5957=new _0x27d8be();_0x1a5957[_0x5e93cd(0x70d)]=_0x26bb8d[_0x5e93cd(0x2fe)],this['sortDamageSprites'](_0x1a5957),_0x1a5957[_0x5e93cd(0xd41)](_0x40be1c,_0x34550d),this['addDamageSprite'](_0x1a5957);}}this[_0x5e93cd(0x662)]();return;}if(this['_motionType']===_0x5e93cd(0x1ff))return;if(this['_motionType']===_0x5e93cd(0x6b7)&&!BattleManager[_0x5e93cd(0x5dd)]())return;if(this[_0x5e93cd(0x5f0)]===_0x5e93cd(0xd9a)&&!BattleManager['isInputting']())return;this[_0x5e93cd(0x759)]();if(BattleManager['isActiveTpb']()&&this===BattleManager[_0x5e93cd(0xa77)])return;if(this['battler']()&&BattleManager[_0x5e93cd(0x5dd)]()){this[_0x5e93cd(0x3ab)]()['refreshMotion'](),this[_0x5e93cd(0x662)]();return;}},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x622)]=function(){const _0x362765=_0x57e85a;if(!this['hasSvBattler']())return![];const _0x32a7ed=this[_0x362765(0x3ab)]();if(!_0x32a7ed)return![];const _0x328e55=_0x32a7ed[_0x362765(0x9fb)];if(!_0x328e55)return![];const _0x5dd8a1=_0x328e55[_0x362765(0x33c)];return _0x5dd8a1&&!_0x5dd8a1[_0x362765(0x827)];},Game_Battler[_0x57e85a(0x16f)]['isBattlerFlipped']=function(){return this['_isBattlerFlipped'];},Game_Battler['prototype'][_0x57e85a(0x409)]=function(_0x553c55){const _0x386e44=_0x57e85a;if(!$gameSystem[_0x386e44(0xe14)]())return;this[_0x386e44(0x774)]=_0x553c55;const _0x40f2b3=this[_0x386e44(0x3ab)]();if(_0x40f2b3)_0x40f2b3[_0x386e44(0xd4b)]();},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xd3f)]=function(_0x2ff133,_0x266a6f,_0x47d9f9){const _0x4d5774=_0x57e85a;if(!$gameSystem[_0x4d5774(0xe14)]())return;const _0x363091=this['battler']();if(!_0x363091)return;if(_0x2ff133===_0x363091[_0x4d5774(0x4aa)])return;let _0x415f85=![];if(this[_0x4d5774(0x7d1)]()){if(_0x2ff133>_0x363091[_0x4d5774(0x4aa)])_0x415f85=!![];if(_0x2ff133<_0x363091[_0x4d5774(0x4aa)])_0x415f85=![];}else{if(this[_0x4d5774(0xd89)]()){if(_0x4d5774(0xda3)!==_0x4d5774(0xca9)){if(_0x2ff133>_0x363091[_0x4d5774(0x4aa)])_0x415f85=![];if(_0x2ff133<_0x363091[_0x4d5774(0x4aa)])_0x415f85=!![];}else{const _0x1a36ee=this[_0x4d5774(0x413)],_0x769ea9=(_0x1a36ee/this[_0x4d5774(0xbe0)])['clamp'](0.8,0x1),_0x22b699=_0x349c87[_0x4d5774(0x701)]??0x30,_0x601a6f=_0x769ea9*_0x22b699;_0x141950[_0x4d5774(0x445)](_0x601a6f,_0x769ea9);}}};this[_0x4d5774(0x409)](_0x47d9f9?!_0x415f85:_0x415f85),_0x363091['updateFlip']();},Game_Battler[_0x57e85a(0x16f)]['moveBattlerDistance']=function(_0x4afff9,_0x505372,_0x1fc987,_0x27c3ba,_0x252093){const _0x54b3d4=_0x57e85a;if(!$gameSystem[_0x54b3d4(0xe14)]())return;const _0x3771d2=this[_0x54b3d4(0x3ab)]();if(!_0x3771d2)return;if(_0x27c3ba)this['setBattlerFacePoint'](_0x4afff9+_0x3771d2['_baseX'],_0x505372+_0x3771d2['_baseY'],![]);_0x4afff9+=_0x3771d2[_0x54b3d4(0x4aa)]-_0x3771d2[_0x54b3d4(0xbac)],_0x505372+=_0x3771d2[_0x54b3d4(0x20d)]-_0x3771d2['_homeY'],_0x3771d2[_0x54b3d4(0xd1b)](_0x4afff9,_0x505372,_0x1fc987);if(Imported[_0x54b3d4(0x376)])_0x3771d2[_0x54b3d4(0x44e)](_0x252093||_0x54b3d4(0x23a));},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x946)]=function(_0x3d69e9,_0xf9645c,_0x2cf7fc,_0x3bd6b2,_0x4b14fc,_0x4dfcea){const _0x5f322f=_0x57e85a;if(!$gameSystem['isSideView']())return;const _0x5c216a=this[_0x5f322f(0x3ab)]();if(!_0x5c216a)return;if(_0x3d69e9===Infinity||_0xf9645c===Infinity)return;if(isNaN(_0x3d69e9)||isNaN(_0xf9645c))return;_0x4dfcea=_0x4dfcea||0x0;if(_0x4dfcea>0x0){if(_0x5f322f(0x2dc)!==_0x5f322f(0x277)){if(_0x5c216a[_0x5f322f(0x4aa)]>_0x3d69e9)_0x3d69e9+=_0x5c216a[_0x5f322f(0x8b9)]/0x2+_0x4dfcea;if(_0x5c216a['_baseX']<_0x3d69e9)_0x3d69e9-=_0x5c216a[_0x5f322f(0x8b9)]/0x2+_0x4dfcea;}else{const _0x5673f3=this[_0x5f322f(0x2ee)](_0x41b9c8)['battler']();if(!_0x5673f3)return;const _0x3aead5=this['battleLayoutStyle'](),_0x457fae=this[_0x5f322f(0x8e0)](_0x459605);let _0xbfc01f=_0x58f070[_0x5f322f(0x92a)](_0x457fae['x']+_0x457fae[_0x5f322f(0x8b9)]/0x2)+this[_0x5f322f(0x4b9)];[_0x5f322f(0x7df)]['includes'](_0x3aead5)&&(_0xbfc01f=_0x457fae[_0x5f322f(0x8b9)]/_0x501dd8[_0x5f322f(0x57d)]()[_0x5f322f(0xd36)],_0xbfc01f*=_0x42b04e,_0xbfc01f+=_0x457fae[_0x5f322f(0x8b9)]/_0x517e89['battleMembers']()[_0x5f322f(0xd36)]/0x2);let _0x1c5430=_0x4292c1['round'](this[_0x5f322f(0x66e)](_0x1f467d,_0x5673f3,_0x457fae));_0x5673f3[_0x5f322f(0x1b1)](_0xbfc01f,_0x1c5430),this[_0x5f322f(0x660)](_0x5673f3,0x1),_0x5673f3[_0x5f322f(0x216)](),this[_0x5f322f(0x188)](),this[_0x5f322f(0x6f1)]();}}if(_0x3bd6b2)this[_0x5f322f(0xd3f)](_0x3d69e9,_0xf9645c,![]);_0x3d69e9-=_0x5c216a[_0x5f322f(0xbac)],_0xf9645c-=_0x5c216a[_0x5f322f(0x8b6)],_0x5c216a[_0x5f322f(0xd1b)](_0x3d69e9,_0xf9645c,_0x2cf7fc);if(Imported[_0x5f322f(0x376)])_0x5c216a['setMoveEasingType'](_0x4b14fc||_0x5f322f(0x23a));},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x383)]=function(_0x378666,_0x2803f8,_0x283b47,_0x48a682,_0x4952ba){const _0x24ae74=_0x57e85a;if(!$gameSystem[_0x24ae74(0xe14)]())return;const _0x30402c=this[_0x24ae74(0x3ab)]();if(!_0x30402c)return;if(_0x48a682)this[_0x24ae74(0xd3f)](_0x378666+_0x30402c['_baseX'],_0x2803f8+_0x30402c[_0x24ae74(0x20d)],![]);_0x378666+=_0x30402c[_0x24ae74(0xbac)],_0x2803f8+=_0x30402c[_0x24ae74(0x8b6)],_0x30402c['startHomeMove'](_0x378666,_0x2803f8,_0x283b47,_0x4952ba),this['_forcedHomeX']=_0x378666,this[_0x24ae74(0x987)]=_0x2803f8;},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x491)]=function(_0x4cd4d2,_0x8f1d7d,_0xcbeb3d,_0x33481d,_0x275cd7,_0x5b31e4){const _0x367faa=_0x57e85a;if(!$gameSystem['isSideView']())return;const _0x19f447=this[_0x367faa(0x3ab)]();if(!_0x19f447)return;_0x5b31e4=_0x5b31e4||0x0;if(_0x5b31e4>0x0){if(_0x367faa(0x3ad)!=='lxFvk'){if(_0x19f447[_0x367faa(0x4aa)]>_0x4cd4d2)_0x4cd4d2+=_0x19f447[_0x367faa(0x8b9)]/0x2+_0x5b31e4;if(_0x19f447['_baseX']<_0x4cd4d2)_0x4cd4d2-=_0x19f447[_0x367faa(0x8b9)]/0x2+_0x5b31e4;}else _0x477467[_0x367faa(0x734)][_0x367faa(0x351)][_0x367faa(0xa23)](this,_0x2896fb),this[_0x367faa(0x8d9)]();}if(_0x33481d)this[_0x367faa(0xd3f)](_0x4cd4d2,_0x8f1d7d,![]);_0x19f447[_0x367faa(0x405)](_0x4cd4d2,_0x8f1d7d,_0xcbeb3d,_0x275cd7),this[_0x367faa(0xc9b)]=_0x4cd4d2,this[_0x367faa(0x987)]=_0x8f1d7d;},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xcdf)]=function(_0x137522,_0x2b10fb,_0x2641c9){const _0x346c82=_0x57e85a;if(!$gameSystem['isSideView']())return;const _0x1a4a56=this[_0x346c82(0x3ab)]();if(!_0x1a4a56)return;_0x1a4a56[_0x346c82(0x263)](_0x137522,_0x2b10fb,_0x2641c9);},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x553)]=function(_0x366cf8,_0x412cca){const _0x3fe66c=_0x57e85a;if(!$gameSystem[_0x3fe66c(0xe14)]())return;const _0x50786f=this['battler']();if(!_0x50786f)return;_0x50786f[_0x3fe66c(0x2d9)](_0x366cf8,_0x412cca);},Game_Battler[_0x57e85a(0x16f)]['spinBattler']=function(_0x2302c2,_0x70824e,_0xc76df2,_0x3992d0){const _0x123368=_0x57e85a;if(!$gameSystem['isSideView']())return;const _0x24cf31=this[_0x123368(0x3ab)]();if(!_0x24cf31)return;_0x24cf31[_0x123368(0xa88)](_0x2302c2,_0x70824e,_0xc76df2,_0x3992d0);},Game_Battler['prototype'][_0x57e85a(0x8da)]=function(_0x475bec,_0xdeb0be,_0x56109a,_0x58a41a){const _0x2dba3b=_0x57e85a;if(!$gameSystem[_0x2dba3b(0xe14)]())return;const _0x3dc6c4=this[_0x2dba3b(0x3ab)]();if(!_0x3dc6c4)return;this['isActor']()&&(_0x475bec*=-0x1,_0xdeb0be*=-0x1),_0x3dc6c4[_0x2dba3b(0x7f3)](_0x475bec,_0xdeb0be,_0x56109a,_0x58a41a);},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xd90)]=function(_0x24ff73,_0x47ce13,_0x3b4efd,_0x41d5b2){const _0x39f719=_0x57e85a;if(!$gameSystem[_0x39f719(0xe14)]())return;const _0x287eb5=this[_0x39f719(0x3ab)]();if(!_0x287eb5)return;_0x287eb5[_0x39f719(0x4b6)](_0x24ff73,_0x47ce13,_0x3b4efd,_0x41d5b2);},Game_Battler['prototype']['changeBattlerOpacity']=function(_0x4561f8,_0x4c7d82,_0x2a2583){const _0x5177e9=_0x57e85a;if(!$gameSystem[_0x5177e9(0xe14)]())return;const _0x2c89ef=this['battler']();if(!_0x2c89ef)return;_0x2c89ef[_0x5177e9(0x999)](_0x4561f8,_0x4c7d82,_0x2a2583);},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x662)]=function(){const _0x41d478=_0x57e85a,_0x4ddba1=!!this[_0x41d478(0x7db)];this[_0x41d478(0x7db)]=undefined;if(_0x4ddba1){if(_0x41d478(0x34d)===_0x41d478(0x18d)){if(!_0x489d5d[_0x41d478(0x4b2)]())return;_0x511238[_0x41d478(0x15e)](_0x47e554,_0x255464);const _0xf2c24f=_0x110958[_0x41d478(0x9e4)],_0x4a0965=_0x3ccf6a['CopyCombatLog']&&_0x466245[_0x41d478(0x4c7)];_0xf2c24f[_0x41d478(0x3fd)](_0x1615b8[_0x41d478(0x942)]),_0x4a0965&&_0x52adf6['VisuMZ_4_CombatLog']&&_0x5f1d70[_0x41d478(0xcc9)](_0x1a6dbb[_0x41d478(0x942)]||'',_0x4db44c[_0x41d478(0x44a)]||0x0);}else this[_0x41d478(0x26a)](),this[_0x41d478(0x517)]();}},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x517)]=function(){const _0x198a5d=_0x57e85a;if(!SceneManager['isSceneBattle']())return;const _0x1df867=this[_0x198a5d(0x3ab)]();if(!_0x1df867)return;let _0x5eea2b=this[_0x198a5d(0x7d1)]()?_0x1df867[_0x198a5d(0xc4d)]:_0x1df867[_0x198a5d(0x9fb)]['_weaponSprite'];_0x5eea2b&&('DZWuF'!=='YlJBg'?_0x5eea2b[_0x198a5d(0xb62)](0x0):this['startMotion'](_0x198a5d(0x6b7)));},Game_Battler[_0x57e85a(0x16f)]['freezeMotion']=function(_0x27371a,_0x233aa2,_0x37feaf){const _0x2c2a8c=_0x57e85a;if(this[_0x2c2a8c(0xd89)]()&&!this[_0x2c2a8c(0x87a)]())return;let _0x3b1c54=0x0,_0x3038fe=0x0;_0x27371a[_0x2c2a8c(0x392)](/ATTACK[ ](\d+)/i)&&(_0x3038fe=Number(RegExp['$1']),_0x3038fe--);if(this[_0x2c2a8c(0x7d1)]()){const _0x12cac6=this['weapons']();_0x3b1c54=_0x12cac6[_0x3038fe]?_0x12cac6[_0x3038fe][_0x2c2a8c(0x6e1)]:0x0;}else{if(this[_0x2c2a8c(0xd89)]()){if(_0x2c2a8c(0x27e)!=='IssvU')return _0x54e66b[_0x2c2a8c(0x5dd)]();else _0x3b1c54=this[_0x2c2a8c(0x8f7)]()[_0x2c2a8c(0x6e1)]||0x0;}}const _0x166f04=$dataSystem[_0x2c2a8c(0x5d0)][_0x3b1c54];_0x27371a[_0x2c2a8c(0x392)](/attack/i)&&(_0x27371a=[_0x2c2a8c(0x416),_0x2c2a8c(0x22b),_0x2c2a8c(0x9c0)][_0x166f04['type']]||_0x2c2a8c(0x22b)),this[_0x2c2a8c(0x7db)]={'motionType':_0x27371a,'weaponImageId':_0x233aa2?_0x166f04[_0x2c2a8c(0x98a)]:0x0,'pattern':_0x37feaf};},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0xc74)]=function(_0x29ae28){const _0x416684=_0x57e85a;if(!_0x29ae28)return![];return _0x29ae28[_0x416684(0xafb)]()===this[_0x416684(0xafb)]();},Game_Battler['prototype'][_0x57e85a(0x29c)]=function(_0x156f4d){const _0x23049f=_0x57e85a;if(!_0x156f4d)return![];return _0x156f4d[_0x23049f(0xd05)]()===this[_0x23049f(0xafb)]();},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x516)]=function(){return![];},Game_Actor[_0x57e85a(0x16f)]['hasStaticSvBattler']=function(){const _0x1e0c55=_0x57e85a;return this[_0x1e0c55(0xb20)]()[_0x1e0c55(0x392)](/\$/i);},Game_Enemy[_0x57e85a(0x16f)]['hasStaticSvBattler']=function(){const _0x5e72dc=_0x57e85a;return this[_0x5e72dc(0x87a)]()&&this[_0x5e72dc(0xe0a)]()[_0x5e72dc(0x392)](/\$/i);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x9dc)]=Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0xb62)],Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0xb62)]=function(_0x559d13){const _0x29740c=_0x57e85a;VisuMZ[_0x29740c(0x734)][_0x29740c(0x9dc)][_0x29740c(0xa23)](this,_0x559d13),this[_0x29740c(0xd67)]();},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0xd67)]=function(){const _0x115425=_0x57e85a;this[_0x115425(0xa98)]='',this[_0x115425(0x2ee)]()&&this[_0x115425(0x2ee)]()[_0x115425(0x40f)][_0x115425(0x392)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x115425(0xa98)]=String(RegExp['$1']));},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0x8eb)]=function(){const _0x281106=_0x57e85a;if(this['getBattlePortrait']()!==''){if(_0x281106(0x928)===_0x281106(0x8a9))_0x4b15d0[_0x281106(0x913)](_0x281106(0xad0));else return this[_0x281106(0xce5)]();}else{if(Imported[_0x281106(0xbe2)]&&this[_0x281106(0xb8d)]()!==''){if(_0x281106(0x64b)===_0x281106(0x209)){if(this[_0x281106(0x4c1)]())return _0x12c589;return _0xe8bc0a=this[_0x281106(0x38b)](_0x17c8b4),_0x2db582=this[_0x281106(0x9ab)](_0x17486f),_0x4c4215;}else return this[_0x281106(0xb8d)]();}}return'';},Game_Actor['prototype'][_0x57e85a(0xce5)]=function(){const _0x144a3f=_0x57e85a;if(this['_battlePortrait']===undefined)this[_0x144a3f(0xd67)]();return this[_0x144a3f(0xa98)];},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0xccd)]=function(_0xe01bf9){const _0x5dd1fe=_0x57e85a;if(this['_battlePortrait']===undefined)this[_0x5dd1fe(0xd67)]();this[_0x5dd1fe(0xa98)]=_0xe01bf9;if(SceneManager[_0x5dd1fe(0x4b2)]()&&$gameParty[_0x5dd1fe(0x57d)]()[_0x5dd1fe(0x3af)](this)){if(_0x5dd1fe(0x70c)!==_0x5dd1fe(0x813)){const _0x546330=SceneManager[_0x5dd1fe(0xd04)][_0x5dd1fe(0x912)];if(_0x546330){if(_0x5dd1fe(0x292)!==_0x5dd1fe(0xd07))_0x546330[_0x5dd1fe(0x7a2)](this);else{_0x4f77a5=_0x17447b||'',_0x5e65ea=_0x2fd760||'';_0x238ef2===''&&_0x5451a1===''&&(_0x5ac8ff=this[_0x5dd1fe(0x2ed)][_0x5dd1fe(0x1bd)](),_0x4c571e=this[_0x5dd1fe(0x99e)][_0x5dd1fe(0xc6b)]());const _0x92135b=_0x554ed0[_0x5dd1fe(0x673)](_0x31501f),_0x4bd2b0=_0x3c98f8[_0x5dd1fe(0x9b8)](_0x1c7da5);_0x92135b[_0x5dd1fe(0x53d)](this[_0x5dd1fe(0x48d)][_0x5dd1fe(0xc81)](this,this['_back1Sprite'],this[_0x5dd1fe(0x99e)],_0x92135b,_0x4bd2b0));}}}else return _0x5e5b2d[_0x5dd1fe(0x734)]['Settings'][_0x5dd1fe(0x7f9)][_0x5dd1fe(0x536)];}},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0x9ca)]=function(){return!![];},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0x471)]=function(){const _0x1c42be=_0x57e85a;if(!this[_0x1c42be(0x448)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler[_0x1c42be(0x16f)][_0x1c42be(0x471)][_0x1c42be(0xa23)](this);},VisuMZ[_0x57e85a(0x734)]['Game_Actor_makeActionList']=Game_Actor['prototype']['makeActionList'],Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0xd33)]=function(){const _0x4fe2c4=_0x57e85a;if(BattleManager[_0x4fe2c4(0x449)]&&!ConfigManager[_0x4fe2c4(0xa9f)])return this[_0x4fe2c4(0x3dc)]();else{if(_0x4fe2c4(0x180)!==_0x4fe2c4(0x180)){if(this[_0x4fe2c4(0x879)][_0x4fe2c4(0x403)]!==_0x13d175)return this['_cache'][_0x4fe2c4(0x403)];let _0x2b610b=_0x3eef9c[_0x4fe2c4(0x734)][_0x4fe2c4(0x478)][_0x4fe2c4(0x573)][_0x4fe2c4(0x171)];const _0x810089=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x35c761=this['traitObjects']()['map'](_0x336808=>_0x336808&&_0x336808[_0x4fe2c4(0x40f)][_0x4fe2c4(0x392)](_0x810089)?_0x1afe88(_0x3f6200['$1'])/0x64:0x0);return _0x2b610b=_0x35c761[_0x4fe2c4(0xba1)]((_0x4872f8,_0x5ed757)=>_0x4872f8+_0x5ed757,_0x2b610b),this[_0x4fe2c4(0x879)][_0x4fe2c4(0x403)]=_0x2b610b,this[_0x4fe2c4(0x879)]['softDamageCap'][_0x4fe2c4(0x1fc)](0.01,0x1);}else{return VisuMZ[_0x4fe2c4(0x734)]['Game_Actor_makeActionList'][_0x4fe2c4(0xa23)](this);;}}},Game_Actor[_0x57e85a(0x16f)]['makeActionListAutoAttack']=function(){const _0x1aaa1d=_0x57e85a,_0x4264a4=[],_0x2cfabf=new Game_Action(this);return _0x2cfabf[_0x1aaa1d(0x4a2)](),_0x4264a4[_0x1aaa1d(0x5fa)](_0x2cfabf),_0x4264a4;},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0xdb7)]=function(){const _0xb68a05=_0x57e85a;return this['currentClass']()[_0xb68a05(0x40f)][_0xb68a05(0x392)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0xb68a05(0xc06)](/[\r\n]+/):VisuMZ[_0xb68a05(0x734)][_0xb68a05(0x478)][_0xb68a05(0x16c)][_0xb68a05(0x3c6)];},Game_Actor['prototype'][_0x57e85a(0x4df)]=function(){const _0x14a70e=_0x57e85a;if(this['_cache'][_0x14a70e(0x850)]!==undefined)return this['_cache'][_0x14a70e(0x850)];return this[_0x14a70e(0x2ee)]()[_0x14a70e(0x40f)][_0x14a70e(0x392)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x14a70e(0x850)]=eval(RegExp['$1']),this[_0x14a70e(0x879)][_0x14a70e(0x621)]=eval(RegExp['$2'])):this[_0x14a70e(0x879)][_0x14a70e(0x850)]=Game_Battler[_0x14a70e(0x16f)][_0x14a70e(0x4df)][_0x14a70e(0xa23)](this),this['_cache']['svAnchorX'];},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0xbcd)]=function(){const _0x198e9e=_0x57e85a;if(this['_cache']['svAnchorY']!==undefined)return this[_0x198e9e(0x879)][_0x198e9e(0x621)];return this['actor']()[_0x198e9e(0x40f)][_0x198e9e(0x392)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x198e9e(0x879)][_0x198e9e(0x850)]=eval(RegExp['$1']),this[_0x198e9e(0x879)]['svAnchorY']=eval(RegExp['$2'])):this[_0x198e9e(0x879)][_0x198e9e(0x621)]=Game_Battler[_0x198e9e(0x16f)][_0x198e9e(0xbcd)][_0x198e9e(0xa23)](this),this[_0x198e9e(0x879)]['svAnchorY'];},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0x996)]=function(){const _0x1813e5=_0x57e85a;if(this[_0x1813e5(0x879)][_0x1813e5(0x4a0)]!==undefined)return this[_0x1813e5(0x879)]['svShadow'];if(this[_0x1813e5(0x2ee)]()['note'][_0x1813e5(0x392)](/<SIDEVIEW SHOW SHADOW>/i)){if(_0x1813e5(0xd7a)!==_0x1813e5(0x98d))this[_0x1813e5(0x879)][_0x1813e5(0x4a0)]=!![];else{const _0x2ccdd1=_0x4e44d6(_0x47ed7e['$1'])[_0x1813e5(0xc06)](/[\r\n]+/)['remove'](''),_0x3fa42f=_0x52bf00[_0x1813e5(0xdf3)](_0x2ccdd1);_0x217939[_0x1813e5(0x6e1)]=_0x51ea2c['getWtypeIdWithName'](_0x3fa42f);}}else this['actor']()[_0x1813e5(0x40f)][_0x1813e5(0x392)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x1813e5(0x879)]['svShadow']=![]:_0x1813e5(0xb4d)!==_0x1813e5(0x642)?this[_0x1813e5(0x879)][_0x1813e5(0x4a0)]=Game_Battler['prototype']['svBattlerShadowVisible']['call'](this):(this[_0x1813e5(0xa85)](),_0xa55691[_0x1813e5(0x734)][_0x1813e5(0x4c0)][_0x1813e5(0xa23)](this));return this[_0x1813e5(0x879)][_0x1813e5(0x4a0)];},Game_Actor[_0x57e85a(0x16f)]['battlerSmoothImage']=function(){const _0x19c1d9=_0x57e85a;return VisuMZ[_0x19c1d9(0x734)][_0x19c1d9(0x478)][_0x19c1d9(0x876)]['SmoothImage'];},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0xc28)]=function(){const _0x4bd19f=_0x57e85a,_0x35e01b=this[_0x4bd19f(0xa24)](),_0x35af68=_0x35e01b[0x0]?_0x35e01b[0x0][_0x4bd19f(0x6e1)]:0x0,_0xcfbb09=$dataSystem[_0x4bd19f(0x5d0)][_0x35af68];if(_0xcfbb09){if(_0x4bd19f(0xd69)==='pLWPv')this[_0x4bd19f(0x7b3)](_0xcfbb09[_0x4bd19f(0x98a)]);else return this[_0x4bd19f(0xafb)]()['trueRandomTarget']();}},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0xca4)]=function(_0x1cdb80){const _0x2ef428=_0x57e85a;Game_Battler[_0x2ef428(0x16f)]['performAction'][_0x2ef428(0xa23)](this,_0x1cdb80),this[_0x2ef428(0x966)](_0x1cdb80);},Game_Actor[_0x57e85a(0x16f)]['getAttackMotion']=function(){const _0x3ec37f=_0x57e85a,_0x3ad56c=this[_0x3ec37f(0xa24)](),_0x2b166f=_0x3ad56c[0x0]?_0x3ad56c[0x0]['wtypeId']:0x0;return $dataSystem['attackMotions'][_0x2b166f];},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0xd34)]=function(_0x5c420d){const _0x32a5cf=_0x57e85a;_0x5c420d=_0x5c420d||0x1,_0x5c420d--;const _0x526c8a=this[_0x32a5cf(0xa24)]();return _0x526c8a[_0x5c420d]?_0x526c8a[_0x5c420d][_0x32a5cf(0x68e)]:0x0;},Game_Actor['prototype'][_0x57e85a(0xd7d)]=function(_0x33c4b4){const _0x5f075d=_0x57e85a;_0x33c4b4=_0x33c4b4||0x1,_0x33c4b4--;const _0x342743=this[_0x5f075d(0xa24)](),_0x55df24=_0x342743[_0x33c4b4]?_0x342743[_0x33c4b4][_0x5f075d(0x6e1)]:0x0;return $dataSystem['attackMotions'][_0x55df24];},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0x747)]=function(_0xb4eb0c){const _0x1e63c8=_0x57e85a;_0xb4eb0c=_0xb4eb0c||0x1,_0xb4eb0c--;const _0x27d36c=this['weapons'](),_0x43d5fb=_0x27d36c[_0xb4eb0c]?_0x27d36c[_0xb4eb0c][_0x1e63c8(0x6e1)]:0x0,_0xcf08de=$dataSystem['attackMotions'][_0x43d5fb];if(_0xcf08de){if(_0xcf08de[_0x1e63c8(0x24b)]===0x0)this[_0x1e63c8(0x4c9)](_0x1e63c8(0x416));else{if(_0xcf08de['type']===0x1)this[_0x1e63c8(0x4c9)](_0x1e63c8(0x22b));else _0xcf08de[_0x1e63c8(0x24b)]===0x2&&this[_0x1e63c8(0x4c9)]('missile');}this[_0x1e63c8(0x7b3)](_0xcf08de[_0x1e63c8(0x98a)]);}},Game_Battler['prototype'][_0x57e85a(0x808)]=function(_0x15c54f){const _0x7eae6f=_0x57e85a;if(this[_0x7eae6f(0x7d1)]()){const _0x3ec4d1=this[_0x7eae6f(0xa24)]();if(_0x3ec4d1[_0x7eae6f(0xd36)]>0x0){const _0x44e506=_0x3ec4d1[_0x15c54f];if(_0x44e506)_0x15c54f=this[_0x7eae6f(0x65d)]()[_0x7eae6f(0x9b6)](_0x44e506);}}this[_0x7eae6f(0x195)]=_0x15c54f||0x0,this[_0x7eae6f(0x879)]={};},Game_Battler[_0x57e85a(0x16f)][_0x57e85a(0x649)]=function(){const _0xcd3c77=_0x57e85a;this['_activeWeaponSlot']=this['_activeWeaponSlot']||0x0,this['_activeWeaponSlot']++,this[_0xcd3c77(0x879)]={};},Game_Battler['prototype']['clearActiveWeaponSlot']=function(){const _0x52f8c9=_0x57e85a;this[_0x52f8c9(0x195)]=undefined,this[_0x52f8c9(0x879)]={};},VisuMZ['BattleCore'][_0x57e85a(0x683)]=Game_Actor[_0x57e85a(0x16f)]['equips'],Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0x65d)]=function(){const _0x6d5bf3=_0x57e85a;let _0x453467=VisuMZ['BattleCore'][_0x6d5bf3(0x683)]['call'](this);if(this[_0x6d5bf3(0x6c8)])return _0x453467;if(this[_0x6d5bf3(0x195)]!==undefined){this[_0x6d5bf3(0x6c8)]=!![];const _0xbf85b8=this[_0x6d5bf3(0x1ca)]();for(let _0x3cb62c=0x0;_0x3cb62c<_0xbf85b8[_0x6d5bf3(0xd36)];_0x3cb62c++){if(_0x6d5bf3(0x30f)===_0x6d5bf3(0x30f))_0xbf85b8[_0x3cb62c]===0x1&&this[_0x6d5bf3(0x195)]!==_0x3cb62c&&(_0x6d5bf3(0x52c)!==_0x6d5bf3(0xa07)?_0x453467[_0x3cb62c]=null:(_0x577572&&_0x17c365['isActor']()&&_0x58e76d['setActiveWeaponSlot'](_0x270a59),this[_0x6d5bf3(0x8d9)]()));else return!![];}this[_0x6d5bf3(0x6c8)]=undefined;}return _0x453467;},Window_BattleLog['prototype'][_0x57e85a(0x5f4)]=function(_0x135e7e){const _0x38604d=_0x57e85a;if(_0x135e7e[_0x38604d(0x7d1)]())return _0x135e7e[_0x38604d(0xa24)]()[_0x38604d(0xd36)]||0x1;else{if(_0x38604d(0x4f4)===_0x38604d(0x8f5))_0x59a9fd['result']()[_0x38604d(0x760)]?this[_0x38604d(0x5fa)](_0x38604d(0xbf3),_0xcb8303):this[_0x38604d(0x5fa)](_0x38604d(0x3fb),_0x2a89ee);else return 0x1;}},Window_BattleLog['prototype'][_0x57e85a(0xb86)]=function(_0x3458d9,_0x110902){const _0x12e6f4=_0x57e85a;_0x3458d9&&_0x3458d9[_0x12e6f4(0x7d1)]()&&_0x3458d9['setActiveWeaponSlot'](_0x110902),this[_0x12e6f4(0x8d9)]();},Window_BattleLog[_0x57e85a(0x16f)]['clearActiveWeaponSet']=function(_0x1d56a8){const _0x236ffb=_0x57e85a;if(_0x1d56a8&&_0x1d56a8[_0x236ffb(0x7d1)]()){if(_0x236ffb(0x2c5)===_0x236ffb(0x6a8)){_0x20630b[_0x236ffb(0x392)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x41ff26=_0x397c62(_0x486361['$1']),_0x4d6eed=_0x118914(_0x43c3ac['$2']),_0x102db4=_0x4d6eed===0x1?this[_0x236ffb(0x31e)]:this['_regionBattleback2'],_0x185246=_0x3aece8(_0x5d5f9d['$3']);_0x102db4[_0x41ff26]=_0x185246;}else _0x1d56a8[_0x236ffb(0x628)]();}this[_0x236ffb(0x8d9)]();},Game_Actor[_0x57e85a(0x16f)]['battleUIOffsetX']=function(){const _0x208676=_0x57e85a;let _0x5b1bff='battleUIOffsetX';if(this[_0x208676(0x547)](_0x5b1bff))return this['_cache'][_0x5b1bff];return this[_0x208676(0x879)][_0x5b1bff]=this['createBattleUIOffsetX'](this[_0x208676(0x2ee)]()),this[_0x208676(0x879)][_0x5b1bff];},Game_Actor[_0x57e85a(0x16f)]['battleUIOffsetY']=function(){const _0x3843c7=_0x57e85a;let _0x2e685a='battleUIOffsetY';if(this['checkCacheKey'](_0x2e685a))return this[_0x3843c7(0x879)][_0x2e685a];return this[_0x3843c7(0x879)][_0x2e685a]=this['createBattleUIOffsetY'](this[_0x3843c7(0x2ee)]()),this[_0x3843c7(0x879)][_0x2e685a];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x625)]=Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xb62)],Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xb62)]=function(_0xaceded,_0x2af7de,_0x51a14f){const _0x53e398=_0x57e85a;_0xaceded=DataManager['swapEnemyIDs'](_0xaceded),VisuMZ[_0x53e398(0x734)][_0x53e398(0x625)][_0x53e398(0xa23)](this,_0xaceded,_0x2af7de,_0x51a14f),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x53e398(0x194)](),this[_0x53e398(0xd15)](),this[_0x53e398(0x8ec)](),Imported['VisuMZ_1_ElementStatusCore']&&('gIpoG'!==_0x53e398(0x62f)?this[_0x53e398(0x251)]():this['setup'](_0x1b7143['list'],0x0));},Game_Enemy[_0x57e85a(0x16f)]['clearBattleCoreData']=function(){const _0x20528c=_0x57e85a,_0x5ae9f3=VisuMZ[_0x20528c(0x734)][_0x20528c(0x478)][_0x20528c(0xb30)];this['_attackAnimationId']=_0x5ae9f3[_0x20528c(0xcf8)],this[_0x20528c(0x2da)]={};},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x8ec)]=function(){const _0x46fbda=_0x57e85a,_0x36a00e=VisuMZ['BattleCore']['Settings'][_0x46fbda(0xb30)],_0xfd152b=this[_0x46fbda(0x3f1)]()['note'];this[_0x46fbda(0x2da)]={'name':'','wtypeId':_0x36a00e[_0x46fbda(0x63b)],'collapse':_0x36a00e[_0x46fbda(0x231)],'motionIdle':_0x36a00e['MotionIdle'],'width':_0x36a00e[_0x46fbda(0xa22)]||0x40,'height':_0x36a00e[_0x46fbda(0x1f7)]||0x40,'anchorX':_0x36a00e['AnchorX']||0x0,'anchorY':_0x36a00e[_0x46fbda(0xab8)]||0x0,'shadow':_0x36a00e[_0x46fbda(0xc13)]};_0xfd152b[_0x46fbda(0x392)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x46fbda(0xace)]=Number(RegExp['$1']));const _0x2b30e0=this[_0x46fbda(0x2da)];if(_0xfd152b[_0x46fbda(0x392)](/<SIDEVIEW BATTLER: (.*)>/i))'gTpIe'!==_0x46fbda(0xaba)?_0x2b30e0[_0x46fbda(0x7a3)]=String(RegExp['$1']):_0x57b714[_0x46fbda(0x734)]['ParseWeaponNotetags'][_0x46fbda(0xa23)](this,_0x5ba53e);else{if(_0xfd152b[_0x46fbda(0x392)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x5c9126=String(RegExp['$1'])[_0x46fbda(0xc06)](/[\r\n]+/)['remove']('');_0x2b30e0[_0x46fbda(0x7a3)]=DataManager[_0x46fbda(0xdf3)](_0x5c9126);}}_0xfd152b[_0x46fbda(0x392)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x2b30e0[_0x46fbda(0xd76)]=eval(RegExp['$1']),_0x2b30e0['anchorY']=eval(RegExp['$2']));if(_0xfd152b[_0x46fbda(0x392)](/<SIDEVIEW COLLAPSE>/i)){if(_0x46fbda(0x44b)!==_0x46fbda(0x44b)){let _0x50fb21=_0x4a9dd7[_0x46fbda(0x734)][_0x46fbda(0x4c4)][_0x46fbda(0xa23)](this,_0x425e2b);return _0x50fb21=this[_0x46fbda(0x4e6)][_0x46fbda(0x7d8)]*_0x50fb21+this[_0x46fbda(0x4e6)]['hitFlat'],_0x50fb21;}else _0x2b30e0['collapse']=!![];}else _0xfd152b[_0x46fbda(0x392)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x2b30e0[_0x46fbda(0xd0d)]=![]);if(_0xfd152b[_0x46fbda(0x392)](/<SIDEVIEW SHOW SHADOW>/i))_0x2b30e0[_0x46fbda(0xcbc)]=!![];else _0xfd152b[_0x46fbda(0x392)](/<SIDEVIEW HIDE SHADOW>/i)&&('duwxC'!==_0x46fbda(0x7e9)?_0x2b30e0['shadow']=![]:this['requestMotion'](_0x46fbda(0x22b)));if(_0xfd152b['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x2b30e0[_0x46fbda(0xab7)]=String(RegExp['$1'])[_0x46fbda(0x2bc)]()[_0x46fbda(0xdf5)]();else{if(_0xfd152b[_0x46fbda(0x392)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x3c5c72=String(RegExp['$1'])[_0x46fbda(0xc06)](/[\r\n]+/)[_0x46fbda(0xb45)]('');_0x2b30e0[_0x46fbda(0xab7)]=DataManager['processRandomizedData'](_0x3c5c72);}}_0xfd152b[_0x46fbda(0x392)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x2b30e0[_0x46fbda(0x8b9)]=Number(RegExp['$1']),_0x2b30e0[_0x46fbda(0x54b)]=Number(RegExp['$2']));if(_0xfd152b[_0x46fbda(0x392)](/<SIDEVIEW WEAPON: (.*)>/i))_0x46fbda(0x18c)!==_0x46fbda(0x8a2)?_0x2b30e0[_0x46fbda(0x6e1)]=DataManager[_0x46fbda(0xc1d)](RegExp['$1']):_0x5bba93=_0x56011e[this[_0x46fbda(0xd54)][_0x2abc0b]['ext']];else{if(_0xfd152b['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if('lGExj'===_0x46fbda(0x3d6))_0x59b8c4[_0x46fbda(0x632)]=_0x407fd9[_0x46fbda(0xa97)](_0x4fe641);else{const _0x11fc55=String(RegExp['$1'])[_0x46fbda(0xc06)](/[\r\n]+/)[_0x46fbda(0xb45)](''),_0x457409=DataManager[_0x46fbda(0xdf3)](_0x11fc55);_0x2b30e0[_0x46fbda(0x6e1)]=DataManager['getWtypeIdWithName'](_0x457409);}}}if(Imported[_0x46fbda(0x58c)]){const _0x8b1de4=this[_0x46fbda(0x1fe)]();for(const _0x2f7597 of _0x8b1de4){if('AaHwP'!==_0x46fbda(0x434)){const _0x2d6ac9=this[_0x46fbda(0x17b)](_0x2f7597)[_0x46fbda(0x8bc)][_0x46fbda(0x307)]()[_0x46fbda(0xdf5)](),_0x5c92a6=_0x2f7597['toUpperCase']()[_0x46fbda(0xdf5)]();if(_0xfd152b[_0x46fbda(0x392)](VisuMZ[_0x46fbda(0xcef)][_0x46fbda(0x55f)][_0x46fbda(0x92f)['format'](_0x5c92a6,_0x2d6ac9)]))'wjxmf'!=='wjxmf'?this[_0x46fbda(0xb40)]=_0x308e18:_0x2b30e0[_0x46fbda(0x7a3)]=String(RegExp['$1']);else{if(_0xfd152b[_0x46fbda(0x392)](VisuMZ[_0x46fbda(0xcef)][_0x46fbda(0x55f)][_0x46fbda(0xa41)[_0x46fbda(0x554)](_0x5c92a6,_0x2d6ac9)])){const _0x37ec36=String(RegExp['$1'])[_0x46fbda(0xc06)](/[\r\n]+/)[_0x46fbda(0xb45)]('');_0x2b30e0[_0x46fbda(0x7a3)]=DataManager[_0x46fbda(0xdf3)](_0x37ec36);}}if(_0xfd152b[_0x46fbda(0x392)](VisuMZ[_0x46fbda(0xcef)]['RegExp'][_0x46fbda(0xddb)[_0x46fbda(0x554)](_0x5c92a6,_0x2d6ac9)])){if(_0x46fbda(0x472)==='Xlhgf'){_0x27cc95[_0x46fbda(0x16f)]['callUpdateHelp']['call'](this);if(this[_0x46fbda(0x229)])this[_0x46fbda(0x661)]();}else _0x2b30e0[_0x46fbda(0x6e1)]=DataManager[_0x46fbda(0xc1d)](RegExp['$1']);}else{if(_0xfd152b[_0x46fbda(0x392)](VisuMZ[_0x46fbda(0xcef)]['RegExp'][_0x46fbda(0xd6f)['format'](_0x5c92a6,_0x2d6ac9)])){if(_0x46fbda(0x82e)===_0x46fbda(0x908))this[_0x46fbda(0xc1c)]();else{const _0x21b7ca=String(RegExp['$1'])[_0x46fbda(0xc06)](/[\r\n]+/)[_0x46fbda(0xb45)](''),_0x2cea60=DataManager[_0x46fbda(0xdf3)](_0x21b7ca);_0x2b30e0[_0x46fbda(0x6e1)]=DataManager['getWtypeIdWithName'](_0x2cea60);}}}if(_0xfd152b[_0x46fbda(0x392)](VisuMZ[_0x46fbda(0xcef)][_0x46fbda(0x55f)][_0x46fbda(0xc1f)[_0x46fbda(0x554)](_0x5c92a6,_0x2d6ac9)]))_0x2b30e0['motionIdle']=String(RegExp['$1'])['toLowerCase']()[_0x46fbda(0xdf5)]();else{if(_0xfd152b[_0x46fbda(0x392)](VisuMZ['ElementStatusCore'][_0x46fbda(0x55f)][_0x46fbda(0x7af)['format'](_0x5c92a6,_0x2d6ac9)])){if('RzxAS'===_0x46fbda(0x2a3)){const _0x9a6c33=_0x5517b4['x']+_0x5aa501[_0x46fbda(0x7f8)]((_0x3f6cac[_0x46fbda(0x8b9)]-_0x42aabe)/0x2);this['drawTextEx'](_0x51d561,_0x9a6c33,_0x57f756['y'],_0x32f8b5);}else{const _0x468c8a=String(RegExp['$1'])[_0x46fbda(0xc06)](/[\r\n]+/)['remove']('');_0x2b30e0[_0x46fbda(0xab7)]=DataManager[_0x46fbda(0xdf3)](_0x468c8a);}}}}else _0x446d6d['addStateTurns'](_0x5a2ce2,_0x58cec2);}}},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xbd9)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xb1b)]=function(){const _0x6d79b5=_0x57e85a;return this[_0x6d79b5(0xbd9)]();},Game_Enemy['prototype'][_0x57e85a(0xd34)]=function(_0xe0d06b){const _0x101ff2=_0x57e85a;return this[_0x101ff2(0xbd9)]();},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x652)]=function(){const _0xe21991=_0x57e85a;if(this[_0xe21991(0x3f1)]()['note'][_0xe21991(0x392)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0xe21991(0x16f)][_0xe21991(0x652)]['call'](this);},Game_Enemy['prototype'][_0x57e85a(0x287)]=function(){const _0x17faf2=_0x57e85a;if(this[_0x17faf2(0x3f1)]()[_0x17faf2(0x40f)][_0x17faf2(0x392)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x352)]=function(){const _0x5c06b9=_0x57e85a,_0x1877ee=[];for(const _0x4890fa of this[_0x5c06b9(0x3f1)]()[_0x5c06b9(0x1d4)]){const _0x5a6cfb=$dataSkills[_0x4890fa['skillId']];if(_0x5a6cfb&&!_0x1877ee[_0x5c06b9(0x3af)](_0x5a6cfb))_0x1877ee[_0x5c06b9(0x5fa)](_0x5a6cfb);}return _0x1877ee;},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x510)]=function(){const _0x3bd962=_0x57e85a;let _0x472252=_0x3bd962(0x510);if(this['checkCacheKey'](_0x472252))return this[_0x3bd962(0x879)][_0x472252];return this[_0x3bd962(0x879)][_0x472252]=this[_0x3bd962(0xae6)](this[_0x3bd962(0x3f1)]()),this[_0x3bd962(0x879)][_0x472252];},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x6c1)]=function(){const _0x8f975d=_0x57e85a;let _0x262a50=_0x8f975d(0x6c1);if(this[_0x8f975d(0x547)](_0x262a50))return this['_cache'][_0x262a50];return this['_cache'][_0x262a50]=this[_0x8f975d(0xd18)](this[_0x8f975d(0x3f1)]()),this[_0x8f975d(0x879)][_0x262a50];},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x8f7)]=function(){const _0x28436d=_0x57e85a;if(this[_0x28436d(0x2da)]!==undefined)return this[_0x28436d(0x2da)];return this[_0x28436d(0x8ec)](),this['_svBattlerData'];},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x87a)]=function(){const _0x1ae446=_0x57e85a;return this[_0x1ae446(0x8f7)]()['name']!=='';},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xe0a)]=function(){const _0x3d392=_0x57e85a;return this[_0x3d392(0x8f7)]()['name'];},Game_Enemy[_0x57e85a(0x16f)]['battlerSmoothImage']=function(){const _0x780c13=_0x57e85a;return this['hasSvBattler']()?VisuMZ[_0x780c13(0x734)]['Settings'][_0x780c13(0x876)][_0x780c13(0x30c)]:_0x780c13(0x812)!==_0x780c13(0xd49)?VisuMZ[_0x780c13(0x734)]['Settings'][_0x780c13(0xb30)][_0x780c13(0x30c)]:_0x823d4d[_0x780c13(0x8a1)]();},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xca4)]=function(_0x21d8f6){const _0x4a867f=_0x57e85a;Game_Battler[_0x4a867f(0x16f)][_0x4a867f(0xca4)][_0x4a867f(0xa23)](this,_0x21d8f6);if(this[_0x4a867f(0x87a)]())this[_0x4a867f(0x966)](_0x21d8f6);},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xafa)]=function(){const _0x4ecb8f=_0x57e85a,_0x42b3b5=this[_0x4ecb8f(0x8f7)]()[_0x4ecb8f(0x6e1)]||0x0,_0x4b9e92=$dataSystem[_0x4ecb8f(0x5d0)][_0x42b3b5];if(_0x4b9e92){if(_0x4b9e92['type']===0x0)this[_0x4ecb8f(0x4c9)](_0x4ecb8f(0x416));else{if(_0x4b9e92['type']===0x1){if(_0x4ecb8f(0xa9d)!=='SxVBk')this[_0x4ecb8f(0x4c9)](_0x4ecb8f(0x22b));else{if(!this[_0x4ecb8f(0x687)]())return![];return _0x287228[_0x4ecb8f(0x734)]['Game_BattlerBase_canAttack'][_0x4ecb8f(0xa23)](this);}}else _0x4b9e92['type']===0x2&&this[_0x4ecb8f(0x4c9)](_0x4ecb8f(0x9c0));}}},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xc28)]=function(){const _0x36f1df=_0x57e85a,_0x58c58f=this[_0x36f1df(0x8f7)]()[_0x36f1df(0x6e1)]||0x0,_0x4ea985=$dataSystem[_0x36f1df(0x5d0)][_0x58c58f];_0x4ea985&&('Sqyqk'==='Sqyqk'?this['startWeaponAnimation'](_0x4ea985['weaponImageId']):this[_0x36f1df(0x280)]());},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x8f0)]=function(){const _0x12cc50=_0x57e85a,_0x10dacc=this[_0x12cc50(0x8f7)]()[_0x12cc50(0x6e1)]||0x0;return $dataSystem[_0x12cc50(0x5d0)][_0x10dacc];},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xd7d)]=function(_0x23dc85){return this['getAttackMotion']();},Game_Enemy['prototype'][_0x57e85a(0xa1c)]=function(){const _0x4f447c=_0x57e85a;Game_Battler[_0x4f447c(0x16f)][_0x4f447c(0xa1c)][_0x4f447c(0xa23)](this),this['isSpriteVisible']()&&this[_0x4f447c(0x87a)]()&&this[_0x4f447c(0x4c9)](_0x4f447c(0x356)),SoundManager[_0x4f447c(0x59b)]();},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xbf3)]=function(){const _0x451fd2=_0x57e85a;Game_Battler[_0x451fd2(0x16f)][_0x451fd2(0xbf3)][_0x451fd2(0xa23)](this),this[_0x451fd2(0x4c9)](_0x451fd2(0xa91));},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x3fb)]=function(){const _0x22bdb5=_0x57e85a;Game_Battler['prototype'][_0x22bdb5(0x3fb)]['call'](this),this[_0x22bdb5(0x4c9)](_0x22bdb5(0xa91));},Game_Enemy['prototype']['performCounter']=function(){const _0x26cfaf=_0x57e85a;Game_Battler['prototype']['performCounter'][_0x26cfaf(0xa23)](this),this['performAttack']();},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x829)]=function(){const _0x412d91=_0x57e85a;if(this[_0x412d91(0x87a)]()){if(this[_0x412d91(0x1c2)]()>=0x1)return!![];return this[_0x412d91(0x8f7)]()[_0x412d91(0xd0d)];}else return!![];},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x4df)]=function(){const _0x28b521=_0x57e85a;return this[_0x28b521(0x8f7)]()['anchorX'];},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xbcd)]=function(){const _0x5c3be8=_0x57e85a;return this[_0x5c3be8(0x8f7)]()[_0x5c3be8(0x466)];},Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x996)]=function(){const _0x12d737=_0x57e85a;return this[_0x12d737(0x8f7)]()[_0x12d737(0xcbc)];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x388)]=Game_Enemy[_0x57e85a(0x16f)]['transform'],Game_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x96c)]=function(_0x246c99){const _0x4f6e7a=_0x57e85a;VisuMZ[_0x4f6e7a(0x734)][_0x4f6e7a(0x388)][_0x4f6e7a(0xa23)](this,_0x246c99),this['clearBattleCoreData'](),this['setupBattleCoreData']();const _0x225563=this[_0x4f6e7a(0x3ab)]();_0x225563&&(_0x4f6e7a(0x776)!=='wiHif'?(_0x46cb71+=_0x2f25b6[_0x4f6e7a(0x7d1)]()?-_0x554273:_0x4ebabb,_0x35c12+=_0xe02343[_0x4f6e7a(0x7d1)]()?-_0x3197c7:_0x46b676):(_0x225563[_0x4f6e7a(0x239)]=undefined,_0x225563['setBattler'](this)));},Game_Unit[_0x57e85a(0x16f)][_0x57e85a(0x830)]=function(_0x509fa6){const _0x3f3692=_0x57e85a;for(const _0x5006a2 of this['members']()){if(_0x3f3692(0xb5f)===_0x3f3692(0xb5f)){if(_0x5006a2)_0x5006a2['processBattleCoreJS'](_0x509fa6);}else{_0x2ec838['BattleCore'][_0x3f3692(0x388)]['call'](this,_0xea650b),this[_0x3f3692(0xd15)](),this[_0x3f3692(0x8ec)]();const _0x1b46e1=this[_0x3f3692(0x3ab)]();_0x1b46e1&&(_0x1b46e1['_battlerName']=_0xf43fc7,_0x1b46e1[_0x3f3692(0xb01)](this));}}},Game_Unit[_0x57e85a(0x16f)][_0x57e85a(0xe1c)]=function(){const _0x1e7211=_0x57e85a,_0x2ddd64=this['aliveMembers']();return _0x2ddd64[Math['randomInt'](_0x2ddd64[_0x1e7211(0xd36)])];},VisuMZ[_0x57e85a(0x734)]['Game_Party_addActor']=Game_Party[_0x57e85a(0x16f)][_0x57e85a(0xa87)],Game_Party['prototype'][_0x57e85a(0xa87)]=function(_0x4b46ab){const _0x4eb4cd=_0x57e85a;VisuMZ['BattleCore']['Game_Party_addActor']['call'](this,_0x4b46ab),BattleManager[_0x4eb4cd(0x53f)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x8c9)]=Game_Party[_0x57e85a(0x16f)][_0x57e85a(0xa5c)],Game_Party[_0x57e85a(0x16f)][_0x57e85a(0xa5c)]=function(_0xdc8c4a){const _0x27ef0c=_0x57e85a;VisuMZ[_0x27ef0c(0x734)][_0x27ef0c(0x8c9)][_0x27ef0c(0xa23)](this,_0xdc8c4a),BattleManager[_0x27ef0c(0x53f)]();},VisuMZ['BattleCore'][_0x57e85a(0x5e9)]=Game_Troop[_0x57e85a(0x16f)]['setup'],Game_Troop[_0x57e85a(0x16f)]['setup']=function(_0x15cc94){const _0x3b623e=_0x57e85a;$gameTemp[_0x3b623e(0x98f)](),$gameTemp[_0x3b623e(0x5e0)](_0x15cc94),VisuMZ[_0x3b623e(0x734)]['Game_Troop_setup'][_0x3b623e(0xa23)](this,_0x15cc94),this[_0x3b623e(0x39a)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x905)]=Game_Troop['prototype']['expTotal'],Game_Troop[_0x57e85a(0x16f)][_0x57e85a(0x21b)]=function(){const _0x149fc0=_0x57e85a;let _0x4371d5=VisuMZ[_0x149fc0(0x734)]['Game_Troop_expTotal'][_0x149fc0(0xa23)](this);return this[_0x149fc0(0xacc)]&&('rjKTR'===_0x149fc0(0x2a9)?(_0x7a2e86[_0x149fc0(0x734)][_0x149fc0(0x58e)][_0x149fc0(0xa23)](this,_0x191279,_0x1f8bc3),!this[_0x149fc0(0x28b)]()&&_0x1bad93&&_0x278285[_0x149fc0(0x2b9)]()[_0x149fc0(0xad3)]>0x0&&this[_0x149fc0(0x7ed)]('MP',_0x453243,_0x2b8004[_0x149fc0(0x2b9)]()[_0x149fc0(0xad3)])):_0x4371d5*=this[_0x149fc0(0xacc)]()),Math[_0x149fc0(0x8a8)](_0x4371d5);},Game_Troop[_0x57e85a(0x16f)][_0x57e85a(0xacc)]=function(){return 0x1;},Game_Troop[_0x57e85a(0x16f)]['extendTroopMembers']=function(){const _0x2fc71c=_0x57e85a,_0x413d7a=DataManager[_0x2fc71c(0x7a6)](this[_0x2fc71c(0x753)]()['id']);if(_0x413d7a[_0x2fc71c(0x392)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){if(_0x2fc71c(0xb24)===_0x2fc71c(0xc8b))this['callNextMethod']();else{const _0x3bcad3=RegExp['$1'][_0x2fc71c(0xc06)](',')['map'](_0x71f0d2=>Number(_0x71f0d2));this[_0x2fc71c(0xc20)](),this[_0x2fc71c(0xe24)](_0x3bcad3);}}},Game_Troop[_0x57e85a(0x16f)][_0x57e85a(0xc20)]=function(){const _0x426652=_0x57e85a;let _0x184f20='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x184f20+=_0x426652(0xadd),Imported[_0x426652(0xc2d)]&&('eiHwv'===_0x426652(0x61f)?VisuMZ[_0x426652(0xca5)][_0x426652(0x88f)]<1.11&&(_0x426652(0xdc3)!=='HIyOi'?(alert(_0x184f20[_0x426652(0x554)](_0x426652(0xa5e))),SceneManager[_0x426652(0x4f1)]()):(this[_0x426652(0x9e4)][_0x426652(0x5fa)](_0x426652(0x674)),this[_0x426652(0x9e4)]['push']('clear'))):this[_0x426652(0x1b7)](_0x426652(0x4cc))),Imported['VisuMZ_2_BattleSystemCTB']&&(VisuMZ[_0x426652(0x4f9)]['version']<1.19&&(alert(_0x184f20[_0x426652(0x554)]('CTB')),SceneManager[_0x426652(0x4f1)]())),Imported[_0x426652(0x465)]&&(VisuMZ[_0x426652(0xaa1)][_0x426652(0x88f)]<1.15&&(alert(_0x184f20[_0x426652(0x554)]('STB')),SceneManager['exit']()));},Game_Troop[_0x57e85a(0x16f)][_0x57e85a(0xe24)]=function(_0x29aced){const _0x34a93b=_0x57e85a;this[_0x34a93b(0xaa5)]={};for(const _0x39c5d0 of this['members']()){if(!_0x39c5d0)continue;_0x39c5d0[_0x34a93b(0x9b4)]('');}for(const _0x34fa3a of _0x29aced){const _0x3d79ef=$dataTroops[_0x34fa3a];if(_0x3d79ef)this['addExtendedTroopMembers'](_0x3d79ef);}this[_0x34a93b(0x6a7)]();},Game_Troop[_0x57e85a(0x16f)]['addExtendedTroopMembers']=function(_0xe66370){const _0x279cf7=_0x57e85a;for(const _0x24cf43 of _0xe66370['members']){if($dataEnemies[_0x24cf43[_0x279cf7(0xacb)]]){const _0xf87a1=_0x24cf43[_0x279cf7(0xacb)],_0x275a48=_0x24cf43['x'],_0x48c175=_0x24cf43['y'],_0x1440de=new Game_Enemy(_0xf87a1,_0x275a48,_0x48c175);_0x24cf43[_0x279cf7(0x543)]&&_0x1440de[_0x279cf7(0x639)](),this[_0x279cf7(0xc42)][_0x279cf7(0x5fa)](_0x1440de);}}},VisuMZ['BattleCore'][_0x57e85a(0x163)]=Game_Map['prototype'][_0x57e85a(0x49d)],Game_Map[_0x57e85a(0x16f)]['setupBattleback']=function(){const _0xb90f5f=_0x57e85a;VisuMZ[_0xb90f5f(0x734)]['Game_Map_setupBattleback']['call'](this),this['setupBattlebackBattleCore']();},Game_Map['prototype'][_0x57e85a(0xb69)]=function(){const _0x2beef=_0x57e85a;this['_regionBattleback1']={},this[_0x2beef(0x19e)]={};if(!$dataMap)return;const _0x43ac28=$dataMap[_0x2beef(0x40f)];if(!_0x43ac28)return;const _0x287bca=_0x43ac28[_0x2beef(0x392)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x287bca){if(_0x2beef(0x74e)!==_0x2beef(0x372))for(const _0x4a97da of _0x287bca){_0x4a97da['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x3280db=Number(RegExp['$1']),_0x31618b=Number(RegExp['$2']),_0x13349f=_0x31618b===0x1?this[_0x2beef(0x31e)]:this['_regionBattleback2'],_0x39d8b2=String(RegExp['$3']);_0x13349f[_0x3280db]=_0x39d8b2;}else{if(!_0x20d5a6[_0x2beef(0x734)]['JS'][_0x3989f2]['call'](this,this[_0x2beef(0x6c6)],_0x523331))return![];}}},VisuMZ['BattleCore'][_0x57e85a(0x503)]=Game_Map[_0x57e85a(0x16f)][_0x57e85a(0x1bd)],Game_Map[_0x57e85a(0x16f)][_0x57e85a(0x1bd)]=function(){const _0x547bc7=_0x57e85a;if(!BattleManager[_0x547bc7(0x6b6)]()){if(_0x547bc7(0x6d1)!==_0x547bc7(0x6d1))this['updateAngleCalculations'](),this['applyAngleChange']();else{const _0x5ebe2c=$gamePlayer[_0x547bc7(0x313)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x547bc7(0x31e)]&&this[_0x547bc7(0x31e)][_0x5ebe2c]){if(_0x547bc7(0x6a6)!==_0x547bc7(0x6a6))_0x3f207e['prototype']['performMagicEvasion']['call'](this),this[_0x547bc7(0x4c9)](_0x547bc7(0xa91));else return this[_0x547bc7(0x31e)][_0x5ebe2c];}}}return VisuMZ[_0x547bc7(0x734)][_0x547bc7(0x503)][_0x547bc7(0xa23)](this);},VisuMZ['BattleCore'][_0x57e85a(0xb3d)]=Game_Map[_0x57e85a(0x16f)]['battleback2Name'],Game_Map[_0x57e85a(0x16f)]['battleback2Name']=function(){const _0x45ed44=_0x57e85a;if(!BattleManager['isBattleTest']()){const _0x213bf1=$gamePlayer[_0x45ed44(0x313)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x45ed44(0x31e)]&&this[_0x45ed44(0x19e)][_0x213bf1]){if(_0x45ed44(0x5f5)===_0x45ed44(0x5f5))return this[_0x45ed44(0x19e)][_0x213bf1];else{let _0x38e22c=_0xcf304f[_0x45ed44(0x243)][_0x36ce9c];if(!_0x38e22c)return;let _0x55429c=_0x38e22c;const _0x34e19f=this[_0x45ed44(0x6ac)]();if(_0x34e19f==='text')_0x55429c=_0x55429c[_0x45ed44(0x795)](/\x1I\[(\d+)\]/gi,''),_0x55429c=_0x55429c[_0x45ed44(0x795)](/\\I\[(\d+)\]/gi,'');else{if(!_0x38e22c['match'](/\\I\[(\d+)\]/i)){const _0x252dcc=_0x3a5e79[_0x45ed44(0xbaa)]?_0x3d68c2[_0x45ed44(0xdd5)][_0x45ed44(0x478)][_0x45ed44(0x8d4)]:_0x46dbd9[_0x45ed44(0x734)]['Settings'][_0x45ed44(0x16c)],_0x4da8cb=_0xc30de6[_0x45ed44(0x254)]['includes'](_0x215aec),_0x503568=_0x4da8cb?_0x252dcc[_0x45ed44(0x27d)]:_0x252dcc['IconStypeNorm'];_0x55429c=_0x45ed44(0x53c)[_0x45ed44(0x554)](_0x503568,_0x38e22c);}}this[_0x45ed44(0x761)](_0x55429c,_0x45ed44(0x94f),!![],_0x330684);}}}return VisuMZ['BattleCore'][_0x45ed44(0xb3d)]['call'](this);},VisuMZ['BattleCore'][_0x57e85a(0x5a6)]=Game_Map['prototype']['encounterList'],Game_Map['prototype'][_0x57e85a(0x85d)]=function(){const _0x554708=_0x57e85a;let _0xbb46a2=JsonEx[_0x554708(0xbdc)](VisuMZ[_0x554708(0x734)][_0x554708(0x5a6)][_0x554708(0xa23)](this));return VisuMZ['BattleCore'][_0x554708(0x848)](_0xbb46a2);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x848)]=function(_0x3a8ae8){const _0x406396=_0x57e85a;var _0xfa033c,_0x4a1d37,_0x44c667;for(_0x44c667=_0x3a8ae8[_0x406396(0xd36)]-0x1;_0x44c667>0x0;_0x44c667--){_0xfa033c=Math[_0x406396(0x7f8)](Math['random']()*(_0x44c667+0x1)),_0x4a1d37=_0x3a8ae8[_0x44c667],_0x3a8ae8[_0x44c667]=_0x3a8ae8[_0xfa033c],_0x3a8ae8[_0xfa033c]=_0x4a1d37;}return _0x3a8ae8;},VisuMZ[_0x57e85a(0x734)]['Game_Interpreter_PluginCommand']=Game_Interpreter[_0x57e85a(0x16f)]['command357'],Game_Interpreter[_0x57e85a(0x16f)][_0x57e85a(0xa10)]=function(_0x5810c3){const _0x5b14b0=_0x57e85a;return $gameTemp[_0x5b14b0(0x19c)](this),VisuMZ[_0x5b14b0(0x734)]['Game_Interpreter_PluginCommand'][_0x5b14b0(0xa23)](this,_0x5810c3);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x592)]=Game_Interpreter['prototype']['updateWaitMode'],Game_Interpreter[_0x57e85a(0x16f)][_0x57e85a(0xb8f)]=function(){const _0x4523a8=_0x57e85a;if(SceneManager[_0x4523a8(0x4b2)]()){if(_0x4523a8(0xd1c)!=='upwka')return _0x339814;else switch(this[_0x4523a8(0x7a4)]){case _0x4523a8(0xc37):if(Imported[_0x4523a8(0x272)]){if($gameScreen[_0x4523a8(0x90d)]()[_0x4523a8(0x5f7)]>0x0)return!![];this[_0x4523a8(0x7a4)]='';}break;case _0x4523a8(0x479):if(BattleManager[_0x4523a8(0x78d)]['isAnimationPlaying']())return!![];this[_0x4523a8(0x7a4)]='';break;case _0x4523a8(0x2ab):if(BattleManager['_spriteset'][_0x4523a8(0x9e3)]())return!![];this[_0x4523a8(0x7a4)]='';break;case'battleCamera':if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x4523a8(0x90d)]()['cameraDuration']>0x0)return!![];if($gameScreen['battleCameraData']()['cameraOffsetDuration']>0x0)return!![];this['_waitMode']='';}break;case _0x4523a8(0xa96):if(BattleManager['_spriteset'][_0x4523a8(0xc2a)]())return!![];this[_0x4523a8(0x7a4)]='';break;case _0x4523a8(0x31d):if(BattleManager['_spriteset'][_0x4523a8(0x55d)]())return!![];this[_0x4523a8(0x7a4)]='';break;case _0x4523a8(0x7c4):if(BattleManager[_0x4523a8(0x78d)][_0x4523a8(0x7fb)]())return!![];this[_0x4523a8(0x7a4)]='';break;case'battlelog':if(BattleManager[_0x4523a8(0x9e4)][_0x4523a8(0x782)]())return!![];this[_0x4523a8(0x7a4)]='';break;case _0x4523a8(0x430):if(BattleManager['_spriteset'][_0x4523a8(0x57e)]())return!![];this[_0x4523a8(0x7a4)]='';break;case'battleOpacity':if(BattleManager[_0x4523a8(0x78d)][_0x4523a8(0x94d)]())return!![];this['_waitMode']='';break;case'battleGrow':if(BattleManager[_0x4523a8(0x78d)]['isAnyoneGrowing']())return!![];this[_0x4523a8(0x7a4)]='';break;case _0x4523a8(0x8d6):if(BattleManager['_spriteset'][_0x4523a8(0xb75)]())return!![];this['_waitMode']='';break;case _0x4523a8(0x66c):if(Imported[_0x4523a8(0xbc2)]){if(BattleManager['_spriteset'][_0x4523a8(0x7e2)]())return!![];this[_0x4523a8(0x7a4)]='';}break;case _0x4523a8(0x723):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x4523a8(0x90d)]()['skewDuration']>0x0)return!![];this[_0x4523a8(0x7a4)]='';}break;case _0x4523a8(0x2e5):if(BattleManager[_0x4523a8(0x78d)]['isAnyoneSpinning']())return!![];this[_0x4523a8(0x7a4)]='';break;case _0x4523a8(0x242):if(Imported[_0x4523a8(0x272)]){if($gameScreen[_0x4523a8(0x90d)]()[_0x4523a8(0x675)]>0x0)return!![];this[_0x4523a8(0x7a4)]='';}break;case _0x4523a8(0x304):if(Imported[_0x4523a8(0xd86)]){if(_0x4523a8(0xbbc)!==_0x4523a8(0x1f6)){if(BattleManager['_spriteset'][_0x4523a8(0xc7a)]){if(BattleManager['_spriteset'][_0x4523a8(0xc7a)]())return!![];this['_waitMode']=_0x4523a8(0x7a8);}else this[_0x4523a8(0x7a4)]='';break;}else return this[_0x4523a8(0x87a)]()?this[_0x4523a8(0xb9b)]['allowCollapse']():!![];}break;case _0x4523a8(0x7a8):if(Imported[_0x4523a8(0xd86)]){if(BattleManager[_0x4523a8(0x78d)][_0x4523a8(0x7e1)]())return!![];this['_waitMode']='';}break;}}return VisuMZ[_0x4523a8(0x734)][_0x4523a8(0x592)][_0x4523a8(0xa23)](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xe0f)]=Game_Interpreter[_0x57e85a(0x16f)]['command301'],Game_Interpreter[_0x57e85a(0x16f)][_0x57e85a(0xdc0)]=function(_0x4fa11e){const _0x347485=_0x57e85a;if(!$gameParty['inBattle']())return _0x347485(0x890)!==_0x347485(0x2f4)?this[_0x347485(0x1a8)](_0x4fa11e):_0x252388[_0x347485(0x734)][_0x347485(0x478)][_0x347485(0x52a)]['BattleLogRectJS'][_0x347485(0xa23)](this);else{if('HdfkH'===_0x347485(0x96b))return VisuMZ[_0x347485(0x734)][_0x347485(0xe0f)]['call'](this,_0x4fa11e);else this[_0x347485(0xd19)](this[_0x347485(0x246)]);}},Game_Interpreter[_0x57e85a(0x16f)][_0x57e85a(0x3b1)]=function(_0x54a2b2){const _0x921943=_0x57e85a;return VisuMZ['BattleCore'][_0x921943(0xe0f)][_0x921943(0xa23)](this,_0x54a2b2),BattleManager[_0x921943(0x9bf)](_0x481271=>{const _0x1d4b57=_0x921943;_0x1d4b57(0x22e)!=='cdpVo'?this['_branch'][this[_0x1d4b57(0x4b1)]]=_0x481271:(_0x5c36b7=_0x5f2f35(_0x250822['$1']),_0x2cb392--);}),!![];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x3c4)]=function(_0x20eda3){const _0x287f50=_0x57e85a,_0x258d04=$dataCommonEvents[_0x20eda3];if(!_0x258d04)return![];if(_0x258d04[_0x287f50(0x7df)][_0x287f50(0xd36)]<=0x1)return![];return!![];},Game_Interpreter[_0x57e85a(0x16f)][_0x57e85a(0x1a8)]=function(_0x878acd){const _0x13b037=_0x57e85a,_0x1d42bd=VisuMZ[_0x13b037(0x734)][_0x13b037(0x478)][_0x13b037(0x5ad)],_0x5bec38=_0x1d42bd[_0x13b037(0x2b8)],_0x4464eb=$dataCommonEvents[_0x5bec38];if(_0x4464eb&&VisuMZ['BattleCore'][_0x13b037(0x3c4)](_0x5bec38)){if(_0x13b037(0x9fc)!==_0x13b037(0x9fc)){if(!_0x15354['isSceneBattle']())return;_0x286704[_0x13b037(0x15e)](_0x148b82,_0x3d34b7);const _0x3880bc=_0x2fd050[_0x13b037(0xc21)](),_0x1284e7=_0x398a73[_0x13b037(0xa77)],_0x3f9028=_0x345832[_0x13b037(0xdd4)](_0x564769[_0x13b037(0xa3a)]),_0x4bd2b9=_0x59397e['Mirror'];if(!_0x3880bc||!_0x1284e7)return;const _0x3ac98a=_0x6f99e6[_0x1284e7[_0x13b037(0xc48)]()],_0x5da682=_0x3ac98a[_0x13b037(0x68e)];_0x37a221[_0x13b037(0x986)](_0x3f9028,_0x5da682,_0x4bd2b9),_0x5c1432[_0x13b037(0xd52)]&&_0x3880bc[_0x13b037(0x1f9)](_0x13b037(0x479));}else{const _0x10cfc7=this[_0x13b037(0x5ca)]()?this['_eventId']:0x0,_0x43b52d=_0x4464eb['list'];this['setupChild'](_0x43b52d,_0x10cfc7),this[_0x13b037(0xd54)]=JsonEx[_0x13b037(0xbdc)](this[_0x13b037(0xd54)]);const _0x58fd1b={'code':0xbc3,'indent':this[_0x13b037(0x4b1)],'parameters':JsonEx['makeDeepCopy'](_0x878acd)};return this[_0x13b037(0xd54)][_0x13b037(0x8ed)](this[_0x13b037(0xc87)]+0x1,0x0,_0x58fd1b),!![];}}else return VisuMZ[_0x13b037(0x734)][_0x13b037(0xe0f)][_0x13b037(0xa23)](this,_0x878acd);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x5b7)]=BattleManager[_0x57e85a(0xdb9)],BattleManager['onEncounter']=function(){const _0xdb4c4=_0x57e85a;VisuMZ[_0xdb4c4(0x734)][_0xdb4c4(0x5b7)][_0xdb4c4(0xa23)](this),this[_0xdb4c4(0x1cd)]();},BattleManager[_0x57e85a(0x1cd)]=function(){const _0x58f7ad=_0x57e85a,_0x233d73=VisuMZ[_0x58f7ad(0x734)][_0x58f7ad(0x478)]['Mechanics'],_0xb64351=_0x233d73[_0x58f7ad(0x2b8)];_0xb64351&&VisuMZ[_0x58f7ad(0x734)][_0x58f7ad(0x3c4)](_0xb64351)&&(this[_0x58f7ad(0x851)]=!![],$gameTemp[_0x58f7ad(0x428)](_0x233d73[_0x58f7ad(0x2b8)]),$gameMap[_0x58f7ad(0xc2c)](),$gameMap['_interpreter'][_0x58f7ad(0x7a1)]=!![]);if(_0x233d73['DefeatEvent']>0x0){if(_0x58f7ad(0x387)===_0x58f7ad(0x387))this['_canLose']=!![];else{const _0x5e74e5=_0x55c0a3[_0x58f7ad(0xdd9)](0x2)===0x0?this['opponentsUnit']():this['friendsUnit']();_0x538041[_0x58f7ad(0x5fa)](_0x5e74e5['trueRandomTarget']());}}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x1a2)]=Scene_Map[_0x57e85a(0x16f)][_0x57e85a(0x3f9)],Scene_Map['prototype'][_0x57e85a(0x3f9)]=function(){const _0x4804d0=_0x57e85a;if(BattleManager[_0x4804d0(0x851)])return;VisuMZ[_0x4804d0(0x734)]['Scene_Map_updateCallMenu']['call'](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x1a6)]=Scene_Map[_0x57e85a(0x16f)][_0x57e85a(0x2ff)],Scene_Map[_0x57e85a(0x16f)][_0x57e85a(0x2ff)]=function(){const _0x377b3e=_0x57e85a;BattleManager[_0x377b3e(0x851)]?this['battleCorePreBattleCommonEvent']():VisuMZ[_0x377b3e(0x734)][_0x377b3e(0x1a6)][_0x377b3e(0xa23)](this);},Scene_Map[_0x57e85a(0x16f)][_0x57e85a(0xa7f)]=function(){this['_active']=!![];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xa29)]=SceneManager['isSceneChanging'],SceneManager['isSceneChanging']=function(){const _0x3e043a=_0x57e85a;if(BattleManager[_0x3e043a(0x851)])return![];return VisuMZ[_0x3e043a(0x734)]['SceneManager_isSceneChanging'][_0x3e043a(0xa23)](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xb56)]=Game_Interpreter[_0x57e85a(0x16f)][_0x57e85a(0xd2e)],Game_Interpreter['prototype'][_0x57e85a(0xd2e)]=function(){const _0x5d4a94=_0x57e85a;VisuMZ['BattleCore'][_0x5d4a94(0xb56)][_0x5d4a94(0xa23)](this);if(this[_0x5d4a94(0x7a1)]){if(_0x5d4a94(0x5ed)!==_0x5d4a94(0x708))this[_0x5d4a94(0x7a1)]=undefined,SceneManager[_0x5d4a94(0xd04)][_0x5d4a94(0xd56)]();else{if(!_0x4fbe55['isSceneBattle']())return;_0x5db7fb[_0x5d4a94(0x15e)](_0x232565,_0x2ecab7);const _0x527b3e=_0xc9d2e4['CommonEventID'];_0xe2185d['_scene'][_0x5d4a94(0xc2b)](_0x527b3e);}}},Scene_Map[_0x57e85a(0x16f)][_0x57e85a(0xd56)]=function(){const _0x2cb79f=_0x57e85a;BattleManager[_0x2cb79f(0x851)]=undefined,BattleManager[_0x2cb79f(0xd96)]=!![],this[_0x2cb79f(0x227)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xb2c)]=Scene_Map[_0x57e85a(0x16f)]['initialize'],Scene_Map[_0x57e85a(0x16f)]['initialize']=function(){const _0x2be439=_0x57e85a;VisuMZ[_0x2be439(0x734)][_0x2be439(0xb2c)][_0x2be439(0xa23)](this),BattleManager['_battleCoreBattleResumeAfter']&&(_0x2be439(0x933)===_0x2be439(0x933)?(this[_0x2be439(0x193)]=!![],BattleManager[_0x2be439(0xd96)]=undefined):this[_0x2be439(0x2fb)]());},VisuMZ[_0x57e85a(0x734)]['Scene_Map_initialize']=Scene_Map[_0x57e85a(0x16f)][_0x57e85a(0x84c)],Scene_Map['prototype'][_0x57e85a(0x84c)]=function(){const _0x4af2cb=_0x57e85a;VisuMZ['BattleCore'][_0x4af2cb(0xd7b)][_0x4af2cb(0xa23)](this),$gameTemp[_0x4af2cb(0x98f)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x588)]=Scene_ItemBase[_0x57e85a(0x16f)]['applyItem'],Scene_ItemBase[_0x57e85a(0x16f)][_0x57e85a(0x8c3)]=function(){const _0x5a0ccd=_0x57e85a;VisuMZ[_0x5a0ccd(0x734)][_0x5a0ccd(0x588)][_0x5a0ccd(0xa23)](this);if(this[_0x5a0ccd(0x2df)]()[_0x5a0ccd(0x40f)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x5a0ccd(0x2df)]()[_0x5a0ccd(0x40f)][_0x5a0ccd(0x392)](/<CUSTOM ACTION SEQUENCE>/i)&&('tMPaV'!=='uRvBv'?$gameTemp['_commonEventQueue']=[]:this[_0x5a0ccd(0x4c9)](_0x5a0ccd(0x22b))),DataManager[_0x5a0ccd(0x212)](this[_0x5a0ccd(0x2df)]())&&($gameTemp[_0x5a0ccd(0x1da)]=[]);},VisuMZ['BattleCore'][_0x57e85a(0x77c)]=Scene_Options[_0x57e85a(0x16f)][_0x57e85a(0x36f)],Scene_Options[_0x57e85a(0x16f)][_0x57e85a(0x36f)]=function(){const _0x4044ed=_0x57e85a;let _0x3eb6cf=VisuMZ[_0x4044ed(0x734)][_0x4044ed(0x77c)][_0x4044ed(0xa23)](this);const _0x15a452=VisuMZ['BattleCore'][_0x4044ed(0x478)];if(_0x15a452[_0x4044ed(0x447)][_0x4044ed(0x33a)]&&_0x15a452[_0x4044ed(0x447)]['AdjustRect'])_0x3eb6cf+=0x2;if(_0x15a452[_0x4044ed(0x6bd)]['AddOption']&&_0x15a452[_0x4044ed(0x6bd)][_0x4044ed(0xd2d)])_0x3eb6cf+=0x1;return _0x3eb6cf;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x800)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x84c)],Scene_Battle['prototype']['initialize']=function(){const _0x56ef1f=_0x57e85a;VisuMZ[_0x56ef1f(0x734)][_0x56ef1f(0x800)]['call'](this),this[_0x56ef1f(0x32a)]();},VisuMZ[_0x57e85a(0x734)]['Scene_Battle_start']=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xaf4)],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xaf4)]=function(){const _0x45c603=_0x57e85a;if(SceneManager[_0x45c603(0xda4)]()){if('BjXbB'===_0x45c603(0x164)){const _0x4eb4c3=this[_0x45c603(0x6c6)]['lastBattleSkill']();if(_0x4eb4c3){const _0x5c26ac=this[_0x45c603(0x559)]('skill',_0x4eb4c3[_0x45c603(0x6fc)]);this[_0x45c603(0x6d3)](_0x5c26ac||0x0);}}else Scene_Message[_0x45c603(0x16f)][_0x45c603(0xaf4)][_0x45c603(0xa23)](this),this[_0x45c603(0x78d)]&&this[_0x45c603(0x78d)]['update'](),BattleManager['_tpbSceneChangeCacheActor']&&BattleManager[_0x45c603(0x935)]();}else VisuMZ['BattleCore'][_0x45c603(0xcc5)][_0x45c603(0xa23)](this),$gameTroop[_0x45c603(0x38f)]();},VisuMZ[_0x57e85a(0x734)]['Scene_Battle_stop']=Scene_Battle['prototype'][_0x57e85a(0x227)],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x227)]=function(){const _0x255e51=_0x57e85a;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message['prototype']['stop'][_0x255e51(0xa23)](this):VisuMZ[_0x255e51(0x734)][_0x255e51(0x60d)][_0x255e51(0xa23)](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x9fe)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xd2e)],Scene_Battle['prototype'][_0x57e85a(0xd2e)]=function(){const _0x141367=_0x57e85a;SceneManager[_0x141367(0xd0e)]()?Scene_Message[_0x141367(0x16f)]['terminate'][_0x141367(0xa23)](this):VisuMZ[_0x141367(0x734)][_0x141367(0x9fe)]['call'](this),$gameTemp[_0x141367(0xd31)](),this[_0x141367(0x32a)]();},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x184)]=function(){const _0x521348=_0x57e85a;if(ConfigManager[_0x521348(0xa4c)]&&ConfigManager[_0x521348(0x406)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0x521348(0x93c)]()===_0x521348(0x515)){if(_0x521348(0x6e5)!==_0x521348(0x6e5))this[_0x521348(0xc22)][_0x521348(0x5b6)]=![];else return![];}else{if(_0x521348(0x4a1)!==_0x521348(0x4a1)){this['requestMotion'](_0x521348(0x605));return;}else{return Scene_Message['prototype']['isRightInputMode']['call'](this);;}}}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x7f2)]=Scene_Battle[_0x57e85a(0x16f)]['createAllWindows'],Scene_Battle['prototype']['createAllWindows']=function(){const _0x245302=_0x57e85a;this[_0x245302(0xdee)](),VisuMZ['BattleCore'][_0x245302(0x7f2)][_0x245302(0xa23)](this),this[_0x245302(0x89d)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x713)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x575)],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x575)]=function(){const _0xb85133=_0x57e85a;VisuMZ[_0xb85133(0x734)][_0xb85133(0x713)][_0xb85133(0xa23)](this),this[_0xb85133(0x357)]();},Scene_Battle[_0x57e85a(0x16f)]['createMultiTargetWindows']=function(){const _0x2fecec=_0x57e85a;this[_0x2fecec(0x2f3)](!![]),this[_0x2fecec(0x2f3)](![]);},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x18a)]=function(_0x38ad4e){const _0x34e215=_0x57e85a,_0x4afcb1=Window_BattleMultiTarget[_0x34e215(0x2b7)],_0x192c9b=this['calcWindowHeight'](0x1,!![]);let _0x4b5aa6=_0x38ad4e?Graphics[_0x34e215(0x418)]-_0x4afcb1:0x0;_0x4b5aa6+=_0x38ad4e?Window_BattleMultiTarget['ACTOR_OFFSET_X']:Window_BattleMultiTarget['ENEMY_OFFSET_X'];const _0x12e958=[_0x34e215(0x1ba)][_0x34e215(0x3af)](this[_0x34e215(0x93c)]())?0x0:this[_0x34e215(0x912)][_0x34e215(0x54b)];let _0x3eafd4=Graphics[_0x34e215(0x85e)]-_0x12e958-_0x192c9b;return _0x3eafd4+=_0x38ad4e?Window_BattleMultiTarget[_0x34e215(0x806)]:Window_BattleMultiTarget[_0x34e215(0xd2f)],new Rectangle(_0x4b5aa6,_0x3eafd4,_0x4afcb1,_0x192c9b);},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x2f3)]=function(_0x439977){const _0x5bcb04=_0x57e85a,_0x2bcc60=this[_0x5bcb04(0x18a)](_0x439977),_0x23925f=new Window_BattleMultiTarget(_0x2bcc60,_0x439977);this[_0x5bcb04(0x20c)](_0x23925f),_0x439977?this['_actorMultiTargetWindow']=_0x23925f:this[_0x5bcb04(0xe10)]=_0x23925f;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x36c)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xb36)],Scene_Battle[_0x57e85a(0x16f)]['createCancelButton']=function(){const _0xf48166=_0x57e85a;VisuMZ['BattleCore'][_0xf48166(0x36c)][_0xf48166(0xa23)](this);if(this['battleLayoutStyle']()===_0xf48166(0x515)){if('LFcSE'===_0xf48166(0xd45))this[_0xf48166(0x904)]();else for(const _0x402b0b of _0x4c0e26){const _0x342c9f=_0x225f36[0x0][_0xf48166(0x554)](_0x402b0b[0x0],_0x3b6036[0x0]),_0x42393c=_0x30bb5a[0x1][_0xf48166(0x554)](_0x402b0b[0x1],_0x5c3ace[0x1])[_0xf48166(0xdf5)](),_0x5766d3=new _0x3f07b3(_0x303225[_0xf48166(0x554)](_0x42393c),'i');_0x27afa3[_0x342c9f]=_0x5766d3;}}},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x8ce)]=function(_0x53e0c1){const _0x1f91fe=_0x57e85a;_0x53e0c1?_0x1f91fe(0x5f9)==='nkxMX'?(this[_0x1f91fe(0xd6e)]['x']=(Graphics[_0x1f91fe(0x8b9)]-Graphics[_0x1f91fe(0x418)])/0x2,this['_windowLayer']['y']=(Graphics[_0x1f91fe(0x54b)]-Graphics[_0x1f91fe(0x85e)])/0x2):_0x1d7fe7[_0x1f91fe(0x734)]['Game_Temp_requestBalloon']['call'](this,_0x23246e,_0x4ff07d):(this[_0x1f91fe(0xd6e)]['x']=Graphics[_0x1f91fe(0x8b9)]*0xa,this[_0x1f91fe(0xd6e)]['y']=Graphics[_0x1f91fe(0x54b)]*0xa);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x3d9)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x41a)],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x41a)]=function(){const _0x4bc605=_0x57e85a,_0x4e9b8a=BattleManager[_0x4bc605(0x2ee)]();VisuMZ[_0x4bc605(0x734)]['Scene_Battle_selectNextCommand'][_0x4bc605(0xa23)](this);if(_0x4e9b8a){if(_0x4e9b8a===BattleManager[_0x4bc605(0x2ee)]())return;if(_0x4e9b8a===BattleManager[_0x4bc605(0xa77)])return;if(_0x4e9b8a['battler']())_0x4e9b8a[_0x4bc605(0x3ab)]()[_0x4bc605(0xb3e)]();}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x556)]=Scene_Battle['prototype']['selectPreviousCommand'],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xc3f)]=function(){const _0x36fa0b=_0x57e85a,_0x5cc553=BattleManager[_0x36fa0b(0x2ee)]();if(_0x5cc553&&_0x5cc553[_0x36fa0b(0x3ab)])_0x5cc553[_0x36fa0b(0x3ab)]()[_0x36fa0b(0xb3e)]();VisuMZ['BattleCore'][_0x36fa0b(0x556)][_0x36fa0b(0xa23)](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x1e8)]=Scene_Battle[_0x57e85a(0x16f)]['logWindowRect'],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x64e)]=function(){const _0x3214c5=_0x57e85a;if(VisuMZ[_0x3214c5(0x734)][_0x3214c5(0x478)][_0x3214c5(0x52a)][_0x3214c5(0xa66)])return VisuMZ[_0x3214c5(0x734)][_0x3214c5(0x478)]['BattleLog'][_0x3214c5(0xa66)]['call'](this);return VisuMZ['BattleCore']['Scene_Battle_logWindowRect'][_0x3214c5(0xa23)](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xc7f)]=Scene_Battle[_0x57e85a(0x16f)]['createPartyCommandWindow'],Scene_Battle[_0x57e85a(0x16f)]['createPartyCommandWindow']=function(){const _0x655c56=_0x57e85a;VisuMZ['BattleCore'][_0x655c56(0xc7f)][_0x655c56(0xa23)](this),this[_0x655c56(0x612)]();},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x612)]=function(){const _0x3fed2d=_0x57e85a,_0x33ad8e=this[_0x3fed2d(0xbd4)];_0x33ad8e[_0x3fed2d(0xdf7)](_0x3fed2d(0x635),this['commandAutoBattle']['bind'](this)),_0x33ad8e[_0x3fed2d(0xdf7)](_0x3fed2d(0xd5f),this[_0x3fed2d(0xcce)][_0x3fed2d(0xc81)](this));const _0x59422c=this['battleLayoutStyle']();switch(_0x59422c){case'xp':case _0x3fed2d(0x801):return this[_0x3fed2d(0xbd4)][_0x3fed2d(0x337)](0x1);break;}},Scene_Battle['prototype'][_0x57e85a(0xc56)]=function(){const _0x3fe6f3=_0x57e85a;BattleManager[_0x3fe6f3(0x449)]=!![],$gameParty[_0x3fe6f3(0x678)](),this[_0x3fe6f3(0x41a)](),BattleManager[_0x3fe6f3(0xad6)]()&&(BattleManager[_0x3fe6f3(0xa53)]=![]);},Scene_Battle['prototype'][_0x57e85a(0xcce)]=function(){const _0x3d2691=_0x57e85a;if(this[_0x3d2691(0x296)]()){if(_0x3d2691(0xd5c)!==_0x3d2691(0xd5c)){if(this['hasSvBattler']())this[_0x3d2691(0x9fb)][_0x3d2691(0x97e)](_0x4faa34);}else this[_0x3d2691(0x61a)]=!![],this['_logWindow'][_0x3d2691(0x5fa)](_0x3d2691(0x3fd),VisuMZ[_0x3d2691(0x734)][_0x3d2691(0x478)][_0x3d2691(0x7f9)][_0x3d2691(0x4fc)]);}else this[_0x3d2691(0xe17)]();},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x296)]=function(){return BattleManager['isActiveTpb']();},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xe17)]=function(){const _0x1bbd71=_0x57e85a;this['_callSceneOptions']=![],this[_0x1bbd71(0x78d)][_0x1bbd71(0xa02)](),this['_windowLayer'][_0x1bbd71(0x5b6)]=![];if(BattleManager[_0x1bbd71(0x6b6)]()){if(_0x1bbd71(0x739)===_0x1bbd71(0x783)){this['forceSelect'](_0x3476d8-0x1);return;}else($dataSystem[_0x1bbd71(0x1bd)]||$dataSystem[_0x1bbd71(0xc6b)])&&SceneManager[_0x1bbd71(0xd28)]();}else($gameMap[_0x1bbd71(0x1bd)]()||$gameMap['battleback2Name']())&&SceneManager[_0x1bbd71(0xd28)]();SceneManager[_0x1bbd71(0x5fa)](Scene_Options),BattleManager[_0x1bbd71(0xad6)]()&&(BattleManager[_0x1bbd71(0xbba)]=BattleManager[_0x1bbd71(0x2ee)]());},VisuMZ['BattleCore'][_0x57e85a(0x845)]=Scene_Battle[_0x57e85a(0x16f)]['updateBattleProcess'],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x6c2)]=function(){const _0x45eba1=_0x57e85a;VisuMZ[_0x45eba1(0x734)]['Scene_Battle_updateBattleProcess'][_0x45eba1(0xa23)](this);if(this[_0x45eba1(0x61a)]&&!BattleManager[_0x45eba1(0xa77)])this[_0x45eba1(0xe17)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x4ee)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xa02)],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xa02)]=function(){const _0x3b43e8=_0x57e85a;VisuMZ[_0x3b43e8(0x734)]['Scene_Battle_update'][_0x3b43e8(0xa23)](this),this[_0x3b43e8(0x238)]();},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x89d)]=function(){const _0xb38966=_0x57e85a,_0x13043c=this[_0xb38966(0x926)]();this[_0xb38966(0x1f5)]=new Window_AutoBattleCancel(_0x13043c),this[_0xb38966(0x1f5)][_0xb38966(0x639)](),this['addChild'](this[_0xb38966(0x1f5)]);},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x926)]=function(){const _0x4f7beb=_0x57e85a;return VisuMZ[_0x4f7beb(0x734)]['Settings']['AutoBattle'][_0x4f7beb(0x218)][_0x4f7beb(0xa23)](this);},Scene_Battle['prototype'][_0x57e85a(0x32a)]=function(){const _0x4ba7d6=_0x57e85a;this[_0x4ba7d6(0x25e)]=[];},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x238)]=function(){const _0x2e9612=_0x57e85a;if(!this[_0x2e9612(0x25e)])return;for(const _0x532e90 of this[_0x2e9612(0x25e)]){'wRogB'===_0x2e9612(0x8fa)?_0x532e90&&_0x532e90[_0x2e9612(0xa02)]():_0x1f3f08[_0x2e9612(0x639)]();}},Scene_Battle['prototype'][_0x57e85a(0xc2b)]=function(_0x110bc9){const _0x21c676=$dataCommonEvents[_0x110bc9];if(!_0x21c676)return;const _0x5c28a6=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x5c28a6),_0x5c28a6['setCommonEvent'](_0x110bc9);},Scene_Battle['prototype'][_0x57e85a(0x597)]=function(_0x389d61){const _0x292753=_0x57e85a;this[_0x292753(0x25e)]=this[_0x292753(0x25e)]||[],this[_0x292753(0x25e)][_0x292753(0x5fa)](_0x389d61);},Scene_Battle[_0x57e85a(0x16f)]['removeOnceParallelInterpreter']=function(_0xea2305){const _0x17a9c2=_0x57e85a;this[_0x17a9c2(0x25e)]=this[_0x17a9c2(0x25e)]||[],this[_0x17a9c2(0x25e)][_0x17a9c2(0xb45)](_0xea2305);},Game_Troop[_0x57e85a(0x16f)][_0x57e85a(0x38f)]=function(){const _0x5cb99a=_0x57e85a;for(const _0x2dca2e of this['troop']()[_0x5cb99a(0x2b2)]){if(!this[_0x5cb99a(0x3da)](_0x2dca2e))continue;SceneManager[_0x5cb99a(0xd04)]['playOnceParallelTroopPage'](_0x2dca2e);}},Game_Troop[_0x57e85a(0x16f)][_0x57e85a(0x3da)]=function(_0x2befac){const _0xfa8212=_0x57e85a;if(!_0x2befac)return;for(const _0x397bd9 of _0x2befac[_0xfa8212(0x7df)]){if(_0xfa8212(0xa8c)!=='zNSUx'){if([0x6c,0x198][_0xfa8212(0x3af)](_0x397bd9[_0xfa8212(0x3d3)])){const _0x2aedb4=_0x397bd9[_0xfa8212(0x7eb)][0x0];if(_0x2aedb4[_0xfa8212(0x392)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}else{if(!_0x6899b9[_0xfa8212(0x4b2)]())return;const _0x5924ee=_0x1813c8[_0xfa8212(0xc21)]();if(!_0x5924ee)return;_0x5924ee[_0xfa8212(0x1f9)](_0xfa8212(0x8d6));}}return![];},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xdec)]=function(_0xb53482){const _0xd70859=_0x57e85a;if(!_0xb53482)return;const _0x9ce300=new Game_BattleOnceParallelInterpreter();this[_0xd70859(0x597)](_0x9ce300),_0x9ce300[_0xd70859(0x669)](_0xb53482);};function Game_BattleOnceParallelInterpreter(){this['initialize'](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x57e85a(0xbae)](Game_Interpreter[_0x57e85a(0x16f)]),Game_BattleOnceParallelInterpreter[_0x57e85a(0x16f)][_0x57e85a(0xd77)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x57e85a(0xd01)]=function(_0x53be4b){const _0xe98422=_0x57e85a,_0x3ec9a6=$dataCommonEvents[_0x53be4b];_0x3ec9a6?this[_0xe98422(0xb62)](_0x3ec9a6[_0xe98422(0x7df)],0x0):this['terminate']();},Game_BattleOnceParallelInterpreter[_0x57e85a(0x16f)]['terminate']=function(){const _0x474462=_0x57e85a;if(!SceneManager[_0x474462(0x4b2)]())return;SceneManager[_0x474462(0xd04)][_0x474462(0x1b9)](this),Game_Interpreter[_0x474462(0x16f)][_0x474462(0xd2e)][_0x474462(0xa23)](this);},Game_BattleOnceParallelInterpreter[_0x57e85a(0x16f)][_0x57e85a(0x669)]=function(_0x4ade6c){const _0x593482=_0x57e85a;if(_0x4ade6c)this[_0x593482(0xb62)](_0x4ade6c[_0x593482(0x7df)],0x0);else{if(_0x593482(0xc1a)===_0x593482(0x989))return this['subject']()['isActor']()&&!this[_0x593482(0xbe8)]()[_0x593482(0x471)]();else this[_0x593482(0xd2e)]();}},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xb5d)]=function(){const _0x4dea58=_0x57e85a;return VisuMZ[_0x4dea58(0x734)][_0x4dea58(0x478)]['PartyCmd'][_0x4dea58(0x590)];},VisuMZ['BattleCore'][_0x57e85a(0x2e9)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xb46)],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xb46)]=function(){const _0x3ead2b=_0x57e85a;this['isPartyCommandWindowDisabled']()?this[_0x3ead2b(0x1b8)]():VisuMZ[_0x3ead2b(0x734)][_0x3ead2b(0x2e9)][_0x3ead2b(0xa23)](this);},Scene_Battle['prototype'][_0x57e85a(0x1b8)]=function(){const _0x55973f=_0x57e85a;if(BattleManager[_0x55973f(0xd26)]())'jwktv'==='jwktv'?this[_0x55973f(0x41a)]():_0x3c1453['portraitFlipHorz']=!_0x2db5cc[_0x55973f(0xba2)];else BattleManager[_0x55973f(0xad6)]()&&VisuMZ['BattleCore']['Scene_Battle_startPartyCommandSelection']['call'](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x274)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x550)],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x550)]=function(){const _0x4b5a86=_0x57e85a;if(BattleManager[_0x4b5a86(0xad6)]()){if(_0x4b5a86(0xb16)!=='lFvVe')this['tpbCommandFight'](),this[_0x4b5a86(0x977)]();else{if(!this[_0x4b5a86(0x25e)])return;for(const _0x5928b3 of this[_0x4b5a86(0x25e)]){_0x5928b3&&_0x5928b3[_0x4b5a86(0xa02)]();}}}else{if(_0x4b5a86(0x90f)!==_0x4b5a86(0x90f)){if(!_0x27a3e0[_0x4b5a86(0x376)])return;if(!_0x256ddf[_0x4b5a86(0x4b2)]())return;if(this[_0x4b5a86(0xd6d)]())return;if(this[_0x4b5a86(0xcf4)]())return;if(_0x2bc8f7[_0x4b5a86(0x40f)][_0x4b5a86(0x392)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x5b208f=_0x516ad0(_0x3838c0['$1']);_0x51dfa6[_0x4b5a86(0xd22)]([this],_0x5b208f,![],![]);}}else VisuMZ[_0x4b5a86(0x734)][_0x4b5a86(0x274)][_0x4b5a86(0xa23)](this);}},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xbb6)]=function(){const _0xdef21d=_0x57e85a;if(!VisuMZ[_0xdef21d(0x734)][_0xdef21d(0x2fc)])return;if(Imported[_0xdef21d(0x71b)]&&BattleManager['isCTB']())return;const _0x5c4168=$gameParty[_0xdef21d(0x8a1)]()['filter'](_0x141b0f=>_0x141b0f[_0xdef21d(0xb9f)]()&&_0x141b0f[_0xdef21d(0xaf9)]());BattleManager[_0xdef21d(0x54f)]=_0x5c4168[0x0]||null,BattleManager[_0xdef21d(0x54f)]&&(_0xdef21d(0xdfc)!==_0xdef21d(0xdfc)?(_0x4b9a03[_0xdef21d(0x6a9)](_0x56f27a),_0x25234d[_0xdef21d(0x4d3)](_0xb028f2,_0x13b83b)):BattleManager[_0xdef21d(0x54f)]['setActionState'](_0xdef21d(0x2d3)));},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xcbd)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x960)],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x960)]=function(){const _0x48eb0e=_0x57e85a;VisuMZ['BattleCore']['Scene_Battle_commandEscape'][_0x48eb0e(0xa23)](this);if(!BattleManager[_0x48eb0e(0xad6)]())BattleManager[_0x48eb0e(0x54f)]=null;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xb87)]=Scene_Battle['prototype'][_0x57e85a(0x386)],Scene_Battle[_0x57e85a(0x16f)]['createActorCommandWindow']=function(){const _0x4e2242=_0x57e85a;VisuMZ[_0x4e2242(0x734)][_0x4e2242(0xb87)]['call'](this),this[_0x4e2242(0x87d)]();},Scene_Battle[_0x57e85a(0x16f)]['createActorCommandWindowBattleCore']=function(){const _0x22a3c7=_0x57e85a,_0x1dca42=this['_actorCommandWindow'];_0x1dca42['setHandler'](_0x22a3c7(0x6b7),this[_0x22a3c7(0x8ee)][_0x22a3c7(0xc81)](this)),_0x1dca42[_0x22a3c7(0xdf7)](_0x22a3c7(0x635),this[_0x22a3c7(0xc52)][_0x22a3c7(0xc81)](this)),_0x1dca42[_0x22a3c7(0xdf7)](_0x22a3c7(0x3a3),this[_0x22a3c7(0x9d6)][_0x22a3c7(0xc81)](this)),BattleManager[_0x22a3c7(0xad6)]()&&(this['isPartyCommandWindowDisabled']()?delete _0x1dca42['_handlers'][_0x22a3c7(0x2ac)]:_0x22a3c7(0x24f)!==_0x22a3c7(0xd92)?_0x1dca42['setHandler'](_0x22a3c7(0x2ac),this[_0x22a3c7(0xd0f)][_0x22a3c7(0xc81)](this)):(_0x4d3ec3[_0x22a3c7(0x16f)][_0x22a3c7(0x5cc)][_0x22a3c7(0xa23)](this),this[_0x22a3c7(0x2fa)]?this[_0x22a3c7(0x2bf)]():_0x524e81[_0x22a3c7(0x734)]['Window_BattleActor_processTouch']['call'](this)));},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x8ee)]=function(){const _0xcceebe=_0x57e85a;this[_0xcceebe(0x960)]();},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xc52)]=function(){const _0x2caefd=_0x57e85a;BattleManager[_0x2caefd(0x2ee)]()[_0x2caefd(0xb95)](),BattleManager[_0x2caefd(0xa19)](),BattleManager[_0x2caefd(0x280)](),this[_0x2caefd(0xd43)]();},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x9d6)]=function(){const _0xfcd0f0=_0x57e85a,_0x428347=BattleManager[_0xfcd0f0(0xdab)](),_0x5bdf24=this[_0xfcd0f0(0xb74)][_0xfcd0f0(0xb94)]();_0x428347['setSkill'](_0x5bdf24),BattleManager[_0xfcd0f0(0x2ee)]()[_0xfcd0f0(0x5ec)]($dataSkills[_0x5bdf24]),this[_0xfcd0f0(0x6c3)]();},Scene_Battle[_0x57e85a(0x16f)]['actorCommandCancelTPB']=function(){const _0x1ca315=_0x57e85a;if(this[_0x1ca315(0xb85)]())this[_0x1ca315(0xdb1)]();else{if('zrXUu'!==_0x1ca315(0x919))this['processActorCommandCancelTPB']();else{const _0x2ef241=_0x2c533b['makeDeepCopy'](_0xc00ccc);_0x2ef241[_0x1ca315(0x869)]=![],_0x2ef241[_0x1ca315(0x46a)]=![],_0x2ef241[_0x1ca315(0xad3)]=0x0,this[_0x1ca315(0x916)][_0x1ca315(0x5fa)](_0x2ef241);}}},VisuMZ['BattleCore'][_0x57e85a(0x2fc)]=![],Scene_Battle['prototype'][_0x57e85a(0xb85)]=function(){const _0x2c3c31=_0x57e85a;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x2c3c31(0xc32)]()){if('Lukzv'===_0x2c3c31(0x549))this['_requestRefresh']=!![];else return![];}else{if(!VisuMZ[_0x2c3c31(0x734)][_0x2c3c31(0x2fc)])return![];const _0x126659=$gameParty['aliveMembers']()['filter'](_0xd4d7b0=>_0xd4d7b0[_0x2c3c31(0xb9f)]()&&_0xd4d7b0[_0x2c3c31(0xaf9)]());return _0x126659[_0x2c3c31(0xd36)]>0x0&&BattleManager[_0x2c3c31(0x2ee)]()!==_0x126659[_0x126659['length']-0x1];}},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xdb1)]=function(){const _0x3b7ccc=_0x57e85a,_0x543464=BattleManager['actor'](),_0x271a87=_0x543464[_0x3b7ccc(0x3ab)]();if(_0x271a87)_0x271a87[_0x3b7ccc(0xb3e)]();const _0xd4244f=$gameParty[_0x3b7ccc(0x8a1)]()['filter'](_0x37e589=>_0x37e589[_0x3b7ccc(0xb9f)]()&&_0x37e589['canInput']()),_0x3331e2=_0xd4244f[_0x3b7ccc(0x9b6)](_0x543464),_0x13c886=_0xd4244f[_0x3331e2+0x1];BattleManager['_currentActor']=_0x13c886||null;if(_0x13c886)_0x13c886[_0x3b7ccc(0x913)](_0x3b7ccc(0x2d3));_0x543464[_0x3b7ccc(0x913)](_0x3b7ccc(0xad0)),this[_0x3b7ccc(0xd43)]();},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x75a)]=function(){const _0x22de6d=_0x57e85a;this[_0x22de6d(0xbd4)]['setup'](),this[_0x22de6d(0xb74)]['close']();if(!VisuMZ[_0x22de6d(0x734)][_0x22de6d(0x2fc)])return;if(Imported[_0x22de6d(0x71b)]&&BattleManager[_0x22de6d(0xc32)]())return;if(BattleManager[_0x22de6d(0x54f)]){BattleManager['_currentActor'][_0x22de6d(0x913)](_0x22de6d(0xad0));const _0x54cfc9=BattleManager[_0x22de6d(0x54f)][_0x22de6d(0x3ab)]();if(_0x54cfc9)_0x54cfc9[_0x22de6d(0xb3e)]();}BattleManager[_0x22de6d(0x54f)]=null;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x624)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xb0b)],Scene_Battle['prototype'][_0x57e85a(0xb0b)]=function(){const _0x433e00=_0x57e85a;VisuMZ[_0x433e00(0x734)][_0x433e00(0x624)][_0x433e00(0xa23)](this),this[_0x433e00(0x5aa)]();},Scene_Battle[_0x57e85a(0x16f)]['createHelpWindowBattleCore']=function(){const _0x10e7a3=_0x57e85a;this['_actorCommandWindow'][_0x10e7a3(0xca1)](this[_0x10e7a3(0xb41)]),this['_partyCommandWindow'][_0x10e7a3(0xca1)](this[_0x10e7a3(0xb41)]);},Scene_Battle[_0x57e85a(0x16f)]['battleLayoutStyle']=function(){const _0x31392b=_0x57e85a;if($gameTemp[_0x31392b(0xb2b)]!==undefined)return $gameTemp[_0x31392b(0xb2b)];if(this[_0x31392b(0xbfd)])return this[_0x31392b(0xbfd)];this[_0x31392b(0xbfd)]=VisuMZ[_0x31392b(0x734)]['Settings'][_0x31392b(0xcab)][_0x31392b(0x9c8)][_0x31392b(0x2bc)]()[_0x31392b(0xdf5)]();if(this[_0x31392b(0xbfd)]==='sideview_ui'&&!Imported[_0x31392b(0xb06)]){if(_0x31392b(0x959)!==_0x31392b(0x959)){if(!_0x3d3b92[_0x31392b(0x4b2)]())return;_0xcfd8c[_0x31392b(0x15e)](_0x49537a,_0x511a9b);const _0x2fc4bb=_0x57b916[_0x31392b(0x577)];if(!_0x2fc4bb)return;let _0x4266a6=_0x4b1b3c['Formula'];_0x2fc4bb['setCustomDamageFormula'](_0x4266a6);}else this[_0x31392b(0xbfd)]=_0x31392b(0xd1f);}return this['_battleLayoutStyle']==='frontview_ui'&&!Imported['VisuMZ_3_FrontviewBattleUI']&&('HHBJk'!=='HcjbA'?this[_0x31392b(0xbfd)]=_0x31392b(0xd1f):this[_0x31392b(0x935)]()),this[_0x31392b(0xbfd)];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x327)]=Scene_Battle[_0x57e85a(0x16f)]['windowAreaHeight'],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x1b0)]=function(){const _0x491358=_0x57e85a,_0x30a37f=this['battleLayoutStyle']();switch(_0x30a37f){case _0x491358(0x7df):return this[_0x491358(0xbf8)](Math[_0x491358(0xde7)](0x1,$gameParty[_0x491358(0x9f7)]()),!![]);break;default:return VisuMZ[_0x491358(0x734)][_0x491358(0x327)][_0x491358(0xa23)](this);break;}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x3c5)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x92e)],Scene_Battle[_0x57e85a(0x16f)]['helpWindowRect']=function(){const _0x3f5f6a=_0x57e85a,_0x2cbe36=this[_0x3f5f6a(0x93c)]();switch(_0x2cbe36){case _0x3f5f6a(0x515):return this[_0x3f5f6a(0x48f)]();break;case'default':case _0x3f5f6a(0x7df):case'xp':case _0x3f5f6a(0x801):default:return VisuMZ[_0x3f5f6a(0x734)]['Scene_Battle_helpWindowRect'][_0x3f5f6a(0xa23)](this);break;}},Scene_Battle[_0x57e85a(0x16f)]['statusWindowRect']=function(){const _0x56722b=_0x57e85a,_0x4d9896=this[_0x56722b(0x93c)]();switch(_0x4d9896){case'xp':case _0x56722b(0x801):return this[_0x56722b(0x32c)]();break;case _0x56722b(0x515):return this[_0x56722b(0x349)]();break;case _0x56722b(0xd1f):case _0x56722b(0x7df):default:return this[_0x56722b(0xb1d)]();break;}},VisuMZ['BattleCore']['Scene_Battle_partyCommandWindowRect']=Scene_Battle[_0x57e85a(0x16f)]['partyCommandWindowRect'],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x41d)]=function(){const _0x3252b9=_0x57e85a,_0x45e3c6=this[_0x3252b9(0x93c)]();switch(_0x45e3c6){case'xp':case _0x3252b9(0x801):return this['partyCommandWindowRectXPStyle']();break;case _0x3252b9(0x515):return this[_0x3252b9(0x244)]();case'default':case _0x3252b9(0x7df):default:return this[_0x3252b9(0xb81)]();break;}},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xb81)]=function(){const _0xf71cf0=_0x57e85a,_0x248118=VisuMZ['BattleCore'][_0xf71cf0(0x478)][_0xf71cf0(0xcab)],_0x471c63=_0x248118['CommandWidth']||0xc0,_0x49f5cc=this['windowAreaHeight'](),_0x1656f1=this[_0xf71cf0(0x184)]()?Graphics[_0xf71cf0(0x418)]-_0x471c63:0x0,_0x39212d=Graphics[_0xf71cf0(0x85e)]-_0x49f5cc;return new Rectangle(_0x1656f1,_0x39212d,_0x471c63,_0x49f5cc);},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x555)]=function(){const _0x4e8e2e=_0x57e85a;return this[_0x4e8e2e(0x41d)]();},VisuMZ['BattleCore'][_0x57e85a(0x4d9)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x3de)],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x3de)]=function(){const _0x1c9cdc=_0x57e85a,_0x162a8e=this[_0x1c9cdc(0x93c)]();switch(_0x162a8e){case'xp':case _0x1c9cdc(0x801):case'border':break;case _0x1c9cdc(0xd1f):case _0x1c9cdc(0x7df):default:VisuMZ[_0x1c9cdc(0x734)]['Scene_Battle_updateStatusWindowPosition'][_0x1c9cdc(0xa23)](this);break;}},VisuMZ[_0x57e85a(0x734)]['Scene_Battle_startActorSelection']=Scene_Battle['prototype'][_0x57e85a(0x6d5)],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x6d5)]=function(){const _0x1d89e6=_0x57e85a;VisuMZ[_0x1d89e6(0x734)][_0x1d89e6(0x574)][_0x1d89e6(0xa23)](this),this[_0x1d89e6(0x7a0)]();},VisuMZ['BattleCore'][_0x57e85a(0xb8b)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xdcb)],Scene_Battle[_0x57e85a(0x16f)]['startEnemySelection']=function(){const _0x1a02b0=_0x57e85a;VisuMZ[_0x1a02b0(0x734)][_0x1a02b0(0xb8b)]['call'](this),this[_0x1a02b0(0x973)]['autoSelect'](),this[_0x1a02b0(0x7a0)]();},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x7a0)]=function(){const _0x19b169=_0x57e85a,_0x537c77=this[_0x19b169(0x93c)]();if(['xp',_0x19b169(0x801),_0x19b169(0x515)][_0x19b169(0x3af)](_0x537c77)){if(_0x19b169(0xd55)!==_0x19b169(0x737))this[_0x19b169(0xb74)][_0x19b169(0xb19)]();else{_0x59437d=_0x359487||0x1,_0x152f47--;const _0x3236ec=this[_0x19b169(0xa24)](),_0x653164=_0x3236ec[_0x38b8a1]?_0x3236ec[_0x46ed08][_0x19b169(0x6e1)]:0x0;return _0x31fcd0[_0x19b169(0x5d0)][_0x653164];}}(_0x537c77===_0x19b169(0x515)||this[_0x19b169(0x1ad)]())&&(this[_0x19b169(0xaab)][_0x19b169(0xb19)](),this['_itemWindow']['close']());},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x773)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x306)],Scene_Battle['prototype']['onActorOk']=function(){const _0x28d556=_0x57e85a;VisuMZ[_0x28d556(0x734)][_0x28d556(0x773)][_0x28d556(0xa23)](this),this[_0x28d556(0x37e)]();},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x8d3)]=function(){const _0x204f2a=_0x57e85a;return['attack',_0x204f2a(0xd9a),'singleSkill'][_0x204f2a(0x3af)](this[_0x204f2a(0xb74)][_0x204f2a(0x20f)]());},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x921)]=Scene_Battle[_0x57e85a(0x16f)]['onActorCancel'],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xd0b)]=function(){const _0x951d8d=_0x57e85a;if(this['isNonSubmenuCancel']())this[_0x951d8d(0x912)][_0x951d8d(0x216)](),this[_0x951d8d(0x895)][_0x951d8d(0x639)](),this[_0x951d8d(0xb74)][_0x951d8d(0xa13)]();else{if(_0x951d8d(0xdef)!==_0x951d8d(0xdef)){const _0x945a68=this['commandName'](_0x20496b);if(_0x945a68[_0x951d8d(0x392)](/\\I\[(\d+)\]/i)){const _0x46eac7=this[_0x951d8d(0xbca)](_0x409698),_0xcf2534=this[_0x951d8d(0x754)](_0x945a68)[_0x951d8d(0x8b9)];return _0xcf2534<=_0x46eac7['width']?_0x951d8d(0x95c):_0x951d8d(0xa69);}}else VisuMZ[_0x951d8d(0x734)]['Scene_Battle_onActorCancel'][_0x951d8d(0xa23)](this);}this['cancelTargetSelectionVisibility']();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xc95)]=Scene_Battle[_0x57e85a(0x16f)]['onEnemyOk'],Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xbfc)]=function(){const _0x23cba3=_0x57e85a,_0xa4f26d=BattleManager[_0x23cba3(0xdab)]();_0xa4f26d['setTargetBattlerKey'](this[_0x23cba3(0x973)][_0x23cba3(0x3f1)]()),this[_0x23cba3(0x973)]['closeBattleActorWindow'](),VisuMZ[_0x23cba3(0x734)][_0x23cba3(0xc95)]['call'](this),this[_0x23cba3(0x37e)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x410)]=Scene_Battle['prototype'][_0x57e85a(0x579)],Scene_Battle['prototype'][_0x57e85a(0x579)]=function(){const _0x1206d5=_0x57e85a;this[_0x1206d5(0x8d3)]()?(this[_0x1206d5(0x912)][_0x1206d5(0x216)](),this[_0x1206d5(0x973)][_0x1206d5(0x639)](),this[_0x1206d5(0xb74)][_0x1206d5(0xa13)]()):VisuMZ[_0x1206d5(0x734)][_0x1206d5(0x410)][_0x1206d5(0xa23)](this),this[_0x1206d5(0xabd)](),this[_0x1206d5(0x973)][_0x1206d5(0xcb0)]();},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x37e)]=function(){const _0x298666=_0x57e85a,_0x4de9cf=this[_0x298666(0x93c)]();(_0x4de9cf==='border'||this['isSkillItemWindowsMiddle']())&&(this[_0x298666(0xaab)][_0x298666(0x64a)](),this[_0x298666(0xaab)][_0x298666(0x75e)]&&this[_0x298666(0xaab)][_0x298666(0x216)](),this[_0x298666(0x7fe)][_0x298666(0x64a)](),this[_0x298666(0x7fe)]['active']&&this[_0x298666(0x7fe)][_0x298666(0x216)]());},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xabd)]=function(){const _0x2ce528=_0x57e85a,_0x1316ee=this[_0x2ce528(0x93c)]();if(['xp',_0x2ce528(0x801),_0x2ce528(0x515)][_0x2ce528(0x3af)](_0x1316ee)){if(_0x2ce528(0x393)!==_0x2ce528(0x4d8))this[_0x2ce528(0xb74)]['open']();else{if(!_0x12d82c)return;if(!this['_hpGaugeSprite'])return;if(_0x201012['isActor']()){}else{if(_0x30766a[_0x2ce528(0xd89)]()){if(this[_0x2ce528(0xd77)]===_0x4ba285&&!_0x4307a4[_0x2ce528(0x87a)]())return;}}this[_0x2ce528(0x822)][_0x2ce528(0xb62)](_0x380116,'hp');}}this[_0x2ce528(0x37e)]();},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xb1d)]=function(){const _0x1d6d11=_0x57e85a,_0xaf0d61=VisuMZ[_0x1d6d11(0x734)]['Settings']['BattleLayout'],_0x4821a3=Window_BattleStatus[_0x1d6d11(0x16f)]['extraHeight'](),_0x43d702=Graphics[_0x1d6d11(0x418)]-(_0xaf0d61[_0x1d6d11(0xbdf)]||0xc0),_0x4cf03b=this[_0x1d6d11(0x1b0)]()+_0x4821a3,_0x5a21c1=this[_0x1d6d11(0x184)]()?0x0:Graphics[_0x1d6d11(0x418)]-_0x43d702,_0x44bcd8=Graphics[_0x1d6d11(0x85e)]-_0x4cf03b+_0x4821a3;return new Rectangle(_0x5a21c1,_0x44bcd8,_0x43d702,_0x4cf03b);},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x32c)]=function(){const _0x383650=_0x57e85a,_0xebb775=Window_BattleStatus[_0x383650(0x16f)][_0x383650(0x765)](),_0x325517=Graphics[_0x383650(0x418)],_0x295c4e=this['windowAreaHeight']()+_0xebb775,_0x37eadb=0x0,_0x5da19e=Graphics[_0x383650(0x85e)]-_0x295c4e+_0xebb775;return new Rectangle(_0x37eadb,_0x5da19e,_0x325517,_0x295c4e);},Scene_Battle[_0x57e85a(0x16f)]['partyCommandWindowRectXPStyle']=function(){const _0x4d30f2=_0x57e85a,_0x4a023c=Graphics[_0x4d30f2(0x418)]/0x2,_0xb231d9=this[_0x4d30f2(0xbf8)](VisuMZ['BattleCore'][_0x4d30f2(0x478)][_0x4d30f2(0xcab)][_0x4d30f2(0xddf)],!![]),_0x3a5b2d=Math[_0x4d30f2(0x92a)]((Graphics[_0x4d30f2(0x418)]-_0x4a023c)/0x2),_0x2cd114=Graphics[_0x4d30f2(0x85e)]-_0xb231d9-this[_0x4d30f2(0x32c)]()['height'];return new Rectangle(_0x3a5b2d,_0x2cd114,_0x4a023c,_0xb231d9);},Scene_Battle['prototype']['helpWindowRectBorderStyle']=function(){const _0x4fadab=_0x57e85a,_0x3862e5=Graphics[_0x4fadab(0x8b9)],_0x26e188=Math[_0x4fadab(0x92a)]((Graphics[_0x4fadab(0x418)]-_0x3862e5)/0x2),_0x58522d=this[_0x4fadab(0x618)](),_0x3559f5=(Graphics[_0x4fadab(0x54b)]-Graphics[_0x4fadab(0x85e)])/-0x2;return new Rectangle(_0x26e188,_0x3559f5,_0x3862e5,_0x58522d);},Scene_Battle[_0x57e85a(0x16f)]['statusWindowRectBorderStyle']=function(){const _0x3c157b=_0x57e85a,_0x432e3b=Graphics[_0x3c157b(0x8b9)],_0x10d9be=Math[_0x3c157b(0x92a)]((Graphics[_0x3c157b(0x418)]-_0x432e3b)/0x2),_0x4297c=this[_0x3c157b(0xbf8)](0x4,!![]),_0x536a08=Graphics[_0x3c157b(0x85e)]-_0x4297c+(Graphics[_0x3c157b(0x54b)]-Graphics[_0x3c157b(0x85e)])/0x2;return new Rectangle(_0x10d9be,_0x536a08,_0x432e3b,_0x4297c);},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x244)]=function(){const _0x4671ae=_0x57e85a,_0xbc8d0=Math[_0x4671ae(0x7f8)](Graphics[_0x4671ae(0x8b9)]/0x3),_0xb11920=this[_0x4671ae(0x184)]()?(Graphics[_0x4671ae(0x8b9)]+Graphics[_0x4671ae(0x418)])/0x2-_0xbc8d0:(Graphics['width']-Graphics[_0x4671ae(0x418)])/-0x2,_0x466620=this[_0x4671ae(0x48f)](),_0x2e363d=_0x466620['y']+_0x466620[_0x4671ae(0x54b)],_0x1130da=this[_0x4671ae(0x349)](),_0x2795ff=_0x1130da['y']-_0x2e363d;return new Rectangle(_0xb11920,_0x2e363d,_0xbc8d0,_0x2795ff);},Scene_Battle[_0x57e85a(0x16f)]['skillItemWindowRectBorderStyle']=function(){const _0x388ef8=_0x57e85a,_0x4fa492=Math[_0x388ef8(0x8a8)](Graphics['width']/0x3),_0x46dc57=Math[_0x388ef8(0x92a)]((Graphics['boxWidth']-_0x4fa492)/0x2),_0x51576b=this[_0x388ef8(0x244)](),_0x52cc90=_0x51576b['y'],_0xe657c5=_0x51576b[_0x388ef8(0x54b)];return new Rectangle(_0x46dc57,_0x52cc90,_0x4fa492,_0xe657c5);},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x904)]=function(){const _0x28f3ce=_0x57e85a;this[_0x28f3ce(0x8e4)]['y']=this[_0x28f3ce(0xb41)]['y']+this['_helpWindow'][_0x28f3ce(0x54b)],this['isRightInputMode']()?this[_0x28f3ce(0x93c)]()===_0x28f3ce(0x515)?_0x28f3ce(0xcac)===_0x28f3ce(0x7a5)?this[_0x28f3ce(0x6a4)]=this[_0x28f3ce(0x582)]:this[_0x28f3ce(0x8e4)]['x']=0x8:this[_0x28f3ce(0x8e4)]['x']=-this['_cancelButton'][_0x28f3ce(0x8b9)]-0x4:_0x28f3ce(0x85f)!==_0x28f3ce(0x85f)?this[_0x28f3ce(0x5a1)]='turn':this[_0x28f3ce(0x8e4)]['x']=Graphics[_0x28f3ce(0x8b9)]-(Graphics[_0x28f3ce(0x8b9)]-Graphics[_0x28f3ce(0x418)])/0x2-this[_0x28f3ce(0x8e4)][_0x28f3ce(0x8b9)]-0x4;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x5f8)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xe12)],Scene_Battle['prototype'][_0x57e85a(0xe12)]=function(){const _0x23ce39=_0x57e85a;if(this['battleLayoutStyle']()==='border')return this[_0x23ce39(0xc86)]();else{if(this[_0x23ce39(0x1ad)]()){if(_0x23ce39(0xd99)===_0x23ce39(0xd14))_0x473fdf['shadow']=!![];else return this[_0x23ce39(0xe2a)]();}else return VisuMZ[_0x23ce39(0x734)][_0x23ce39(0x5f8)][_0x23ce39(0xa23)](this);}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x248)]=Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0x865)],Scene_Battle['prototype'][_0x57e85a(0x865)]=function(){const _0x1b5aca=_0x57e85a;if(this[_0x1b5aca(0x93c)]()===_0x1b5aca(0x515))return this[_0x1b5aca(0xc86)]();else{if(this[_0x1b5aca(0x1ad)]())return this[_0x1b5aca(0xe2a)]();else{if('EKKGY'===_0x1b5aca(0xca6))return VisuMZ[_0x1b5aca(0x734)]['Scene_Battle_itemWindowRect'][_0x1b5aca(0xa23)](this);else{if(this[_0x1b5aca(0x9bc)]())return!![];return![];}}}},Scene_Battle[_0x57e85a(0x16f)]['isSkillItemWindowsMiddle']=function(){const _0x8a1f87=_0x57e85a;return VisuMZ[_0x8a1f87(0x734)][_0x8a1f87(0x478)]['BattleLayout'][_0x8a1f87(0x88d)];},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xe2a)]=function(){const _0x9ec6e6=_0x57e85a,_0x258604=Sprite_Button[_0x9ec6e6(0x16f)][_0x9ec6e6(0xcbf)]()*0x2+0x4;let _0x20988e=Graphics['boxWidth']-_0x258604;Imported[_0x9ec6e6(0x376)]&&SceneManager[_0x9ec6e6(0xa36)]()&&('xQJdU'===_0x9ec6e6(0x7cb)?_0x20988e+=_0x258604:_0x910d7b+=_0xe96804[_0x9ec6e6(0xe06)](_0xbe86b5[_0x9ec6e6(0xaeb)]));const _0x18513b=this['helpAreaBottom'](),_0x2705e4=Graphics[_0x9ec6e6(0x85e)]-_0x18513b-this[_0x9ec6e6(0x710)]()['height']+Window_BattleStatus['prototype']['extraHeight'](),_0x3932a7=0x0;return new Rectangle(_0x3932a7,_0x18513b,_0x20988e,_0x2705e4);},Scene_Battle[_0x57e85a(0x16f)][_0x57e85a(0xdee)]=function(){const _0x2f2391=_0x57e85a;if(!VisuMZ[_0x2f2391(0x734)][_0x2f2391(0x478)][_0x2f2391(0xb30)][_0x2f2391(0x7c0)])return;this[_0x2f2391(0x54e)]=new Sprite(),this[_0x2f2391(0x54e)]['x']=this[_0x2f2391(0xd6e)]['x'],this[_0x2f2391(0x54e)]['y']=this[_0x2f2391(0xd6e)]['y'];const _0x2cd005=this[_0x2f2391(0xe22)][_0x2f2391(0x9b6)](this[_0x2f2391(0xd6e)]);this[_0x2f2391(0x660)](this['_enemyNameContainer'],_0x2cd005);for(let _0x3b0b5d=0x0;_0x3b0b5d<0x8;_0x3b0b5d++){const _0x5a29fc=new Window_EnemyName(_0x3b0b5d);this[_0x2f2391(0x54e)][_0x2f2391(0x67f)](_0x5a29fc);}},Sprite_Battler[_0x57e85a(0xda2)]=VisuMZ['BattleCore']['Settings']['Actor'][_0x57e85a(0x858)],VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x34a)]=Sprite_Battler[_0x57e85a(0x16f)]['initMembers'],Sprite_Battler[_0x57e85a(0x16f)]['initMembers']=function(){const _0x351ffe=_0x57e85a;VisuMZ[_0x351ffe(0x734)]['Sprite_Battler_initMembers']['call'](this),this[_0x351ffe(0x611)]();if(this['constructor']===Sprite_Enemy)this[_0x351ffe(0x46f)]();this['createDistortionSprite']();},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x611)]=function(){const _0x36bbdb=_0x57e85a;this[_0x36bbdb(0x4aa)]=0x0,this[_0x36bbdb(0x20d)]=0x0,this[_0x36bbdb(0xafd)]=0x0,this['_targetFloatHeight']=0x0,this[_0x36bbdb(0x6b8)]=0x0,this[_0x36bbdb(0x8ae)]=0x0,this[_0x36bbdb(0x429)]=_0x36bbdb(0x23a),this['_jumpHeight']=0x0,this[_0x36bbdb(0x59c)]=0x0,this[_0x36bbdb(0x8b0)]=0x0,this[_0x36bbdb(0x9b3)]=0x0,this[_0x36bbdb(0x582)]=0xff,this['_opacityDuration']=0x0,this[_0x36bbdb(0x5a5)]=0x0,this[_0x36bbdb(0x591)]=_0x36bbdb(0x23a),this[_0x36bbdb(0x83d)]=0x0,this[_0x36bbdb(0xbc8)]=0x0,this[_0x36bbdb(0xc65)]=0x0,this[_0x36bbdb(0xa9e)]=0x0,this[_0x36bbdb(0x564)]=_0x36bbdb(0x23a),this['_angleRevertOnFinish']=!![],this[_0x36bbdb(0x7ff)]=0x0,this[_0x36bbdb(0x864)]=0x0,this[_0x36bbdb(0xa49)]=0x0,this[_0x36bbdb(0x3e7)]=0x0,this['_skewDuration']=0x0,this['_skewWholeDuration']=0x0,this[_0x36bbdb(0x6c5)]=_0x36bbdb(0x23a),this['_growX']=0x1,this[_0x36bbdb(0x9cb)]=0x1,this[_0x36bbdb(0x4e7)]=0x1,this[_0x36bbdb(0x857)]=0x1,this[_0x36bbdb(0x68f)]=0x0,this[_0x36bbdb(0x346)]=0x0,this[_0x36bbdb(0x2ef)]='Linear',this[_0x36bbdb(0xd7e)]=0x1,this[_0x36bbdb(0x83e)]=0x0,this[_0x36bbdb(0xaf3)]=0x0,this[_0x36bbdb(0x785)]=0x0,this[_0x36bbdb(0x9ac)]=0x0,this['_homeEasing']=_0x36bbdb(0x23a),this[_0x36bbdb(0x5cd)]=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x46f)]=function(){const _0x11cf85=_0x57e85a;this[_0x11cf85(0x7a9)]=new Sprite(),this[_0x11cf85(0x7a9)][_0x11cf85(0x632)]=ImageManager[_0x11cf85(0x95e)](_0x11cf85(0xa48)),this[_0x11cf85(0x7a9)]['bitmap'][_0x11cf85(0xdc5)]=VisuMZ[_0x11cf85(0x734)][_0x11cf85(0x478)]['Actor'][_0x11cf85(0x30c)],this['_shadowSprite']['anchor']['x']=0.5,this[_0x11cf85(0x7a9)]['anchor']['y']=0.5,this[_0x11cf85(0x7a9)]['y']=-0x2,this['_shadowSprite'][_0x11cf85(0x5b6)]=![],this['addChild'](this[_0x11cf85(0x7a9)]);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xdd6)]=function(){const _0x592bf6=_0x57e85a;this[_0x592bf6(0x937)]=new Sprite(),this[_0x592bf6(0x937)][_0x592bf6(0x70e)]['x']=0.5,this[_0x592bf6(0x937)][_0x592bf6(0x70e)]['y']=0.5,this[_0x592bf6(0x67f)](this[_0x592bf6(0x937)]);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x886)]=function(){const _0x307fcd=_0x57e85a;if(!this[_0x307fcd(0x937)])return;if(this[_0x307fcd(0x7a9)]){const _0x3f3e48=this[_0x307fcd(0x525)](this[_0x307fcd(0x937)]);this[_0x307fcd(0x660)](this[_0x307fcd(0x7a9)],_0x3f3e48),this[_0x307fcd(0x9c1)]();}this[_0x307fcd(0x9fb)]&&this[_0x307fcd(0x937)]['addChild'](this[_0x307fcd(0x9fb)]);this[_0x307fcd(0xc4d)]&&('DrqWK'===_0x307fcd(0xd6c)?this[_0x307fcd(0x937)][_0x307fcd(0x67f)](this['_weaponSprite']):(_0x27e4c6[_0x307fcd(0x734)][_0x307fcd(0x73d)][_0x307fcd(0xa23)](this),this[_0x307fcd(0x6a4)]=this[_0x307fcd(0x779)]>0x0?0xff:0x0));if(this[_0x307fcd(0x5c7)]){if(_0x307fcd(0xb9d)!=='KuLjm'){const _0x198946=this[_0x307fcd(0x18a)](_0x34e0b2),_0x4c2e69=new _0x35b29f(_0x198946,_0x4f3f48);this[_0x307fcd(0x20c)](_0x4c2e69),_0x25244e?this[_0x307fcd(0xb7b)]=_0x4c2e69:this['_enemyMultiTargetWindow']=_0x4c2e69;}else this[_0x307fcd(0x937)][_0x307fcd(0x67f)](this[_0x307fcd(0x5c7)]);}if(this['_injectAnimationSprite']){if(_0x307fcd(0xaea)===_0x307fcd(0xaea))this[_0x307fcd(0x937)][_0x307fcd(0x67f)](this[_0x307fcd(0x3b6)]);else{if(!_0x2626c4[_0x307fcd(0x3a6)](_0x3094df))return!![];}}if(this[_0x307fcd(0xbe6)]){if(_0x307fcd(0xd21)===_0x307fcd(0x331)){if(this[_0x307fcd(0x879)][_0x307fcd(0x983)]!==_0x5a5b45)return this[_0x307fcd(0x879)]['hardDamageCap'];const _0xbaf2a0=/<DAMAGE CAP:[ ](\d+)>/i,_0x29463c=this[_0x307fcd(0x7c9)]()[_0x307fcd(0x260)](_0x2d2402=>_0x2d2402&&_0x2d2402[_0x307fcd(0x40f)][_0x307fcd(0x392)](_0xbaf2a0)?_0x57305c(_0x73ca3f['$1']):0x0);let _0x166a09=_0x29463c[_0x307fcd(0xd36)]>0x0?_0x22658d['max'](..._0x29463c):0x0;if(_0x166a09<=0x0)_0x166a09=_0x128194['BattleCore']['Settings'][_0x307fcd(0x573)][_0x307fcd(0xd3d)];return this['_cache'][_0x307fcd(0x983)]=_0x166a09,this['_cache'][_0x307fcd(0x983)];}else this[_0x307fcd(0x937)]['addChild'](this[_0x307fcd(0xbe6)]);}},Sprite_Battler[_0x57e85a(0x16f)]['updateShadowVisibility']=function(){const _0x402be2=_0x57e85a;if(!this[_0x402be2(0x7a9)])return;if(this[_0x402be2(0xb08)]&&this['_battler'][_0x402be2(0x996)]()){const _0x2dafed=this[_0x402be2(0x7a9)]['bitmap'];this[_0x402be2(0x7a9)][_0x402be2(0xe1d)](0x0,0x0,_0x2dafed[_0x402be2(0x8b9)],_0x2dafed[_0x402be2(0x54b)]);}else this['_shadowSprite'][_0x402be2(0xe1d)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xb99)]=function(){const _0x5de595=_0x57e85a;return SceneManager[_0x5de595(0x4b2)]()?SceneManager[_0x5de595(0xd04)][_0x5de595(0x78d)]['_damageContainer']:this[_0x5de595(0x80e)];},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xd41)]=function(_0x45e3da,_0x27d66d){const _0x1e4ede=_0x57e85a;if(!this[_0x1e4ede(0xb08)]['isSpriteVisible']())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x49b48b=VisuMZ[_0x1e4ede(0x734)][_0x1e4ede(0x478)][_0x1e4ede(0x573)],_0x4b0c46=new Sprite_Damage();_0x4b0c46['_duration']=_0x49b48b[_0x1e4ede(0x2fe)],this[_0x1e4ede(0x5d3)](_0x4b0c46),_0x4b0c46[_0x1e4ede(0xd41)](_0x45e3da,_0x27d66d),this['addDamageSprite'](_0x4b0c46);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x5e5)]=function(_0x1a66df,_0x2f3c22,_0x31a374){const _0x4ff3c0=_0x57e85a;if(!this[_0x4ff3c0(0xb08)]['isSpriteVisible']())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0xa3ed3e=VisuMZ[_0x4ff3c0(0x734)][_0x4ff3c0(0x478)]['Damage'],_0x321eca=new Sprite_Damage();_0x321eca[_0x4ff3c0(0x70d)]=_0xa3ed3e[_0x4ff3c0(0x2fe)],this[_0x4ff3c0(0x5d3)](_0x321eca),_0x321eca[_0x4ff3c0(0x5e5)](_0x1a66df,_0x2f3c22,_0x31a374),this['addDamageSprite'](_0x321eca);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x84d)]=function(){const _0x22888f=_0x57e85a;if(!this[_0x22888f(0xb08)][_0x22888f(0xbad)]())return;while(this['_battler']['isDamagePopupRequested']()){if(this['_battler']['isSpriteVisible']()){if('uuikq'!==_0x22888f(0xde1)){const _0x14a296=_0x28a2a5(_0x5b268e['$1'])[_0x22888f(0xc06)](/[\r\n]+/)[_0x22888f(0xb45)]('');_0x56e33c[_0x22888f(0x7a3)]=_0xad71d4[_0x22888f(0xdf3)](_0x14a296);}else this[_0x22888f(0xd10)]();}}this[_0x22888f(0xb08)][_0x22888f(0xb83)](),this[_0x22888f(0xb08)][_0x22888f(0x165)]();},Sprite_Battler['prototype'][_0x57e85a(0xd10)]=function(){const _0x185714=_0x57e85a;if(BattleManager[_0x185714(0x2b4)]())return;const _0x13fbc9=VisuMZ[_0x185714(0x734)]['Settings'][_0x185714(0x573)],_0x21a4fa=new Sprite_Damage();_0x21a4fa['_duration']=_0x13fbc9['PopupDuration'],this[_0x185714(0x5d3)](_0x21a4fa),_0x21a4fa['setup'](this[_0x185714(0xb08)]),_0x21a4fa[_0x185714(0x821)](this[_0x185714(0xb08)]),this['addDamageSprite'](_0x21a4fa);},Sprite_Battler[_0x57e85a(0x16f)]['addDamageSprite']=function(_0x574be0){const _0x301399=_0x57e85a;this[_0x301399(0x6d7)]['push'](_0x574be0);if(this[_0x301399(0x7c5)]()){const _0x5ac2d6=SceneManager['_scene'][_0x301399(0x912)];if(_0x5ac2d6)_0x5ac2d6[_0x301399(0x631)](_0x574be0,this[_0x301399(0xb08)]);}else{this[_0x301399(0xb99)]()[_0x301399(0x67f)](_0x574be0);if(SceneManager[_0x301399(0xc66)]())_0x574be0[_0x301399(0xa63)]['x']=-0x1;}},Sprite_Battler['prototype'][_0x57e85a(0x7c5)]=function(){const _0x29423d=_0x57e85a;return!$gameSystem['isSideView']()&&this[_0x29423d(0xb08)]&&this['_battler']['isActor']();return!$gameSystem['isSideView']()&&this[_0x29423d(0xb08)]&&this[_0x29423d(0xb08)][_0x29423d(0x7d1)]()&&Window_BattleStatus[_0x29423d(0x16f)][_0x29423d(0x93c)]()===_0x29423d(0x801);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x5d3)]=function(_0x29616b){const _0x50b92c=_0x57e85a;this['alignBattleCoreDamageSprite'](_0x29616b,!![]);const _0x48b774=VisuMZ[_0x50b92c(0x734)][_0x50b92c(0x478)]['Damage'],_0x55949b=SceneManager['isBattleFlipped']()?-0x1:0x1;if(_0x48b774[_0x50b92c(0x252)]){if('UyNKf'!==_0x50b92c(0x893))for(const _0x3a86c0 of this['_damages']){if(_0x50b92c(0xba5)!==_0x50b92c(0xba5)){_0x211f02(_0x50b92c(0x299)),_0x13a09b[_0x50b92c(0x4f1)]();return;}else _0x3a86c0['x']+=_0x48b774[_0x50b92c(0x249)]*_0x55949b,_0x3a86c0['y']+=_0x48b774[_0x50b92c(0x74c)];}else{if(!this[_0x50b92c(0x2df)]())return![];if(!_0x5706c3[_0x50b92c(0x358)]())return![];return(this[_0x50b92c(0x2df)]()[_0x50b92c(0x40f)]||'')[_0x50b92c(0x392)](/<DISPERSE DAMAGE>/i);}}else{if(_0x50b92c(0x266)===_0x50b92c(0xc36))_0x31b745?this[_0x50b92c(0x658)]():this['removeImmortal']();else{const _0x1048c9=this['_damages'][this['_damages'][_0x50b92c(0xd36)]-0x1];if(_0x1048c9){if('pDelw'!==_0x50b92c(0x870))_0x29616b['x']=_0x1048c9['x']+_0x48b774['PopupShiftX']*_0x55949b,_0x29616b['y']=_0x1048c9['y']+_0x48b774[_0x50b92c(0x74c)];else{this['push'](_0x50b92c(0xb4f),_0x46f558);if(!_0x1780b7['BattleCore'][_0x50b92c(0x478)]['BattleLog'][_0x50b92c(0x269)])return;this[_0x50b92c(0x5fa)](_0x50b92c(0x3fd),_0x565976[_0x50b92c(0x1cb)][_0x50b92c(0x554)](_0x56c626['name']()));}}}}},Sprite_Battler[_0x57e85a(0x16f)]['alignBattleCoreDamageSprite']=function(_0x1d68d3,_0x3a71d2){const _0x1d5e4b=_0x57e85a,_0x17a0db=SceneManager[_0x1d5e4b(0xc66)]()?-0x1:0x1;let _0x2c948e=this['_baseX'];_0x2c948e+=this[_0x1d5e4b(0x58d)]();let _0x1e7afa=this[_0x1d5e4b(0x20d)];const _0xa3034d=this['_distortionSprite'][_0x1d5e4b(0xa63)]['y'];_0x1e7afa+=this[_0x1d5e4b(0x52e)]();const _0x4ad151=SceneManager[_0x1d5e4b(0xd04)][_0x1d5e4b(0x912)];if(_0x4ad151&&this['parent']===_0x4ad151){if(_0x1d5e4b(0xdbf)!=='hKmxA')_0x46606d[_0x1d5e4b(0x16f)][_0x1d5e4b(0x2d8)][_0x1d5e4b(0xa23)](this);else{_0x2c948e+=_0x4ad151['x']-this[_0x1d5e4b(0xb2a)]();const _0x5abbb7=_0x4ad151[_0x1d5e4b(0x4ab)]()*0x3/0x4;_0x1e7afa=_0x4ad151['y']+_0x5abbb7,_0x1e7afa=Math[_0x1d5e4b(0x16e)](_0x1e7afa,_0x4ad151['y']+this['y']-this[_0x1d5e4b(0x54b)]+_0x5abbb7);}}_0x1d68d3['x']=Math['round'](_0x2c948e+this['damageOffsetX']()*_0x17a0db),_0x1d68d3['y']=Math[_0x1d5e4b(0x92a)](_0x1e7afa+this[_0x1d5e4b(0x814)]());},VisuMZ['BattleCore'][_0x57e85a(0x24e)]=Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xb2a)],Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xb2a)]=function(){const _0x2e98ec=_0x57e85a;let _0x59b997=VisuMZ[_0x2e98ec(0x734)][_0x2e98ec(0x24e)][_0x2e98ec(0xa23)](this),_0x5bd480=VisuMZ[_0x2e98ec(0x734)][_0x2e98ec(0x478)]['Damage'][_0x2e98ec(0xac1)]||0x0;return Math[_0x2e98ec(0x92a)](_0x59b997+_0x5bd480);},VisuMZ['BattleCore'][_0x57e85a(0x183)]=Sprite_Battler[_0x57e85a(0x16f)]['damageOffsetY'],Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x814)]=function(){const _0x21f87c=_0x57e85a;let _0x4b3d0c=VisuMZ[_0x21f87c(0x734)][_0x21f87c(0x183)][_0x21f87c(0xa23)](this);switch(VisuMZ[_0x21f87c(0x734)][_0x21f87c(0x478)][_0x21f87c(0x573)][_0x21f87c(0x7e4)]){case _0x21f87c(0xb03):_0x4b3d0c-=this['height']*this[_0x21f87c(0xa63)]['y'];break;case _0x21f87c(0xc31):_0x4b3d0c-=this[_0x21f87c(0x54b)]*this[_0x21f87c(0xa63)]['y']*0.5;break;}let _0x4a21ee=VisuMZ[_0x21f87c(0x734)][_0x21f87c(0x478)][_0x21f87c(0x573)]['PopupOffsetY']||0x0;return Math[_0x21f87c(0x92a)](_0x4b3d0c+_0x4a21ee);},Sprite_Actor['prototype']['damageOffsetX']=function(){const _0x1bd036=_0x57e85a;return Sprite_Battler['prototype'][_0x1bd036(0xb2a)][_0x1bd036(0xa23)](this);},Sprite_Actor[_0x57e85a(0x16f)]['damageOffsetY']=function(){const _0x2846f5=_0x57e85a;return Sprite_Battler[_0x2846f5(0x16f)]['damageOffsetY']['call'](this);},Sprite_Battler['prototype'][_0x57e85a(0x16d)]=function(_0x74fc7c){const _0x84a122=_0x57e85a;if(this[_0x84a122(0x7c5)]()){if(_0x84a122(0xd0a)!==_0x84a122(0xbce))SceneManager[_0x84a122(0xd04)][_0x84a122(0x912)]['removeDamageSprite'](_0x74fc7c);else{this[_0x84a122(0xbd4)][_0x84a122(0xb62)](),this[_0x84a122(0xb74)][_0x84a122(0xb19)]();if(!_0xe792b0[_0x84a122(0x734)][_0x84a122(0x2fc)])return;if(_0x226750['VisuMZ_2_BattleSystemCTB']&&_0x96c448[_0x84a122(0xc32)]())return;if(_0x47cd3a['_currentActor']){_0x13877a[_0x84a122(0x54f)][_0x84a122(0x913)](_0x84a122(0xad0));const _0x2aaad4=_0x2da441['_currentActor']['battler']();if(_0x2aaad4)_0x2aaad4[_0x84a122(0xb3e)]();}_0x141101[_0x84a122(0x54f)]=null;}}else this['damageContainer']()[_0x84a122(0xb77)](_0x74fc7c),this[_0x84a122(0x6d7)][_0x84a122(0xb45)](_0x74fc7c),_0x74fc7c[_0x84a122(0xd2b)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xd51)]=Sprite_Battler['prototype'][_0x57e85a(0x1b1)],Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x1b1)]=function(_0x16e6be,_0x286c45){const _0x68fc49=_0x57e85a,_0xdaed70=VisuMZ[_0x68fc49(0x734)]['Settings'];if(this[_0x68fc49(0xd77)]===Sprite_Actor)_0x16e6be+=_0xdaed70[_0x68fc49(0x876)][_0x68fc49(0xc3c)]||0x0,_0x286c45+=_0xdaed70['Actor']['OffsetY']||0x0;else this[_0x68fc49(0xd77)]===Sprite_Enemy&&(_0x16e6be+=_0xdaed70['Enemy'][_0x68fc49(0xc3c)]||0x0,_0x286c45+=_0xdaed70[_0x68fc49(0xb30)][_0x68fc49(0xa95)]||0x0);this['_battler']&&(_0x16e6be=this[_0x68fc49(0xb08)][_0x68fc49(0xc9b)]??_0x16e6be,_0x286c45=this[_0x68fc49(0xb08)][_0x68fc49(0x987)]??_0x286c45),VisuMZ[_0x68fc49(0x734)][_0x68fc49(0xd51)][_0x68fc49(0xa23)](this,_0x16e6be,_0x286c45),this[_0x68fc49(0x83e)]=this['_homeX'],this['_targetHomeY']=this[_0x68fc49(0x8b6)],this['_homeDuration']=0x0,this[_0x68fc49(0x9ac)]=0x0,this[_0x68fc49(0x20a)]=_0x68fc49(0x23a);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x79a)]=Sprite_Battler['prototype'][_0x57e85a(0xa02)],Sprite_Battler['prototype'][_0x57e85a(0xa02)]=function(){const _0x2d2bc9=_0x57e85a;VisuMZ[_0x2d2bc9(0x734)][_0x2d2bc9(0x79a)]['call'](this),!this[_0x2d2bc9(0xb08)]&&this[_0x2d2bc9(0x822)]&&(_0x2d2bc9(0x1dd)===_0x2d2bc9(0x9ef)?_0x1f3d2e[_0x2d2bc9(0x573)][_0x2d2bc9(0x7e4)]=_0x2d2bc9(0x6da):this[_0x2d2bc9(0x822)]['visible']=![]);},VisuMZ['BattleCore']['Sprite_Battler_updateMain']=Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x55a)],Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x55a)]=function(){const _0x3741e3=_0x57e85a;this[_0x3741e3(0xdbd)](),this['updateSkew'](),this[_0x3741e3(0x956)](),this[_0x3741e3(0xd4b)](),VisuMZ[_0x3741e3(0x734)][_0x3741e3(0x482)]['call'](this),this[_0x3741e3(0xdcd)](),this[_0x3741e3(0xb21)]();if(this[_0x3741e3(0xd77)]===Sprite_Enemy)this[_0x3741e3(0xa01)]();},VisuMZ['BattleCore']['Sprite_Battler_updatePosition']=Sprite_Battler['prototype'][_0x57e85a(0x8a4)],Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x8a4)]=function(){const _0x2c9db9=_0x57e85a;this[_0x2c9db9(0xc54)](),VisuMZ[_0x2c9db9(0x734)][_0x2c9db9(0x8ba)][_0x2c9db9(0xa23)](this),this['updatePositionBattleCore'](),this[_0x2c9db9(0x1c3)]();},Sprite_Battler[_0x57e85a(0x16f)]['updateSelectionEffect']=function(){const _0x2edaab=_0x57e85a,_0x2b973c=this[_0x2edaab(0x473)]();if(this[_0x2edaab(0xb08)][_0x2edaab(0x20e)]())this['_selectionEffectCount']++,Graphics[_0x2edaab(0x868)]%0x1e<0xf?_0x2b973c['setBlendColor']([0xff,0xff,0xff,0x40]):_0x2b973c[_0x2edaab(0xaac)]([0x0,0x0,0x0,0x0]);else this[_0x2edaab(0x1d6)]>0x0&&(this[_0x2edaab(0x1d6)]=0x0,_0x2b973c[_0x2edaab(0xaac)]([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x878)]=function(_0x1e48fa,_0x523d93){const _0xd69a34=_0x57e85a,_0x3f59b1=VisuMZ['BattleCore'][_0xd69a34(0x478)];if(this[_0xd69a34(0xd77)]===Sprite_Actor)_0x1e48fa+=_0x3f59b1[_0xd69a34(0x876)][_0xd69a34(0xc3c)]||0x0,_0x523d93+=_0x3f59b1[_0xd69a34(0x876)][_0xd69a34(0xa95)]||0x0;else this[_0xd69a34(0xd77)]===Sprite_Enemy&&(_0x1e48fa+=_0x3f59b1[_0xd69a34(0xb30)][_0xd69a34(0xc3c)]||0x0,_0x523d93+=_0x3f59b1[_0xd69a34(0xb30)]['OffsetY']||0x0);const _0x50a848=_0x1e48fa-this[_0xd69a34(0xbac)],_0x311fd4=_0x523d93-this[_0xd69a34(0x8b6)];this[_0xd69a34(0xbac)]=_0x1e48fa,this['_homeY']=_0x523d93,this[_0xd69a34(0xda9)]-=_0x50a848,this[_0xd69a34(0xde2)]-=_0x311fd4,this[_0xd69a34(0xd16)]-=_0x50a848,this[_0xd69a34(0xcb4)]-=_0x311fd4,this['updatePosition']();},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x405)]=function(_0x391ec8,_0x4e1b19,_0x7dd9ac,_0xa66518){const _0x38731a=_0x57e85a,_0x132cf0=VisuMZ['BattleCore']['Settings'];if(this[_0x38731a(0xd77)]===Sprite_Actor)_0x391ec8+=_0x132cf0[_0x38731a(0x876)][_0x38731a(0xc3c)]||0x0,_0x4e1b19+=_0x132cf0[_0x38731a(0x876)][_0x38731a(0xa95)]||0x0;else{if(this[_0x38731a(0xd77)]===Sprite_Enemy){if('AywcU'==='dBGMX'){if(!_0x1ca1cf[_0x38731a(0x3a6)](_0x1af445))return![];}else _0x391ec8+=_0x132cf0['Enemy'][_0x38731a(0xc3c)]||0x0,_0x4e1b19+=_0x132cf0[_0x38731a(0xb30)][_0x38731a(0xa95)]||0x0;}}if(this[_0x38731a(0x83e)]!==_0x391ec8||this[_0x38731a(0xaf3)]!==_0x4e1b19){if(_0x38731a(0x347)===_0x38731a(0x347))this[_0x38731a(0x83e)]=_0x391ec8,this[_0x38731a(0xaf3)]=_0x4e1b19,this['_homeDuration']=_0x7dd9ac,this[_0x38731a(0x9ac)]=_0x7dd9ac,this[_0x38731a(0x20a)]=_0xa66518,_0x7dd9ac<=0x0&&(_0x38731a(0x4b8)!==_0x38731a(0x643)?this[_0x38731a(0xa44)]():(_0x2a88d8=_0x500e25[_0x38731a(0x795)](/\x1I\[(\d+)\]/gi,''),_0x5e53ca=_0x4e2742['replace'](/\\I\[(\d+)\]/gi,'')));else{const _0x3306a2=this[_0x38731a(0xb08)]&&this[_0x38731a(0xb08)][_0x38731a(0x654)]();this[_0x38731a(0xd7e)]=(_0x3306a2?-0x1:0x1)*_0x1429a1['abs'](this[_0x38731a(0xa63)]['x']);}}},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xc54)]=function(){const _0x54ae7e=_0x57e85a;if(this[_0x54ae7e(0x785)]<=0x0)return;const _0x44d4b8=this['_homeDuration'],_0x571081=this['_homeWholeDuration'],_0x2e93f4=this[_0x54ae7e(0x20a)];Imported[_0x54ae7e(0x376)]?(this['_homeX']=this[_0x54ae7e(0x3bb)](this[_0x54ae7e(0xbac)],this[_0x54ae7e(0x83e)],_0x44d4b8,_0x571081,_0x2e93f4),this[_0x54ae7e(0x8b6)]=this[_0x54ae7e(0x3bb)](this['_homeY'],this[_0x54ae7e(0xaf3)],_0x44d4b8,_0x571081,_0x2e93f4)):(this[_0x54ae7e(0xbac)]=(this[_0x54ae7e(0xbac)]*(_0x44d4b8-0x1)+this[_0x54ae7e(0x83e)])/_0x44d4b8,this[_0x54ae7e(0x8b6)]=(this[_0x54ae7e(0x8b6)]*(_0x44d4b8-0x1)+this[_0x54ae7e(0xaf3)])/_0x44d4b8);this[_0x54ae7e(0x785)]--;if(this['_homeDuration']<=0x0)this[_0x54ae7e(0xa44)]();},Sprite_Battler[_0x57e85a(0x16f)]['onHomeMoveEnd']=function(){const _0x25f374=_0x57e85a;this[_0x25f374(0xbac)]=this[_0x25f374(0x83e)],this[_0x25f374(0x8b6)]=this[_0x25f374(0xaf3)];},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xdfe)]=function(){const _0x48ba4d=_0x57e85a;this[_0x48ba4d(0x4aa)]=this['x'],this['_baseY']=this['y'],this[_0x48ba4d(0x5a0)](),this[_0x48ba4d(0xbd5)](),this['x']+=this[_0x48ba4d(0x58d)](),this['y']+=this[_0x48ba4d(0x52e)](),this['y']+=this[_0x48ba4d(0x518)](),this['x']=Math[_0x48ba4d(0x7f8)](this['x']),this['y']=Math[_0x48ba4d(0x7f8)](this['y']);},Sprite_Battler[_0x57e85a(0x16f)]['extraPositionX']=function(){let _0x40f5fb=0x0;return _0x40f5fb;},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x52e)]=function(){const _0x5a96db=_0x57e85a;let _0x2f188f=0x0;return this[_0x5a96db(0xb08)]&&!this[_0x5a96db(0xb08)][_0x5a96db(0x287)]()&&(_0x2f188f-=this[_0x5a96db(0xafd)],_0x2f188f-=this[_0x5a96db(0x477)]),_0x2f188f;},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x518)]=function(){const _0xa26cbf=_0x57e85a;let _0x2c51e3=0x0;if(this[_0xa26cbf(0x937)]&&this[_0xa26cbf(0xd77)]!==Sprite_SvEnemy){const _0x3b02b9=this['_distortionSprite']['scale']['y'];_0x2c51e3-=(_0x3b02b9-0x1)*this[_0xa26cbf(0x54b)];}return _0x2c51e3;},Sprite_Battler['prototype'][_0x57e85a(0xd4b)]=function(){const _0x42e497=_0x57e85a,_0x205905=this['_battler']&&this[_0x42e497(0xb08)]['isBattlerFlipped']();this[_0x42e497(0xd7e)]=(_0x205905?-0x1:0x1)*Math[_0x42e497(0xe06)](this[_0x42e497(0xa63)]['x']);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x263)]=function(_0x14c06d,_0x598473,_0x452531){const _0x466bbe=_0x57e85a;if(!this['canMove']())return;if(this['_targetFloatHeight']===_0x14c06d)return;this['_targetFloatHeight']=_0x14c06d,this['_floatDuration']=_0x598473,this[_0x466bbe(0x8ae)]=_0x598473,this[_0x466bbe(0x429)]=_0x452531||'Linear';if(_0x598473<=0x0)this[_0x466bbe(0xafd)]=_0x14c06d;},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x5a0)]=function(){const _0x17c104=_0x57e85a;if(this[_0x17c104(0x6b8)]<=0x0)return;const _0x1f539a=this['_floatDuration'],_0xbe0950=this[_0x17c104(0x8ae)],_0x577479=this['_floatEasing'];Imported[_0x17c104(0x376)]?this[_0x17c104(0xafd)]=this['applyEasing'](this[_0x17c104(0xafd)],this[_0x17c104(0x63a)],_0x1f539a,_0xbe0950,_0x577479):this[_0x17c104(0xafd)]=(this[_0x17c104(0xafd)]*(_0x1f539a-0x1)+this[_0x17c104(0x63a)])/_0x1f539a;this[_0x17c104(0x6b8)]--;if(this['_floatDuration']<=0x0)this[_0x17c104(0x505)]();},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x505)]=function(){const _0x47a79a=_0x57e85a;this[_0x47a79a(0xafd)]=this[_0x47a79a(0x63a)];},Sprite_Battler[_0x57e85a(0x16f)]['isFloating']=function(){const _0x56498c=_0x57e85a;return this[_0x56498c(0x6b8)]>0x0;},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x2d9)]=function(_0x259d6f,_0x4daf3d){const _0x1a7eb1=_0x57e85a;if(!this[_0x1a7eb1(0x67c)]())return;if(_0x4daf3d<=0x0)return;this[_0x1a7eb1(0x59c)]=_0x259d6f,this[_0x1a7eb1(0x8b0)]=_0x4daf3d,this[_0x1a7eb1(0x9b3)]=_0x4daf3d;},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xbd5)]=function(){const _0x1f43c2=_0x57e85a;if(this[_0x1f43c2(0x8b0)]<=0x0)return;const _0x2e5646=this['_jumpWholeDuration']-this[_0x1f43c2(0x8b0)],_0x5b5b30=this[_0x1f43c2(0x9b3)]/0x2,_0x1ae7f6=this[_0x1f43c2(0x59c)],_0x6533bc=-_0x1ae7f6/Math[_0x1f43c2(0xc8e)](_0x5b5b30,0x2);this[_0x1f43c2(0x477)]=_0x6533bc*Math['pow'](_0x2e5646-_0x5b5b30,0x2)+_0x1ae7f6,this[_0x1f43c2(0x8b0)]--;if(this[_0x1f43c2(0x8b0)]<=0x0)return this[_0x1f43c2(0xab3)]();},Sprite_Battler[_0x57e85a(0x16f)]['onJumpEnd']=function(){const _0x20329a=_0x57e85a;this[_0x20329a(0x477)]=0x0;},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xad5)]=function(){const _0x35ab47=_0x57e85a;return this[_0x35ab47(0x8b0)]>0x0;},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x999)]=function(_0x412b55,_0x176b35,_0x8396cc){const _0x33d7f5=_0x57e85a;if(this[_0x33d7f5(0x582)]===_0x412b55)return;this[_0x33d7f5(0x582)]=_0x412b55,this['_opacityDuration']=_0x176b35,this[_0x33d7f5(0x5a5)]=_0x176b35,this[_0x33d7f5(0x591)]=_0x8396cc||'Linear';if(_0x176b35<=0x0)this['opacity']=_0x412b55;},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x1c3)]=function(){const _0x6aaa7f=_0x57e85a;if(this[_0x6aaa7f(0xd77)][_0x6aaa7f(0x7a3)]===_0x6aaa7f(0x52f))return;if(this[_0x6aaa7f(0x81d)]<=0x0)return;const _0x5bf312=this[_0x6aaa7f(0x81d)],_0x2dda6d=this[_0x6aaa7f(0x5a5)],_0x169f8b=this['_opacityEasing'];if(Imported['VisuMZ_0_CoreEngine'])this[_0x6aaa7f(0x6a4)]=this[_0x6aaa7f(0x3bb)](this[_0x6aaa7f(0x6a4)],this[_0x6aaa7f(0x582)],_0x5bf312,_0x2dda6d,_0x169f8b);else{if(_0x6aaa7f(0xdda)===_0x6aaa7f(0xdda))this['opacity']=(this[_0x6aaa7f(0x6a4)]*(_0x5bf312-0x1)+this[_0x6aaa7f(0x582)])/_0x5bf312;else{if(_0x1bbec5['isPreviousSceneBattleTransitionable']())return;if(!_0x5a3c85)return;if(!_0x1c9d7c['canMove']())return;_0x157b9d[_0x6aaa7f(0x734)][_0x6aaa7f(0xb70)][_0x6aaa7f(0xa23)](this);}}this[_0x6aaa7f(0x81d)]--;if(this[_0x6aaa7f(0x81d)]<=0x0)this[_0x6aaa7f(0xae0)]();},Sprite_Battler['prototype']['onOpacityEnd']=function(){const _0x2da2bb=_0x57e85a;this[_0x2da2bb(0x6a4)]=this[_0x2da2bb(0x582)];},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xe28)]=function(){const _0x8eaae3=_0x57e85a;return this[_0x8eaae3(0x81d)]>0x0;},Sprite_Battler[_0x57e85a(0x16f)]['updateShadow']=function(){const _0x20f86c=_0x57e85a;this[_0x20f86c(0x7a9)][_0x20f86c(0x5b6)]=this[_0x20f86c(0xb08)][_0x20f86c(0x87a)](),this[_0x20f86c(0xc63)]();},Sprite_Battler[_0x57e85a(0x16f)]['updateShadowPosition']=function(){const _0x1375a7=_0x57e85a;if(!this[_0x1375a7(0x7a9)])return;this[_0x1375a7(0x7a9)]['y']=this['_baseY']-this['y']-0x2;},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x82f)]=function(){const _0x2d5116=_0x57e85a;if(!this['_battler'])return;this['_shadowScaleX']=this[_0x2d5116(0xb08)][_0x2d5116(0x9f0)](),this[_0x2d5116(0x52b)]=this[_0x2d5116(0xb08)][_0x2d5116(0x57a)]();},Game_BattlerBase[_0x57e85a(0x16f)][_0x57e85a(0x9f0)]=function(){const _0x26011f=_0x57e85a,_0x32f5e5=this['isActor']()?this[_0x26011f(0x2ee)]():this[_0x26011f(0x3f1)]();if(_0x32f5e5){const _0x51e4c1=_0x32f5e5['note'];if(_0x51e4c1[_0x26011f(0x392)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x51e4c1['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase['prototype'][_0x57e85a(0x57a)]=function(){const _0x217fee=_0x57e85a,_0x35c384=this[_0x217fee(0x7d1)]()?this[_0x217fee(0x2ee)]():this[_0x217fee(0x3f1)]();if(_0x35c384){const _0x1a494a=_0x35c384[_0x217fee(0x40f)];if(_0x1a494a[_0x217fee(0x392)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i)){if(_0x217fee(0xc33)!==_0x217fee(0xc33)){if(!_0xd8f545[_0x217fee(0x48c)]())return;if(this[_0x217fee(0x6bf)])return;this['_displayBattleCoreTransitionErrorMsg']=!![];let _0x318d18='';_0x318d18+=_0x217fee(0x4be),_0x318d18+=_0x217fee(0x995)[_0x217fee(0x554)](_0x58206e[_0x217fee(0x7a3)]),_0xdcb9a1(_0x318d18);}else return Number(RegExp['$1'])*0.01;}else{if(_0x1a494a[_0x217fee(0x392)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i)){if(_0x217fee(0x87b)!=='jhrCC')return Number(RegExp['$1'])||0x0;else _0x561c7d['BattleCore'][_0x217fee(0x222)][_0x217fee(0xa23)](this),this['y']=_0x4a06af['height']*0xa,this[_0x217fee(0xc58)]()&&this[_0x217fee(0x36b)]();}}}return 0x1;},Sprite_Battler[_0x57e85a(0x16f)]['updateScale']=function(){const _0xddc9a7=_0x57e85a;if(this[_0xddc9a7(0xd77)]===Sprite_SvEnemy)return;this[_0xddc9a7(0x6cd)](),this[_0xddc9a7(0x5d1)]();},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x5d1)]=function(){const _0x1365b9=_0x57e85a,_0x4a8446=this[_0x1365b9(0x937)];_0x4a8446&&(_0x4a8446[_0x1365b9(0xa63)]['x']=this['mainSpriteScaleX'](),_0x4a8446[_0x1365b9(0xa63)]['y']=this[_0x1365b9(0xa6d)]());},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xb5b)]=function(){let _0x48b506=0x1;return _0x48b506*=this['_flipScaleX'],_0x48b506*=this['_growX'],_0x48b506;},Sprite_Battler[_0x57e85a(0x16f)]['mainSpriteScaleY']=function(){return 0x1*this['_growY'];},Sprite_Battler['prototype']['mainSpriteWidth']=function(){const _0x4cafb3=_0x57e85a;return this['width']*this[_0x4cafb3(0xb5b)]();},Sprite_Battler['prototype'][_0x57e85a(0x62d)]=function(){const _0x4c57c0=_0x57e85a;return this[_0x4c57c0(0x54b)]*this[_0x4c57c0(0xa6d)]();},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x4b6)]=function(_0x55daf0,_0x2c5ab0,_0x53b3c2,_0x3c12e4){const _0x611206=_0x57e85a;if(!this[_0x611206(0x67c)]())return;if(!this[_0x611206(0x937)])return;if(this[_0x611206(0x4e7)]===_0x55daf0&&this[_0x611206(0x857)]===_0x2c5ab0)return;this[_0x611206(0x4e7)]=_0x55daf0,this['_targetGrowY']=_0x2c5ab0,this[_0x611206(0x68f)]=_0x53b3c2,this[_0x611206(0x346)]=_0x53b3c2,this['_growEasing']=_0x3c12e4||_0x611206(0x23a),_0x53b3c2<=0x0&&('ODHTd'===_0x611206(0x23e)?(this[_0x611206(0xc94)]=this[_0x611206(0x4e7)],this['_growY']=this['_targetGrowY']):(_0x128640(_0x611206(0xc45)[_0x611206(0x554)](_0xd7fc3d,_0x4f9818,_0x12dbd7)),_0x2bb213[_0x611206(0x4f1)]()));},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x6cd)]=function(){const _0x3e5bdd=_0x57e85a;if(this[_0x3e5bdd(0x68f)]<=0x0)return;if(!this[_0x3e5bdd(0x937)])return;const _0x2688b0=this[_0x3e5bdd(0x68f)],_0x6dfacf=this[_0x3e5bdd(0x346)],_0x5faa8=this[_0x3e5bdd(0x2ef)];if(Imported[_0x3e5bdd(0x376)])this['_growX']=this['applyEasing'](this[_0x3e5bdd(0xc94)],this[_0x3e5bdd(0x4e7)],_0x2688b0,_0x6dfacf,_0x5faa8),this[_0x3e5bdd(0x9cb)]=this[_0x3e5bdd(0x3bb)](this[_0x3e5bdd(0x9cb)],this[_0x3e5bdd(0x857)],_0x2688b0,_0x6dfacf,_0x5faa8);else{if(_0x3e5bdd(0x4d0)!==_0x3e5bdd(0x9ed))this[_0x3e5bdd(0xc94)]=(this['_growX']*(_0x2688b0-0x1)+this[_0x3e5bdd(0x4e7)])/_0x2688b0,this[_0x3e5bdd(0x9cb)]=(this['_growY']*(_0x2688b0-0x1)+this[_0x3e5bdd(0x857)])/_0x2688b0;else{if(this[_0x3e5bdd(0xd77)]!==_0x5c3732)return![];if(!_0x4bfbee[_0x3e5bdd(0x4b2)]())return![];return _0x37977c['BattleCore']['Settings'][_0x3e5bdd(0xcab)][_0x3e5bdd(0x718)];}}this[_0x3e5bdd(0x68f)]--;if(this['_growDuration']<=0x0)this[_0x3e5bdd(0x6d8)]();},Sprite_Battler[_0x57e85a(0x16f)]['onGrowEnd']=function(){const _0x5d2fde=_0x57e85a;this['_growX']=this[_0x5d2fde(0x4e7)],this['_growY']=this[_0x5d2fde(0x857)];},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xd97)]=function(){const _0xd16195=_0x57e85a;return this[_0xd16195(0x68f)]>0x0;},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x7f3)]=function(_0x2663c9,_0x2bd501,_0x5483d7,_0x34b305){const _0x2761d3=_0x57e85a;if(!this[_0x2761d3(0x67c)]())return;if(!this[_0x2761d3(0x937)])return;if(this[_0x2761d3(0xa49)]===_0x2663c9&&this[_0x2761d3(0x3e7)]===_0x2bd501)return;this[_0x2761d3(0xa49)]=_0x2663c9,this[_0x2761d3(0x3e7)]=_0x2bd501,this['_skewDuration']=_0x5483d7,this[_0x2761d3(0xcd6)]=_0x5483d7,this[_0x2761d3(0x6c5)]=_0x34b305||_0x2761d3(0x23a);if(_0x5483d7<=0x0){if(_0x2761d3(0x425)!==_0x2761d3(0x722))this[_0x2761d3(0x937)]['skew']['x']=this[_0x2761d3(0xa49)],this['_distortionSprite'][_0x2761d3(0x481)]['y']=this['_targetSkewY'];else{const _0x4d8c06=this[_0x2761d3(0x2df)](),_0x1bd44c=_0x4d8c06[_0x2761d3(0x356)][_0x2761d3(0x726)];_0x4d8c06[_0x2761d3(0x356)]['formula']=this['_customDamageFormula'];let _0x4ae258=_0x4f88bb[_0x2761d3(0x734)][_0x2761d3(0x483)][_0x2761d3(0xa23)](this,_0x47c668);return _0x4d8c06[_0x2761d3(0x356)][_0x2761d3(0x726)]=_0x1bd44c,_0x4ae258;}}},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xa7c)]=function(){const _0x5d270a=_0x57e85a;if(this[_0x5d270a(0x601)]<=0x0)return;if(!this[_0x5d270a(0x937)])return;const _0x391a7e=this[_0x5d270a(0x601)],_0x3ea46b=this[_0x5d270a(0xcd6)],_0x48865d=this[_0x5d270a(0x6c5)],_0x3b3056=this['_distortionSprite'];Imported['VisuMZ_0_CoreEngine']?(_0x3b3056[_0x5d270a(0x481)]['x']=this[_0x5d270a(0x3bb)](_0x3b3056[_0x5d270a(0x481)]['x'],this[_0x5d270a(0xa49)],_0x391a7e,_0x3ea46b,_0x48865d),_0x3b3056[_0x5d270a(0x481)]['y']=this[_0x5d270a(0x3bb)](_0x3b3056[_0x5d270a(0x481)]['y'],this[_0x5d270a(0x3e7)],_0x391a7e,_0x3ea46b,_0x48865d)):_0x5d270a(0x990)===_0x5d270a(0x990)?(_0x3b3056[_0x5d270a(0x481)]['x']=(_0x3b3056[_0x5d270a(0x481)]['x']*(_0x391a7e-0x1)+this['_targetSkewX'])/_0x391a7e,_0x3b3056[_0x5d270a(0x481)]['y']=(_0x3b3056[_0x5d270a(0x481)]['y']*(_0x391a7e-0x1)+this[_0x5d270a(0x3e7)])/_0x391a7e):(_0x5cae29['BattleCore'][_0x5d270a(0xd3e)][_0x5d270a(0xa23)](this),this[_0x5d270a(0x4a8)]());this[_0x5d270a(0x601)]--;if(this[_0x5d270a(0x601)]<=0x0)this[_0x5d270a(0x81e)]();},Sprite_Battler[_0x57e85a(0x16f)]['onSkewEnd']=function(){const _0x359e65=_0x57e85a;this['_distortionSprite'][_0x359e65(0x481)]['x']=this[_0x359e65(0xa49)],this['_distortionSprite'][_0x359e65(0x481)]['y']=this[_0x359e65(0x3e7)];},Sprite_Battler['prototype'][_0x57e85a(0xdbe)]=function(){const _0x3108e7=_0x57e85a;return this[_0x3108e7(0x601)]>0x0;},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xa88)]=function(_0x141a7,_0x2e33d8,_0x5b6e65,_0x26221a){const _0x52b47f=_0x57e85a;if(!this['canMove']())return;if(!this['_distortionSprite'])return;if(this[_0x52b47f(0xbc8)]===_0x141a7)return;this[_0x52b47f(0xbc8)]=_0x141a7,this[_0x52b47f(0xc65)]=_0x2e33d8,this['_angleWholeDuration']=_0x2e33d8,this[_0x52b47f(0x564)]=_0x5b6e65||_0x52b47f(0x23a),this['_angleRevertOnFinish']=_0x26221a;this[_0x52b47f(0x19f)]===undefined&&(_0x52b47f(0x91f)!==_0x52b47f(0x51d)?this['_angleRevertOnFinish']=!![]:(this[_0x52b47f(0x965)]()&&(this[_0x52b47f(0x4a5)]=!![]),_0xa0d83f[_0x52b47f(0x734)]['Game_Battler_performEvasion'][_0x52b47f(0xa23)](this),this['performFlinch']()));if(_0x2e33d8<=0x0){if(_0x52b47f(0xd5a)==='LIgMj'){this[_0x52b47f(0x83d)]=_0x141a7;if(this[_0x52b47f(0x19f)]){if('HSoRY'!==_0x52b47f(0xb90))this[_0x52b47f(0xbc8)]=0x0,this[_0x52b47f(0x83d)]=0x0;else return![];}}else{const _0x2aaee6=_0x3d31a1['BattleCore'][_0x52b47f(0x478)]['BattleLog'];_0x2aaee6[_0x52b47f(0xcd2)]&&this[_0x52b47f(0x5fa)](_0x52b47f(0x3fd),_0x52b47f(0x440)[_0x52b47f(0x554)](_0x4ce413[_0x52b47f(0x6ff)](_0x1d2cbb)));if(_0x4f2310['isSkill'](_0x2978a5)){if(_0x2aaee6['ActionSkillMsg1'])this[_0x52b47f(0x57c)](_0x13cfa6[_0x52b47f(0x9ae)],_0x274acd,_0x275d30);if(_0x2aaee6[_0x52b47f(0x653)])this[_0x52b47f(0x57c)](_0x13bd31[_0x52b47f(0x7ac)],_0x1f9ac3,_0x68b098);}else{if(_0x2aaee6[_0x52b47f(0x1c4)])this[_0x52b47f(0x57c)](_0x3df3b9[_0x52b47f(0x506)],_0x10caef,_0xf545a8);}}}},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x956)]=function(){const _0x15b111=_0x57e85a;this[_0x15b111(0xceb)](),this[_0x15b111(0x9f1)]();},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xceb)]=function(){const _0x5199ed=_0x57e85a;if(this['_angleDuration']<=0x0)return;const _0x2732e1=this[_0x5199ed(0xc65)],_0xa8893f=this['_angleWholeDuration'],_0x4cf3fb=this[_0x5199ed(0x564)];Imported[_0x5199ed(0x376)]?_0x5199ed(0xaf5)!==_0x5199ed(0xaf5)?this[_0x5199ed(0x8e3)]['splice'](_0x9860b6,0x0,_0x1213d5):this[_0x5199ed(0x83d)]=this[_0x5199ed(0x3bb)](this[_0x5199ed(0x83d)],this[_0x5199ed(0xbc8)],_0x2732e1,_0xa8893f,_0x4cf3fb):this[_0x5199ed(0x83d)]=(this[_0x5199ed(0x83d)]*(_0x2732e1-0x1)+this[_0x5199ed(0xbc8)])/_0x2732e1;this[_0x5199ed(0xc65)]--;if(this[_0x5199ed(0xc65)]<=0x0)this[_0x5199ed(0xb6b)]();},Sprite_Battler['prototype'][_0x57e85a(0xb6b)]=function(){const _0x3eb39c=_0x57e85a;this[_0x3eb39c(0x83d)]=this[_0x3eb39c(0xbc8)],this[_0x3eb39c(0x19f)]&&(this[_0x3eb39c(0xbc8)]=0x0,this[_0x3eb39c(0x83d)]=0x0);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x7c8)]=function(){const _0x25a90b=_0x57e85a;return this[_0x25a90b(0xc65)]>0x0;},Sprite_Battler['prototype']['applyAngleChange']=function(){const _0x3df6d9=_0x57e85a;if(!this[_0x3df6d9(0x937)])return;const _0x4c2475=this[_0x3df6d9(0x83d)],_0x2ddb7a=this[_0x3df6d9(0xa63)]['x'],_0xe10002=this[_0x3df6d9(0xb08)][_0x3df6d9(0x7d1)]()?-0x1:0x1;this[_0x3df6d9(0x937)][_0x3df6d9(0x7f6)]=_0x4c2475*_0x2ddb7a*_0xe10002;const _0x37ba5d=this[_0x3df6d9(0x937)]['scale']['y'];this[_0x3df6d9(0x937)]['y']=this[_0x3df6d9(0x54b)]*-0.5*(0x2-_0x37ba5d),this[_0x3df6d9(0x937)]['y']=Math['ceil'](this[_0x3df6d9(0x937)]['y']);const _0x5916c9=[this[_0x3df6d9(0x5c7)],this['_svBattlerSprite'],this[_0x3df6d9(0xbe6)]];for(const _0x282d6c of _0x5916c9){if('iBoao'!==_0x3df6d9(0x365)){const _0x2c8235=_0x168a13(_0x54c8ac['$1']),_0x275ae2=_0x4736cc['BattleCore'][_0x3df6d9(0x8b5)](_0x39736c,_0x3df6d9(0x5af));_0x17b0d8[_0x3df6d9(0x734)][_0x3df6d9(0x7e6)](_0x2c8235,_0x275ae2);}else{if(!_0x282d6c)continue;_0x282d6c['y']=this['height']*0.5;}}this[_0x3df6d9(0x7a9)]&&(this[_0x3df6d9(0xbb3)]=this[_0x3df6d9(0xbb3)]??0x1,this['_shadowScaleY']=this[_0x3df6d9(0x52b)]??0x1,this['_shadowSprite'][_0x3df6d9(0xa63)]['x']=this[_0x3df6d9(0x937)][_0x3df6d9(0xa63)]['x']*this[_0x3df6d9(0xbb3)],this['_shadowSprite'][_0x3df6d9(0xa63)]['y']=this['_distortionSprite'][_0x3df6d9(0xa63)]['y']*this[_0x3df6d9(0x52b)]);},VisuMZ[_0x57e85a(0x734)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0xd81)],Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0xd81)]=function(){const _0x5e4e7e=_0x57e85a;VisuMZ[_0x5e4e7e(0x734)][_0x5e4e7e(0x92b)]['call'](this),VisuMZ[_0x5e4e7e(0x734)]['Settings']['HpGauge'][_0x5e4e7e(0x672)]&&this[_0x5e4e7e(0xa12)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xa04)]=Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x469)],Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x469)]=function(){const _0x27d7df=_0x57e85a;if(VisuMZ['BattleCore'][_0x27d7df(0x478)][_0x27d7df(0x6bd)]['ShowEnemyGauge']){if(_0x27d7df(0xcd1)!==_0x27d7df(0xcd1))return _0x489569['setLastPluginCommandInterpreter'](this),_0x252f54[_0x27d7df(0x734)]['Game_Interpreter_PluginCommand'][_0x27d7df(0xa23)](this,_0x216676);else this[_0x27d7df(0xa12)]();}VisuMZ['BattleCore'][_0x27d7df(0xa04)][_0x27d7df(0xa23)](this);},Sprite_Battler['prototype']['createHpGaugeSprite']=function(){const _0x498bd6=_0x57e85a;if(!ConfigManager[_0x498bd6(0x191)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x5ef044=VisuMZ[_0x498bd6(0x734)][_0x498bd6(0x478)]['HpGauge'],_0xe6da22=new Sprite_HpGauge();_0xe6da22[_0x498bd6(0x70e)]['x']=_0x5ef044[_0x498bd6(0xd84)],_0xe6da22[_0x498bd6(0x70e)]['y']=_0x5ef044[_0x498bd6(0xab8)],_0xe6da22['scale']['x']=_0xe6da22[_0x498bd6(0xa63)]['y']=_0x5ef044[_0x498bd6(0x9f9)],this['_hpGaugeSprite']=_0xe6da22,this[_0x498bd6(0x67f)](this['_hpGaugeSprite']);if(Spriteset_Battle[_0x498bd6(0x6bc)]){if(_0x498bd6(0x930)===_0x498bd6(0x79d)){if(!_0x2436d9[_0x498bd6(0x4b2)]())return;if(!_0xcd701d[_0x498bd6(0x825)])return;_0x1824b3[_0x498bd6(0xd7f)]=!![];}else BattleManager[_0x498bd6(0xaec)](this[_0x498bd6(0x822)]);}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x970)]=Sprite_Battler['prototype'][_0x57e85a(0xb01)],Sprite_Battler[_0x57e85a(0x16f)]['setBattler']=function(_0x2f4532){const _0x58e59c=_0x57e85a,_0x12b3ac=this[_0x58e59c(0xb08)];VisuMZ['BattleCore']['Sprite_Battler_setBattler'][_0x58e59c(0xa23)](this,_0x2f4532),this[_0x58e59c(0xdc4)](_0x2f4532);if(_0x12b3ac!==_0x2f4532)this[_0x58e59c(0x82f)]();},Sprite_Battler['prototype'][_0x57e85a(0xdc4)]=function(_0x46c525){const _0x24c377=_0x57e85a;if(!_0x46c525)return;if(!this[_0x24c377(0x822)])return;if(_0x46c525[_0x24c377(0x7d1)]()){}else{if(_0x46c525['isEnemy']()){if(this[_0x24c377(0xd77)]===Sprite_SvEnemy&&!_0x46c525[_0x24c377(0x87a)]())return;}}this['_hpGaugeSprite']['setup'](_0x46c525,'hp');},Sprite_Battler[_0x57e85a(0x16f)]['hasStaticSvBattler']=function(){const _0x2b7917=_0x57e85a;return this[_0x2b7917(0xb08)]&&this['_battler'][_0x2b7917(0x516)]();},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x2fb)]=function(){const _0x522c3d=_0x57e85a,_0x208f0e=this[_0x522c3d(0x5c7)]['bitmap'];if(!_0x208f0e)return;const _0x93ac5c=_0x208f0e[_0x522c3d(0x8b9)];let _0x2e572a=_0x208f0e[_0x522c3d(0x54b)];if(this[_0x522c3d(0xb08)][_0x522c3d(0xd6d)]()){if(this[_0x522c3d(0x26d)])_0x2e572a=Math[_0x522c3d(0xde7)](0x0,this[_0x522c3d(0x26d)]['height']-0x4);}this[_0x522c3d(0x5c7)][_0x522c3d(0xe1d)](0x0,0x0,_0x93ac5c,_0x2e572a),this[_0x522c3d(0xe1d)](0x0,0x0,_0x93ac5c,_0x2e572a);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xdcd)]=function(){const _0x2cb70e=_0x57e85a;if(!this[_0x2cb70e(0xb08)])return;if(!this[_0x2cb70e(0x822)])return;const _0x549da5=VisuMZ[_0x2cb70e(0x734)][_0x2cb70e(0x478)][_0x2cb70e(0x6bd)],_0x140677=this[_0x2cb70e(0x822)];_0x140677[_0x2cb70e(0x5b6)]=this['isVisualHpGaugeDisplayed']();const _0x5522b8=_0x549da5['OffsetX'],_0x5f27fc=_0x549da5[_0x2cb70e(0xa95)];_0x140677['x']=_0x5522b8,_0x140677['x']+=this[_0x2cb70e(0xb08)][_0x2cb70e(0x510)](),_0x140677['y']=-this[_0x2cb70e(0x54b)]+_0x5f27fc,_0x140677['y']+=this['_battler']['battleUIOffsetY'](),Spriteset_Battle[_0x2cb70e(0x6bc)]&&SceneManager['_scene'][_0x2cb70e(0x78d)]&&(_0x140677['x']+=this['x'],_0x140677['y']+=this['y']);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x697)]=function(){const _0x59f51b=_0x57e85a;if(!this[_0x59f51b(0xb08)])return![];if(this[_0x59f51b(0xb08)]['isActor']())return!![];if(this[_0x59f51b(0xb08)]['isHidden']())return![];if(this[_0x59f51b(0x6a4)]<=0x0)return![];const _0x11943a=this[_0x59f51b(0xb08)][_0x59f51b(0x3f1)]()[_0x59f51b(0x40f)];if(_0x11943a['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x11943a[_0x59f51b(0x392)](/<HIDE HP GAUGE>/i))return![];const _0x247197=VisuMZ['BattleCore']['Settings']['HpGauge'];if(_0x247197[_0x59f51b(0x270)]){if(_0x247197[_0x59f51b(0x5ab)]&&BattleManager[_0x59f51b(0x6b6)]())return!![];if(this['_battler'][_0x59f51b(0xaed)])return![];return this['_battler'][_0x59f51b(0x5ea)]();}return!![];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x208)]=Sprite_Battler['prototype'][_0x57e85a(0xb51)],Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xb51)]=function(){const _0x449f73=_0x57e85a;if(!this[_0x449f73(0xb08)])return![];if(this[_0x449f73(0x785)]>0x0)return!![];return VisuMZ[_0x449f73(0x734)][_0x449f73(0x208)][_0x449f73(0xa23)](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x580)]=Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xd1b)],Sprite_Battler[_0x57e85a(0x16f)]['startMove']=function(_0x547c94,_0x5bd106,_0x5336b3){const _0xff6124=_0x57e85a;this[_0xff6124(0x67c)]()&&VisuMZ[_0xff6124(0x734)]['Sprite_Battler_startMove'][_0xff6124(0xa23)](this,_0x547c94,_0x5bd106,_0x5336b3);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x67c)]=function(){const _0x1bb50a=_0x57e85a;if(this[_0x1bb50a(0xb08)]&&this[_0x1bb50a(0xb08)][_0x1bb50a(0xd6d)]())return![];if(this[_0x1bb50a(0xb08)]&&!this[_0x1bb50a(0xb08)][_0x1bb50a(0x652)]())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x47f)]=function(){},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xb3e)]=function(){const _0x31081b=_0x57e85a;this[_0x31081b(0xd1b)](0x0,0x0,0xc);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x780)]=function(){},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0x899)]=function(){const _0x290196=_0x57e85a,_0x48d0b1=VisuMZ[_0x290196(0x734)][_0x290196(0x478)]['Actor'],_0x35dbe6=this['_battler']&&this[_0x290196(0xb08)]['isActor']()?0x1:-0x1,_0xa8499e=this[_0x290196(0x4aa)]-this['_homeX']+_0x35dbe6*_0x48d0b1[_0x290196(0x2e3)],_0x58dd4=this[_0x290196(0x20d)]-this[_0x290196(0x8b6)]+_0x35dbe6*_0x48d0b1[_0x290196(0x9e8)],_0x27d0fa=_0x48d0b1[_0x290196(0x332)];this[_0x290196(0xd1b)](_0xa8499e,_0x58dd4,_0x27d0fa);},Sprite_Battler['prototype'][_0x57e85a(0x445)]=function(_0x1ef7ff,_0x4f31bb){const _0x483a13=_0x57e85a,_0x1c76b8=VisuMZ[_0x483a13(0x734)][_0x483a13(0x478)]['Actor'];this[_0x483a13(0x5cd)]=Math[_0x483a13(0x8a8)]((_0x1c76b8[_0x483a13(0xc4e)]??0x18)*_0x4f31bb),this[_0x483a13(0xa0e)]=Math[_0x483a13(0xde7)](this[_0x483a13(0xa0e)],_0x1ef7ff);},Sprite_Battler[_0x57e85a(0x16f)][_0x57e85a(0xb21)]=function(){const _0x2e63da=_0x57e85a,_0x120811=VisuMZ[_0x2e63da(0x734)]['Settings']['Actor'];if(!(_0x120811[_0x2e63da(0x8c0)]??![]))return;if(this['_shakeFlinchDuration']>0x0){if('tDXbU'!==_0x2e63da(0xb8c)){const _0x25db7d=_0x46d830[_0x2e63da(0x9b6)](_0x43ee33[_0x2e63da(0x307)]()[_0x2e63da(0xdf5)]());_0x25db7d>=0x0&&_0x25db7d<=0x7&&_0x22fb0f[_0x2e63da(0xac2)](_0x25db7d)&&_0x59a94b[_0x2e63da(0xa92)](_0x25db7d);}else{const _0x2983dc=this['_shakeFlinchDuration'];this['_shakeFlinchPower']=this[_0x2e63da(0xa0e)]*(_0x2983dc-0x1)/_0x2983dc,this['_shakeFlinchDuration']--,this[_0x2e63da(0x5cd)]<=0x0&&(this[_0x2e63da(0xa0e)]=0x0);}}if(this[_0x2e63da(0xa0e)]>0x0)this[_0x2e63da(0x5c7)]['x']=Math[_0x2e63da(0xdd9)](this['_shakeFlinchPower'])*(Math['random']()<0.5?-0x1:0x1),this['_baseY']!==this['y']&&(this[_0x2e63da(0x5c7)]['y']=this['height']*0.5,this[_0x2e63da(0x5c7)]['y']+=Math[_0x2e63da(0xdd9)](this[_0x2e63da(0xa0e)])*(Math[_0x2e63da(0x47c)]()<0.5?-0x1:0x1));else{if(_0x2e63da(0xa65)!=='JgSsK')this[_0x2e63da(0x5c7)]['x']=0x0,this[_0x2e63da(0x5c7)]['y']=this[_0x2e63da(0x54b)]*0.5;else{if(this['allowCollapse']())_0x535f98[_0x2e63da(0x734)][_0x2e63da(0xa14)][_0x2e63da(0xa23)](this);}}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x47a)]=Sprite_Actor[_0x57e85a(0x16f)]['initMembers'],Sprite_Actor[_0x57e85a(0x16f)]['initMembers']=function(){const _0x51d916=_0x57e85a;VisuMZ[_0x51d916(0x734)][_0x51d916(0x47a)][_0x51d916(0xa23)](this),this[_0x51d916(0x886)]();},Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0x473)]=function(){const _0x41f0fa=_0x57e85a;return this[_0x41f0fa(0x937)]||this[_0x41f0fa(0x5c7)]||this;},VisuMZ['BattleCore'][_0x57e85a(0xb70)]=Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0xc39)],Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0xc39)]=function(){},Sprite_Actor['prototype'][_0x57e85a(0x179)]=function(_0x5e5077){const _0x45944e=_0x57e85a;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x5e5077)return;if(!_0x5e5077[_0x45944e(0x67c)]())return;VisuMZ[_0x45944e(0x734)][_0x45944e(0xb70)][_0x45944e(0xa23)](this);},VisuMZ[_0x57e85a(0x734)]['Sprite_Actor_setActorHome']=Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0x2ea)],Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0x2ea)]=function(_0x535785){const _0x59476b=_0x57e85a;VisuMZ['BattleCore'][_0x59476b(0x478)][_0x59476b(0x876)][_0x59476b(0x902)]?_0x59476b(0x438)===_0x59476b(0x438)?VisuMZ[_0x59476b(0x734)][_0x59476b(0x478)]['Actor'][_0x59476b(0x902)][_0x59476b(0xa23)](this,_0x535785):(_0x341b8e['BattleCore'][_0x59476b(0x757)]['call'](this),this[_0x59476b(0xd26)]()&&this[_0x59476b(0xcdb)]()&&!this[_0x59476b(0x60a)]&&_0x4eff2f[_0x59476b(0xaf9)]()&&this[_0x59476b(0x41a)]()):VisuMZ[_0x59476b(0x734)][_0x59476b(0xd8c)][_0x59476b(0xa23)](this,_0x535785);},VisuMZ['BattleCore'][_0x57e85a(0x29b)]=Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0xb01)],Sprite_Actor['prototype'][_0x57e85a(0xb01)]=function(_0x536eb1){const _0x2a26f6=_0x57e85a;VisuMZ['BattleCore'][_0x2a26f6(0x29b)][_0x2a26f6(0xa23)](this,_0x536eb1),this[_0x2a26f6(0xbb7)](_0x536eb1);},Sprite_Actor['prototype'][_0x57e85a(0xbb7)]=function(_0x446a76){const _0x4280b3=_0x57e85a;if(!_0x446a76)return;if(!this[_0x4280b3(0x5c7)])return;this[_0x4280b3(0x5c7)][_0x4280b3(0x70e)]['x']=this[_0x4280b3(0x6c6)]['svBattlerAnchorX'](),this[_0x4280b3(0x5c7)][_0x4280b3(0x70e)]['y']=this['_actor'][_0x4280b3(0xbcd)](),this[_0x4280b3(0x9c1)]();},VisuMZ['BattleCore'][_0x57e85a(0x717)]=Sprite_Actor['prototype'][_0x57e85a(0xa02)],Sprite_Actor['prototype']['update']=function(){const _0x45c030=_0x57e85a;VisuMZ[_0x45c030(0x734)][_0x45c030(0x717)][_0x45c030(0xa23)](this);if(this[_0x45c030(0x6c6)]){if(_0x45c030(0x6cf)===_0x45c030(0x6cf))this['updateStateSprite'](),this[_0x45c030(0x279)]();else{if(_0x52f88e===_0x5eb204[_0x45c030(0x2ee)]())return![];}}},VisuMZ['BattleCore'][_0x57e85a(0x76f)]=Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0x729)],Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0x729)]=function(){const _0x18933d=_0x57e85a;VisuMZ[_0x18933d(0x734)][_0x18933d(0x76f)]['call'](this);if(this[_0x18933d(0x5c7)]&&this[_0x18933d(0x5c7)][_0x18933d(0x632)]&&this[_0x18933d(0xb08)]){if('WigUp'!==_0x18933d(0x259))this[_0x18933d(0x5c7)][_0x18933d(0x632)][_0x18933d(0xdc5)]!==this[_0x18933d(0xb08)]['battlerSmoothImage']()&&(this[_0x18933d(0x5c7)][_0x18933d(0x632)][_0x18933d(0xdc5)]=this[_0x18933d(0xb08)][_0x18933d(0x217)]());else{const _0x343b6e=this[_0x18933d(0xbca)](_0x38d193),_0x11ff83=this['textSizeEx'](_0x5230d8)['width'];return _0x11ff83<=_0x343b6e[_0x18933d(0x8b9)]?_0x18933d(0x95c):'icon';}}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xc75)]=Sprite_Actor['prototype']['updateShadow'],Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0xa01)]=function(){const _0x3c6c6=_0x57e85a;VisuMZ['BattleCore'][_0x3c6c6(0xc75)][_0x3c6c6(0xa23)](this),this[_0x3c6c6(0xd44)]();},Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0xd44)]=function(){const _0x193bc9=_0x57e85a;if(!this['_mainSprite'])return;if(!this[_0x193bc9(0x7a9)])return;this[_0x193bc9(0x9c1)](),this[_0x193bc9(0xc63)]();},Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0x907)]=function(){const _0xa81dde=_0x57e85a;this[_0xa81dde(0xc22)][_0xa81dde(0xa63)]['x']=0x1/(this[_0xa81dde(0xa63)]['x']||0.001),this['_stateSprite']['scale']['y']=0x1/(this[_0xa81dde(0xa63)]['y']||0.001);},Sprite_Actor['prototype'][_0x57e85a(0x279)]=function(){const _0x479246=_0x57e85a;if(!$gameSystem[_0x479246(0xe14)]()&&this['constructor']===Sprite_Actor){const _0x40d674=Scene_Battle[_0x479246(0x16f)][_0x479246(0x93c)]();['default',_0x479246(0x7df),_0x479246(0x801),_0x479246(0x515)][_0x479246(0x3af)](_0x40d674)&&(this[_0x479246(0x6a4)]=0x0);}},Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0x88c)]=function(){const _0x278a91=_0x57e85a,_0x26b0bf=this['_actor'];if(_0x26b0bf){if(_0x26b0bf[_0x278a91(0x4a5)])return;const _0x134b93=_0x26b0bf[_0x278a91(0x2eb)]();if(_0x26b0bf['isInputting']()||_0x26b0bf['isActing']())_0x278a91(0xcb1)===_0x278a91(0xcb1)?this[_0x278a91(0x1b7)]('walk'):_0x131ac1[_0x278a91(0x734)]['Scene_Map_launchBattle'][_0x278a91(0xa23)](this);else{if(_0x134b93===0x3)this[_0x278a91(0x1b7)]('dead');else{if(_0x134b93===0x2)this[_0x278a91(0x1b7)]('sleep');else{if(this[_0x278a91(0x7cf)]){if(_0x278a91(0x714)===_0x278a91(0x7b4)){const _0x20c410=this[_0x278a91(0xcb9)]||'',_0x21f3a2=_0x1596e1['getBattlerFromKey'](_0x20c410);if(!_0x21f3a2)return this[_0x278a91(0x225)]();if(!_0x21f3a2[_0x278a91(0x2e0)]())return this[_0x278a91(0x225)]();return _0x21f3a2;}else this[_0x278a91(0x1b7)](_0x278a91(0x6b7));}else{if(_0x26b0bf[_0x278a91(0xdb8)]())this[_0x278a91(0x1b7)](_0x278a91(0x674));else{if(_0x26b0bf[_0x278a91(0x764)]()){if(_0x278a91(0x9df)!==_0x278a91(0xaff))this[_0x278a91(0x1b7)](_0x278a91(0x4cc));else{if(!_0x564d77[_0x278a91(0x4b2)]())return;if(!_0x39b167[_0x278a91(0xd86)])return;const _0x1ebee7=_0x2fd9c2[_0x278a91(0xd04)][_0x278a91(0x78d)];if(!_0x1ebee7)return;_0x5975e8[_0x278a91(0x15e)](_0xbc6a97,_0x1ad241);const _0x557648=_0x4eb416[_0x278a91(0x3a4)]||0x1,_0x279026=_0x277f51[_0x278a91(0x692)]||0x1,_0x4f11bf=_0x20dc9e[_0x278a91(0xa42)]||'Linear';_0x1ebee7[_0x278a91(0x72e)](_0x557648,_0x279026,_0x4f11bf);}}else{if(_0x26b0bf[_0x278a91(0x60e)]()||_0x26b0bf[_0x278a91(0x4d7)]())this[_0x278a91(0x1b7)](_0x278a91(0xd9a));else{if(_0x134b93===0x1)this[_0x278a91(0x1b7)](_0x278a91(0xe20));else{if(_0x26b0bf[_0x278a91(0x6d9)]())this[_0x278a91(0x1b7)](_0x278a91(0xb7e));else{if(_0x26b0bf[_0x278a91(0xc73)]())this[_0x278a91(0x1b7)](_0x278a91(0xb49));else{if(_0x26b0bf[_0x278a91(0x8ab)]()){if(_0x278a91(0x290)!==_0x278a91(0x290)){const _0x554834=_0x2ca87d(_0x15fce9['$1']);return _0x3ad14f['aliveMembers']()[_0x278a91(0x1db)](_0x55068f=>_0x55068f[_0x278a91(0xacb)]()===_0x554834);}else this['startMotion'](_0x278a91(0x674));}else _0x278a91(0x644)===_0x278a91(0x7b7)?this[_0x278a91(0xba4)]=!![]:this[_0x278a91(0x1b7)](_0x278a91(0xb49));}}}}}}}}}}}},Sprite_Actor[_0x57e85a(0x16f)]['retreat']=function(){const _0x201f9d=_0x57e85a,_0x58ff6a=0xa,_0x1a7f73=0x12c*_0x58ff6a,_0x15793c=0x1e*_0x58ff6a;this[_0x201f9d(0xd1b)](_0x1a7f73,0x0,_0x15793c);},Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0xc6c)]=function(){const _0x2de916=_0x57e85a;Sprite_Battler['prototype'][_0x2de916(0xc6c)][_0x2de916(0xa23)](this);},Sprite_Actor['prototype'][_0x57e85a(0x504)]=function(){const _0x45e521=_0x57e85a;return Sprite_Battler[_0x45e521(0xda2)];},Sprite_Weapon['prototype'][_0x57e85a(0xa8b)]=function(){const _0x21a6ae=_0x57e85a;return Sprite_Battler[_0x21a6ae(0xda2)];},Sprite_Actor[_0x57e85a(0x16f)]['setupMotion']=function(){},Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0xd5d)]=function(){},Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0xac4)]=function(){const _0x525a44=_0x57e85a;if(this[_0x525a44(0x33c)]&&++this[_0x525a44(0x7dc)]>=this['motionSpeed']()){if(this['_motion']['loop'])_0x525a44(0xd4c)===_0x525a44(0xd4c)?this[_0x525a44(0x8a7)]=(this[_0x525a44(0x8a7)]+0x1)%0x4:_0x22c549[_0x525a44(0x628)]();else{if(this['_pattern']<0x2)'KZZwb'!==_0x525a44(0x847)?this[_0x525a44(0x8a7)]++:(this[_0x525a44(0x5c7)][_0x525a44(0x632)]=_0x443794,this['bitmap']=new _0x1e0d8b(_0xf402ca['width'],_0x2607ad[_0x525a44(0x54b)]));else{if(_0x525a44(0xbfa)===_0x525a44(0xbb2))_0x21af4c[_0x525a44(0x1f9)](_0x525a44(0x479));else{const _0x58e9bd=this['_actor'];if(_0x58e9bd)_0x58e9bd[_0x525a44(0x4a5)]=undefined;this[_0x525a44(0x88c)]();}}}this[_0x525a44(0x7dc)]=0x0;}},Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0x97b)]=function(_0x2bd270){const _0x1a6912=_0x57e85a;if(this[_0x1a6912(0xb08)]&&this[_0x1a6912(0xb08)]['isDead']()){this[_0x1a6912(0x33c)]=Sprite_Actor[_0x1a6912(0x9b0)][_0x1a6912(0x605)];return;}const _0x357975=Sprite_Actor[_0x1a6912(0x9b0)][_0x2bd270];this[_0x1a6912(0x33c)]=_0x357975,this['_motionCount']=0x0,this[_0x1a6912(0x8a7)]=0x0;},Sprite_Actor[_0x57e85a(0x16f)]['forceWeaponAnimation']=function(_0x41c664){const _0x287372=_0x57e85a;if(this[_0x287372(0x516)]())return;this[_0x287372(0x9b1)](),this[_0x287372(0xc4d)][_0x287372(0xb62)](_0x41c664),this[_0x287372(0x6c6)][_0x287372(0x604)]();},Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0x9b1)]=function(){const _0x3d3f07=_0x57e85a;let _0x37353d=-0x10,_0xbf89d4=this['height']*0.5;const _0x51a706=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x54763d=this[_0x3d3f07(0xb08)][_0x3d3f07(0x7c9)]()[_0x3d3f07(0x260)](_0x153770=>_0x153770&&_0x153770['note'][_0x3d3f07(0x392)](_0x51a706)?Number(RegExp['$1']):0x0),_0x39e216=this[_0x3d3f07(0xb08)][_0x3d3f07(0x7c9)]()[_0x3d3f07(0x260)](_0x11a79d=>_0x11a79d&&_0x11a79d[_0x3d3f07(0x40f)]['match'](_0x51a706)?Number(RegExp['$2']):0x0);_0x37353d=_0x54763d['reduce']((_0x5c7247,_0x166be7)=>_0x5c7247+_0x166be7,_0x37353d),_0xbf89d4=_0x39e216['reduce']((_0x51beab,_0x37484e)=>_0x51beab+_0x37484e,_0xbf89d4),this[_0x3d3f07(0xc4d)]['x']=_0x37353d,this['_weaponSprite']['y']=_0xbf89d4,this[_0x3d3f07(0xc4d)]['update']();},Sprite_Weapon[_0x57e85a(0x16f)][_0x57e85a(0xb62)]=function(_0x56504e){const _0x2ae7eb=_0x57e85a;this[_0x2ae7eb(0x468)]=_0x56504e,this['_animationCount']=-0x1,this[_0x2ae7eb(0x8a7)]=0x0,this['loadBitmap'](),this['updateFrame']();},Sprite_Actor['prototype'][_0x57e85a(0x5c4)]=function(){},Sprite_Actor['prototype'][_0x57e85a(0x47f)]=function(){const _0x40fbdb=_0x57e85a,_0x1c6ebf=VisuMZ['BattleCore']['Settings'][_0x40fbdb(0x7b8)],_0x1b868a=_0x1c6ebf[_0x40fbdb(0x72b)],_0x447d34=_0x1c6ebf[_0x40fbdb(0x730)],_0x4f1ce4=_0x1c6ebf[_0x40fbdb(0x5a9)];this[_0x40fbdb(0xd1b)](-_0x1b868a,-_0x447d34,_0x4f1ce4);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x4c0)]=Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0x265)],Sprite_Actor[_0x57e85a(0x16f)][_0x57e85a(0x265)]=function(){const _0x4eb679=_0x57e85a;this[_0x4eb679(0x516)]()?this[_0x4eb679(0x2fb)]():(this[_0x4eb679(0xa85)](),VisuMZ[_0x4eb679(0x734)][_0x4eb679(0x4c0)][_0x4eb679(0xa23)](this));},Sprite_Actor['prototype'][_0x57e85a(0xa85)]=function(){const _0x389a7b=_0x57e85a;if(this[_0x389a7b(0xb08)]&&this['_battler'][_0x389a7b(0x7db)]){if(_0x389a7b(0x9c3)===_0x389a7b(0x9c3)){const _0x3ec7a5=this['_battler'][_0x389a7b(0x7db)];this[_0x389a7b(0x33c)]=Sprite_Actor[_0x389a7b(0x9b0)][_0x3ec7a5['motionType']],this['_pattern']=_0x3ec7a5[_0x389a7b(0x8e6)];const _0x306221=this[_0x389a7b(0xc4d)];_0x306221[_0x389a7b(0x838)](_0x3ec7a5[_0x389a7b(0x98a)],_0x3ec7a5[_0x389a7b(0x8e6)]),this[_0x389a7b(0x9b1)]();}else _0xbf8e95=_0xf0e3ac>=_0x3ccddd?_0x2c2c87:_0xf06b06;}},Sprite_Weapon['prototype'][_0x57e85a(0x838)]=function(_0x1101aa,_0x3e4317){const _0x342a03=_0x57e85a;this[_0x342a03(0x468)]=_0x1101aa,this['_animationCount']=-Infinity,this[_0x342a03(0x8a7)]=_0x3e4317,this[_0x342a03(0xdd1)](),this['updateFrame']();},Sprite_Enemy['prototype'][_0x57e85a(0x8dc)]=function(){const _0x2df544=_0x57e85a;Sprite_Battler[_0x2df544(0x16f)][_0x2df544(0x8dc)][_0x2df544(0xa23)](this),this['_enemy']=null,this[_0x2df544(0x395)]=![],this[_0x2df544(0x239)]='',this[_0x2df544(0x201)]=0x0,this[_0x2df544(0xc1e)]=null,this[_0x2df544(0x746)]=0x0,this[_0x2df544(0xd8d)]=0x0,this[_0x2df544(0x36a)](),this[_0x2df544(0x469)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xd6a)]=Sprite_Enemy['prototype'][_0x57e85a(0xa02)],Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xa02)]=function(){const _0x296593=_0x57e85a;VisuMZ[_0x296593(0x734)]['Sprite_Enemy_update'][_0x296593(0xa23)](this),this['updateShadowVisibility']();},Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x36a)]=function(){const _0x18655c=_0x57e85a;this[_0x18655c(0x5c7)]=new Sprite(),this[_0x18655c(0x5c7)]['anchor']['x']=0.5,this[_0x18655c(0x5c7)][_0x18655c(0x70e)]['y']=0x1,this[_0x18655c(0x67f)](this[_0x18655c(0x5c7)]),this['attachSpritesToDistortionSprite']();},Sprite_Enemy[_0x57e85a(0x16f)]['mainSprite']=function(){const _0x5a8e1e=_0x57e85a;return this['_distortionSprite']||this[_0x5a8e1e(0x5c7)]||this;},Sprite_Enemy['prototype'][_0x57e85a(0xdd1)]=function(_0x2e3c95){const _0x200e58=_0x57e85a;this[_0x200e58(0x632)]=new Bitmap(0x1,0x1);if(this[_0x200e58(0x87a)]()){const _0x235978=this[_0x200e58(0xb9b)]['svBattlerData']();this[_0x200e58(0x632)]=new Bitmap(_0x235978['width'],_0x235978[_0x200e58(0x54b)]),this[_0x200e58(0x5c7)][_0x200e58(0x632)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x200e58(0xe14)]()){if('Hcziq'!==_0x200e58(0xb43)){const _0x4487d2=ImageManager[_0x200e58(0xbd6)](_0x2e3c95);_0x4487d2[_0x200e58(0x53d)](this['onStaticEnemyBitmapLoad']['bind'](this,_0x4487d2));}else{const _0x467f70=this[_0x200e58(0x7d1)]()?this[_0x200e58(0x2ee)]():this[_0x200e58(0x3f1)]();if(_0x467f70){const _0x28ad39=_0x467f70[_0x200e58(0x40f)];if(_0x28ad39[_0x200e58(0x392)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x33f130(_0x3af054['$1'])*0.01;else{if(_0x28ad39[_0x200e58(0x392)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x28b971(_0xa3526a['$1'])||0x0;}}return 0x1;}}else{const _0x332ff1=ImageManager[_0x200e58(0x312)](_0x2e3c95);_0x332ff1[_0x200e58(0x53d)](this[_0x200e58(0xbfb)][_0x200e58(0xc81)](this,_0x332ff1));}}},Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xbfb)]=function(_0x24a62a){const _0x29f080=_0x57e85a;this['_mainSprite'][_0x29f080(0x632)]=_0x24a62a,this[_0x29f080(0x632)]=new Bitmap(_0x24a62a[_0x29f080(0x8b9)],_0x24a62a['height']);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xa81)]=Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x68a)],Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x68a)]=function(_0x285c09){const _0x58bb51=_0x57e85a;this[_0x58bb51(0x5c7)]&&(_0x58bb51(0x915)===_0x58bb51(0x9f3)?this['resizeWindowXPStyle'](_0x1b8cd5):this['_mainSprite']['setHue'](_0x285c09));},VisuMZ['BattleCore'][_0x57e85a(0x1e6)]=Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x712)],Sprite_Enemy['prototype'][_0x57e85a(0x712)]=function(){const _0x21a598=_0x57e85a;if(this[_0x21a598(0x829)]())VisuMZ['BattleCore'][_0x21a598(0x1e6)][_0x21a598(0xa23)](this);else{this[_0x21a598(0x395)]=!this['_enemy'][_0x21a598(0xcf4)]();if(!this['_appeared']){if('zcfvQ'===_0x21a598(0x70b))this[_0x21a598(0x6a4)]=0x0;else return!![];}}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x79f)]=Sprite_Enemy['prototype']['updateCollapse'],Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x58f)]=function(){const _0x2b3650=_0x57e85a;if(this[_0x2b3650(0x829)]())VisuMZ[_0x2b3650(0x734)]['Sprite_Enemy_updateCollapse']['call'](this);},Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x265)]=function(){const _0x166d03=_0x57e85a;Sprite_Battler[_0x166d03(0x16f)][_0x166d03(0x265)][_0x166d03(0xa23)](this);const _0x35628c=this[_0x166d03(0x473)]()||this;if(!_0x35628c)return;if(!_0x35628c[_0x166d03(0x632)]){if(_0x166d03(0x2d4)!==_0x166d03(0x96d))_0x35628c[_0x166d03(0x632)]=new Bitmap(this[_0x166d03(0x8b9)]||0x1,this[_0x166d03(0x54b)]||0x1);else{if(this['battleLayoutStyle']()==='border')return this[_0x166d03(0xc86)]();else return this[_0x166d03(0x1ad)]()?this['skillItemWindowRectMiddle']():_0x223be2[_0x166d03(0x734)][_0x166d03(0x5f8)][_0x166d03(0xa23)](this);}}if(this[_0x166d03(0xc1e)]===_0x166d03(0x676))this['_mainSprite'][_0x166d03(0xe1d)](0x0,0x0,this['_mainSprite']['width']||0x1,this[_0x166d03(0x746)]);else{let _0x49b847=0x1;if(_0x35628c&&_0x35628c['bitmap'])_0x49b847=_0x35628c['bitmap'][_0x166d03(0x8b9)];let _0x40e412=0x1;if(this['bitmap'])_0x40e412=this[_0x166d03(0x632)][_0x166d03(0x54b)];_0x35628c[_0x166d03(0xe1d)](0x0,0x0,_0x49b847,_0x40e412);}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xa14)]=Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x558)],Sprite_Enemy['prototype'][_0x57e85a(0x558)]=function(){const _0x193042=_0x57e85a;if(this[_0x193042(0x829)]())VisuMZ[_0x193042(0x734)][_0x193042(0xa14)][_0x193042(0xa23)](this);},Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xb51)]=function(){const _0x2bd349=_0x57e85a;return Sprite_Battler[_0x2bd349(0x16f)][_0x2bd349(0xb51)][_0x2bd349(0xa23)](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x5ae)]=Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x907)],Sprite_Enemy['prototype'][_0x57e85a(0x907)]=function(){const _0x5b936c=_0x57e85a;VisuMZ[_0x5b936c(0x734)][_0x5b936c(0x5ae)][_0x5b936c(0xa23)](this),this[_0x5b936c(0xc18)]();},Sprite_Enemy['prototype'][_0x57e85a(0xc18)]=function(){const _0x12f55b=_0x57e85a,_0x92a2e7=VisuMZ['BattleCore']['Settings']['Enemy'];if(_0x92a2e7[_0x12f55b(0xdca)]&&!_0x92a2e7['NameLegacy']){if(_0x12f55b(0xa4d)===_0x12f55b(0xa94))_0x1407ec[_0x12f55b(0x16f)][_0x12f55b(0xa1f)][_0x12f55b(0xa23)](this,_0x2c869e,_0x4bbc57,_0x46bed1,_0x49e507);else{this['_stateIconSprite'][_0x12f55b(0x6a4)]=0x0;return;}}this['_stateIconSprite']['x']=0x0,this[_0x12f55b(0x3ea)]['x']+=this[_0x12f55b(0xb08)]['battleUIOffsetX']();let _0x18893f=0x1;if(this['bitmap'])_0x18893f=this[_0x12f55b(0x632)]['height'];this[_0x12f55b(0x3ea)]['y']=-_0x18893f-this[_0x12f55b(0x3ea)][_0x12f55b(0x54b)]-0x4,this['_stateIconSprite']['y']+=this['_battler']['battleUIOffsetY'](),this[_0x12f55b(0x3ea)][_0x12f55b(0xa63)]['x']=0x1/(this[_0x12f55b(0xa63)]['x']||0.001),this[_0x12f55b(0x3ea)][_0x12f55b(0xa63)]['y']=0x1/(this['scale']['y']||0.001),this[_0x12f55b(0x87a)]()&&('YULFh'!=='sWSVv'?(this[_0x12f55b(0x9fb)][_0x12f55b(0xc22)]['scale']['x']=-0x1/(this[_0x12f55b(0xa63)]['x']||0.001),this[_0x12f55b(0x9fb)][_0x12f55b(0xc22)][_0x12f55b(0xa63)]['y']=0x1/(this[_0x12f55b(0xa63)]['y']||0.001)):(_0x3d4fef+='\x0a',_0x54cbfe+=_0x45b6ac['parameters'][0x0]));},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x67d)]=Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xb01)],Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0xb01)]=function(_0x19e3b8){const _0x59fec1=_0x57e85a;VisuMZ[_0x59fec1(0x734)][_0x59fec1(0x67d)][_0x59fec1(0xa23)](this,_0x19e3b8),this[_0x59fec1(0x964)](_0x19e3b8);},Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x964)]=function(_0x352b4e){const _0x4b2250=_0x57e85a;!this[_0x4b2250(0x9fb)]&&(this[_0x4b2250(0x9fb)]=new Sprite_SvEnemy(_0x352b4e),this[_0x4b2250(0x886)]()),this[_0x4b2250(0x9fb)]['setBattler'](_0x352b4e);},Sprite_Enemy['prototype'][_0x57e85a(0x87a)]=function(){const _0x4cbcaf=_0x57e85a;return this[_0x4cbcaf(0xb9b)]&&this[_0x4cbcaf(0xb9b)]['hasSvBattler']();},Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x829)]=function(){const _0x519ddf=_0x57e85a;return this[_0x519ddf(0x87a)]()?this[_0x519ddf(0xb9b)]['allowCollapse']():!![];},Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x88c)]=function(){const _0x5a30a6=_0x57e85a;this[_0x5a30a6(0x87a)]()&&(_0x5a30a6(0xa99)===_0x5a30a6(0xa99)?this[_0x5a30a6(0x9fb)][_0x5a30a6(0x88c)]():(this['regenerateAllBattleCore'](),this[_0x5a30a6(0x830)](_0x5a30a6(0x424))));},Sprite_Enemy['prototype'][_0x57e85a(0x97b)]=function(_0x6cd44c){const _0x1c2d5b=_0x57e85a;if(this[_0x1c2d5b(0x87a)]())this[_0x1c2d5b(0x9fb)][_0x1c2d5b(0x97b)](_0x6cd44c);},Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x97e)]=function(_0x41f11e){const _0x136f32=_0x57e85a;if(this[_0x136f32(0x87a)]())this['_svBattlerSprite'][_0x136f32(0x97e)](_0x41f11e);},Sprite_Enemy[_0x57e85a(0x16f)][_0x57e85a(0x47f)]=function(){const _0x981292=_0x57e85a,_0x1da245=VisuMZ[_0x981292(0x734)][_0x981292(0x478)]['ActionSequence'],_0x1d7718=_0x1da245[_0x981292(0x72b)],_0x24338c=_0x1da245[_0x981292(0x730)],_0x39ab9f=_0x1da245[_0x981292(0x5a9)];this[_0x981292(0xd1b)](_0x1d7718,_0x24338c,_0x39ab9f);};function Sprite_SvEnemy(){const _0x2d2425=_0x57e85a;this[_0x2d2425(0x84c)](...arguments);}Sprite_SvEnemy[_0x57e85a(0x16f)]=Object[_0x57e85a(0xbae)](Sprite_Actor[_0x57e85a(0x16f)]),Sprite_SvEnemy[_0x57e85a(0x16f)][_0x57e85a(0xd77)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x57e85a(0x16f)][_0x57e85a(0x84c)]=function(_0x5708a0){const _0x1ebf11=_0x57e85a;Sprite_Actor[_0x1ebf11(0x16f)][_0x1ebf11(0x84c)][_0x1ebf11(0xa23)](this,_0x5708a0),this[_0x1ebf11(0xa63)]['x']=-0x1,this['_stateSprite']['scale']['x']=-0x1;},Sprite_SvEnemy[_0x57e85a(0x16f)][_0x57e85a(0x46f)]=function(){},Sprite_SvEnemy['prototype'][_0x57e85a(0xc39)]=function(){},Sprite_SvEnemy['prototype']['setActorHome']=function(_0x364a6a){},Sprite_SvEnemy['prototype'][_0x57e85a(0xa01)]=function(){},Sprite_SvEnemy[_0x57e85a(0x16f)][_0x57e85a(0xc63)]=function(){},Sprite_SvEnemy[_0x57e85a(0x16f)]['updateStateSprite']=function(){const _0x35f63a=_0x57e85a;this[_0x35f63a(0xc22)][_0x35f63a(0x5b6)]=![];},Sprite_SvEnemy[_0x57e85a(0x16f)][_0x57e85a(0x729)]=function(){const _0x24b8a5=_0x57e85a;Sprite_Battler[_0x24b8a5(0x16f)][_0x24b8a5(0x729)]['call'](this);const _0x4f82fd=this[_0x24b8a5(0x6c6)][_0x24b8a5(0xe0a)]();this[_0x24b8a5(0x239)]!==_0x4f82fd&&(_0x24b8a5(0x421)==='ROUjw'?this['_distortionSprite']['addChild'](this[_0x24b8a5(0x3b6)]):(this[_0x24b8a5(0x239)]=_0x4f82fd,this[_0x24b8a5(0x5c7)][_0x24b8a5(0x632)]=ImageManager['loadSvActor'](_0x4f82fd))),this[_0x24b8a5(0x5c7)]&&this['_mainSprite'][_0x24b8a5(0x632)]&&this[_0x24b8a5(0xb08)]&&(this[_0x24b8a5(0x5c7)][_0x24b8a5(0x632)]['smooth']!==this[_0x24b8a5(0xb08)]['battlerSmoothImage']()&&(this[_0x24b8a5(0x5c7)][_0x24b8a5(0x632)][_0x24b8a5(0xdc5)]=this['_battler'][_0x24b8a5(0x217)]()));},Sprite_SvEnemy['prototype'][_0x57e85a(0x780)]=function(){},Sprite_SvEnemy['prototype'][_0x57e85a(0xd1b)]=function(_0x263005,_0x4aa0f5,_0x213bf8){const _0x229011=_0x57e85a;if(this['parent'])this[_0x229011(0x80e)][_0x229011(0xd1b)](_0x263005,_0x4aa0f5,_0x213bf8);},Sprite_SvEnemy[_0x57e85a(0x16f)]['refreshMotion']=function(){const _0x191fd5=_0x57e85a,_0x47f3ac=this[_0x191fd5(0x6c6)];if(_0x47f3ac){const _0x3ec54d=_0x47f3ac[_0x191fd5(0x2eb)]();if(_0x47f3ac[_0x191fd5(0x5dd)]()||_0x47f3ac[_0x191fd5(0xbbd)]())this[_0x191fd5(0x1b7)](_0x191fd5(0xb49));else{if(_0x3ec54d===0x3)this[_0x191fd5(0x1b7)](_0x191fd5(0x605));else{if(_0x3ec54d===0x2)this[_0x191fd5(0x1b7)](_0x191fd5(0xd95));else{if(_0x47f3ac[_0x191fd5(0x764)]())this[_0x191fd5(0x1b7)](_0x191fd5(0x4cc));else{if(_0x47f3ac[_0x191fd5(0x60e)]()||_0x47f3ac['isGuardWaiting']()){if('dTDlo'!==_0x191fd5(0xabf))this[_0x191fd5(0x1b7)]('guard');else{if(_0x173642[_0x191fd5(0x4aa)]>_0x496d9f)_0x3bae59+=_0x3114b0['width']/0x2+_0x488e99;if(_0x9e17cb[_0x191fd5(0x4aa)]<_0x127697)_0x9faa6d-=_0x4f19bf[_0x191fd5(0x8b9)]/0x2+_0x14169c;}}else{if(_0x3ec54d===0x1){if('sSyQI'==='HfYKM'){const _0x5e099a=_0x3212d1['actor']();if(_0x5e099a&&_0x5e099a[_0x191fd5(0x3ab)])_0x5e099a[_0x191fd5(0x3ab)]()[_0x191fd5(0xb3e)]();_0xc768a4[_0x191fd5(0x734)][_0x191fd5(0x556)]['call'](this);}else this['startMotion'](_0x191fd5(0xe20));}else{if(_0x47f3ac[_0x191fd5(0x6d9)]())this[_0x191fd5(0x1b7)](_0x191fd5(0xb7e));else _0x47f3ac['isUndecided']()?this[_0x191fd5(0x1b7)](_0x191fd5(0xb49)):this['startMotion'](_0x47f3ac[_0x191fd5(0x8f7)]()['motionIdle']||'walk');}}}}}}}},Sprite_SvEnemy[_0x57e85a(0x16f)][_0x57e85a(0x5d6)]=function(){const _0x4fbdd8=_0x57e85a;return this[_0x4fbdd8(0x80e)]?this['parent']['_offsetX']===0x0&&this['parent']['_offsetY']===0x0:!![];},Sprite_SvEnemy[_0x57e85a(0x16f)][_0x57e85a(0xd4b)]=function(){},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x2a8)]=Sprite_Animation[_0x57e85a(0x16f)]['targetSpritePosition'],Sprite_Animation[_0x57e85a(0x16f)][_0x57e85a(0x5eb)]=function(_0x3eb5ae){const _0x2923b7=_0x57e85a;if(_0x3eb5ae[_0x2923b7(0x937)])return this[_0x2923b7(0xb1c)](_0x3eb5ae);else{if(_0x2923b7(0xe11)!=='Mucjc')return VisuMZ['BattleCore'][_0x2923b7(0x2a8)][_0x2923b7(0xa23)](this,_0x3eb5ae);else this[_0x2923b7(0x239)]=_0x75e2,this[_0x2923b7(0x5c7)][_0x2923b7(0x632)]=_0x5c0da3[_0x2923b7(0x8ff)](_0x537c3b);}},Sprite_Animation['prototype'][_0x57e85a(0xb1c)]=function(_0x14e2bd){const _0x22706e=_0x57e85a;let _0x43714b=_0x14e2bd['x'],_0x3f0509=_0x14e2bd['y'],_0x4da478=_0x14e2bd['height'],_0x2dbdba=_0x14e2bd[_0x22706e(0x937)][_0x22706e(0xa63)]['y'];_0x14e2bd['x']=_0x14e2bd[_0x22706e(0x4aa)]+_0x14e2bd[_0x22706e(0x58d)](),_0x14e2bd['y']=_0x14e2bd[_0x22706e(0x20d)]+_0x14e2bd[_0x22706e(0x52e)](),_0x14e2bd['height']*=_0x2dbdba;let _0x47b335=VisuMZ[_0x22706e(0x734)][_0x22706e(0x2a8)]['call'](this,_0x14e2bd);return _0x14e2bd['x']=_0x43714b,_0x14e2bd['y']=_0x3f0509,_0x14e2bd[_0x22706e(0x54b)]=_0x4da478,_0x47b335;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x3c0)]=Sprite_AnimationMV[_0x57e85a(0x16f)][_0x57e85a(0x8a4)],Sprite_AnimationMV[_0x57e85a(0x16f)][_0x57e85a(0x8a4)]=function(){const _0x2e4c4b=_0x57e85a;VisuMZ[_0x2e4c4b(0x734)][_0x2e4c4b(0x3c0)][_0x2e4c4b(0xa23)](this);if(!SceneManager['isSceneBattle']())return;if(this['_animation'][_0x2e4c4b(0x4e5)]===0x3)this['x']=Math[_0x2e4c4b(0x92a)](Graphics['boxWidth']/0x2),this['y']=Math[_0x2e4c4b(0x92a)](Graphics[_0x2e4c4b(0x85e)]/0x2);else{if(this[_0x2e4c4b(0xd29)])return;}},Sprite_Damage['prototype']['setupBattleCore']=function(_0x5d9cd1){const _0x2bcea2=_0x57e85a,_0x179221=_0x5d9cd1[_0x2bcea2(0xe1a)]()||_0x5d9cd1[_0x2bcea2(0x2b9)]();if(_0x179221['missed']||_0x179221[_0x2bcea2(0x46a)])this[_0x2bcea2(0xa56)]=0x0,this[_0x2bcea2(0x177)]();else{if(_0x179221[_0x2bcea2(0x741)])this[_0x2bcea2(0xa56)]=_0x179221[_0x2bcea2(0xaeb)]>=0x0?0x0:0x1,this[_0x2bcea2(0x40e)](_0x179221[_0x2bcea2(0xaeb)]);else _0x5d9cd1[_0x2bcea2(0x2e0)]()&&_0x179221[_0x2bcea2(0xad3)]!==0x0&&(_0x2bcea2(0x34b)===_0x2bcea2(0x34b)?(this[_0x2bcea2(0xa56)]=_0x179221[_0x2bcea2(0xad3)]>=0x0?0x2:0x3,this[_0x2bcea2(0x40e)](_0x179221[_0x2bcea2(0xad3)])):(_0x4a75f8['BattleCore'][_0x2bcea2(0x77f)][_0x2bcea2(0xa23)](this),delete this[_0x2bcea2(0x872)][_0x2bcea2(0x8be)],delete this[_0x2bcea2(0x872)][_0x2bcea2(0x7ae)]));}_0x179221[_0x2bcea2(0x2be)]&&this[_0x2bcea2(0xbe3)]();},Sprite_Damage['prototype'][_0x57e85a(0xb62)]=function(_0x1aad84){},Sprite_Damage[_0x57e85a(0x16f)][_0x57e85a(0x40e)]=function(_0x5e1388){const _0x51c391=_0x57e85a;let _0x3341b7=this['createString'](_0x5e1388);const _0x3e3e12=this[_0x51c391(0x28a)](),_0x13a43e=Math[_0x51c391(0x7f8)](_0x3e3e12*0.75);for(let _0x200d29=0x0;_0x200d29<_0x3341b7[_0x51c391(0xd36)];_0x200d29++){const _0x3a75ae=this['createChildSprite'](_0x13a43e,_0x3e3e12);_0x3a75ae[_0x51c391(0x632)][_0x51c391(0xde4)](_0x3341b7[_0x200d29],0x0,0x0,_0x13a43e,_0x3e3e12,_0x51c391(0xc31)),_0x3a75ae['x']=(_0x200d29-(_0x3341b7[_0x51c391(0xd36)]-0x1)/0x2)*_0x13a43e,_0x3a75ae['dy']=-_0x200d29;}},Sprite_Damage[_0x57e85a(0x16f)]['createString']=function(_0x5bfe17){const _0x1fcf40=_0x57e85a;let _0x4bbdea=Math['abs'](_0x5bfe17)[_0x1fcf40(0x1c8)]();this[_0x1fcf40(0x34c)]()&&(_0x4bbdea=VisuMZ[_0x1fcf40(0x1ef)](_0x4bbdea));const _0x5d6bee=VisuMZ[_0x1fcf40(0x734)][_0x1fcf40(0x478)][_0x1fcf40(0x573)];let _0x5868c1='',_0x1415b3='';switch(this[_0x1fcf40(0xa56)]){case 0x0:_0x5868c1=_0x5d6bee['hpDamageFmt']||'-%1',_0x1415b3=TextManager['hp'];if(_0x5bfe17===0x0)_0x5868c1='%1';break;case 0x1:_0x5868c1=_0x5d6bee[_0x1fcf40(0xbc1)]||'+%1',_0x1415b3=TextManager['hp'];break;case 0x2:_0x5868c1=_0x5d6bee[_0x1fcf40(0x8b3)]||'-%1\x20MP',_0x1415b3=TextManager['mp'];break;case 0x3:_0x5868c1=_0x5d6bee[_0x1fcf40(0x6f3)]||_0x1fcf40(0x953),_0x1415b3=TextManager['mp'];break;}return _0x5868c1[_0x1fcf40(0x554)](_0x4bbdea,_0x1415b3)[_0x1fcf40(0xdf5)]();},Sprite_Damage[_0x57e85a(0x16f)][_0x57e85a(0x34c)]=function(){const _0x13c5f1=_0x57e85a;if(Imported[_0x13c5f1(0x376)])return VisuMZ[_0x13c5f1(0x3cc)][_0x13c5f1(0x478)][_0x13c5f1(0x9d8)][_0x13c5f1(0x399)];else{if('KpPce'!=='KpPce'){const _0x27a5d2=_0x420939[_0x13c5f1(0x418)]/0x2,_0x46e95e=this[_0x13c5f1(0xbf8)](_0x19d838[_0x13c5f1(0x734)][_0x13c5f1(0x478)]['BattleLayout'][_0x13c5f1(0xddf)],!![]),_0x3daee1=_0x53a143[_0x13c5f1(0x92a)]((_0x211119['boxWidth']-_0x27a5d2)/0x2),_0x96d8f2=_0x14f917[_0x13c5f1(0x85e)]-_0x46e95e-this[_0x13c5f1(0x32c)]()[_0x13c5f1(0x54b)];return new _0x1f2274(_0x3daee1,_0x96d8f2,_0x27a5d2,_0x46e95e);}else return![];}},Sprite_Damage[_0x57e85a(0x16f)][_0x57e85a(0xbe3)]=function(){const _0x4a2761=_0x57e85a,_0x545a1e=VisuMZ['BattleCore'][_0x4a2761(0x478)]['Damage'];this['_flashColor']=_0x545a1e[_0x4a2761(0x8fe)][_0x4a2761(0x241)](0x0),this[_0x4a2761(0x46b)]=_0x545a1e[_0x4a2761(0x9e5)];},Sprite_Damage[_0x57e85a(0x16f)][_0x57e85a(0xd41)]=function(_0x4cb229,_0x1b6a50){const _0x4af245=_0x57e85a;this[_0x4af245(0x769)]=_0x1b6a50['flashColor']||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x4af245(0xbdc)](this['_flashColor']),this[_0x4af245(0x46b)]=_0x1b6a50['flashDuration']||0x0;const _0x162a75=this['fontSize'](),_0x5a6dc4=Math[_0x4af245(0x7f8)](_0x162a75*0x1e),_0x4acea6=this[_0x4af245(0x63d)](_0x5a6dc4,_0x162a75);_0x4acea6['bitmap'][_0x4af245(0xe01)]=ColorManager['getColor'](_0x1b6a50[_0x4af245(0xe01)]),_0x4acea6[_0x4af245(0x632)][_0x4af245(0xde4)](_0x4cb229,0x0,0x0,_0x5a6dc4,_0x162a75,'center'),_0x4acea6['dy']=0x0;},Sprite_Damage[_0x57e85a(0x16f)]['setupIconTextPopup']=function(_0x9557f9,_0x415c3f,_0x3c7ce5){const _0x5c4df8=_0x57e85a,_0x5da35a=Math[_0x5c4df8(0xde7)](this['fontSize'](),ImageManager['iconHeight']),_0x4b8c8a=Math['floor'](_0x5da35a*0x1e),_0x35838e=this['createChildSprite'](_0x4b8c8a,_0x5da35a),_0x13a7fd=ImageManager[_0x5c4df8(0xc15)]/0x2,_0x3c3af7=_0x35838e[_0x5c4df8(0x632)]['measureTextWidth'](_0x415c3f+'\x20');_0x35838e['bitmap'][_0x5c4df8(0xe01)]=ColorManager[_0x5c4df8(0x3f4)](_0x3c7ce5[_0x5c4df8(0xe01)]),_0x35838e['bitmap'][_0x5c4df8(0xde4)](_0x415c3f,_0x13a7fd,0x0,_0x4b8c8a-_0x13a7fd,_0x5da35a,_0x5c4df8(0xc31));const _0x478ca0=Math[_0x5c4df8(0x92a)]((_0x5da35a-ImageManager[_0x5c4df8(0x15d)])/0x2),_0x56cdee=_0x4b8c8a/0x2-ImageManager[_0x5c4df8(0xc15)]-_0x3c3af7/0x2+_0x13a7fd/0x2,_0x545e36=ImageManager[_0x5c4df8(0x95e)](_0x5c4df8(0x584)),_0x2a280f=ImageManager[_0x5c4df8(0xc15)],_0xb9c281=ImageManager['iconHeight'],_0xd3cd4e=_0x9557f9%0x10*_0x2a280f,_0x7b4bb4=Math[_0x5c4df8(0x7f8)](_0x9557f9/0x10)*_0xb9c281;_0x35838e[_0x5c4df8(0x632)][_0x5c4df8(0x8fc)](_0x545e36,_0xd3cd4e,_0x7b4bb4,_0x2a280f,_0xb9c281,_0x56cdee,_0x478ca0),this['_flashColor']=_0x3c7ce5['flashColor']||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x5c4df8(0xbdc)](this[_0x5c4df8(0x769)]),this[_0x5c4df8(0x46b)]=_0x3c7ce5[_0x5c4df8(0x947)]||0x0,_0x35838e['dy']=0x0;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xe08)]=Sprite_Damage[_0x57e85a(0x16f)]['createChildSprite'],Sprite_Damage[_0x57e85a(0x16f)]['createChildSprite']=function(_0x3513bb,_0x354fbc){const _0x124184=_0x57e85a;return _0x354fbc=Math[_0x124184(0x92a)](_0x354fbc*1.2),VisuMZ['BattleCore'][_0x124184(0xe08)][_0x124184(0xa23)](this,_0x3513bb,_0x354fbc);},VisuMZ[_0x57e85a(0x734)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon[_0x57e85a(0x16f)][_0x57e85a(0x265)],Sprite_StateIcon[_0x57e85a(0x16f)][_0x57e85a(0x265)]=function(){const _0x38f4a4=_0x57e85a;VisuMZ[_0x38f4a4(0x734)][_0x38f4a4(0x73d)][_0x38f4a4(0xa23)](this),this['opacity']=this[_0x38f4a4(0x779)]>0x0?0xff:0x0;},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x6e3)]=Sprite_Weapon[_0x57e85a(0x16f)][_0x57e85a(0xdd1)],Sprite_Weapon[_0x57e85a(0x16f)][_0x57e85a(0xdd1)]=function(){const _0x56f001=_0x57e85a;VisuMZ[_0x56f001(0x734)]['Sprite_Weapon_loadBitmap'][_0x56f001(0xa23)](this);if(this[_0x56f001(0x632)]){if(_0x56f001(0xa7e)!=='RaOGS')this[_0x56f001(0x632)]['smooth']=VisuMZ['BattleCore'][_0x56f001(0x478)][_0x56f001(0x876)][_0x56f001(0x30c)];else return![];}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x526)]=Sprite_Gauge[_0x57e85a(0x16f)][_0x57e85a(0x4bd)],Sprite_Gauge[_0x57e85a(0x16f)]['smoothness']=function(){const _0x491fae=_0x57e85a;return this['_statusType']!=='time'?VisuMZ[_0x491fae(0x734)][_0x491fae(0x478)]['HpGauge'][_0x491fae(0x345)]??0x14:VisuMZ[_0x491fae(0x734)][_0x491fae(0x526)][_0x491fae(0xa23)](this);};function Sprite_HpGauge(){const _0x4d1757=_0x57e85a;this[_0x4d1757(0x84c)](...arguments);}Sprite_HpGauge[_0x57e85a(0x16f)]=Object[_0x57e85a(0xbae)](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x57e85a(0x16f)]['constructor']=Sprite_HpGauge,Sprite_HpGauge['prototype'][_0x57e85a(0x84c)]=function(){const _0xa1f922=_0x57e85a;Sprite_Gauge['prototype'][_0xa1f922(0x84c)][_0xa1f922(0xa23)](this);},Sprite_HpGauge['prototype'][_0x57e85a(0xd63)]=function(){return 0x0;},Sprite_HpGauge[_0x57e85a(0x16f)][_0x57e85a(0x1e1)]=function(){const _0x464234=_0x57e85a;this['bitmap'][_0x464234(0x896)]();const _0x5d96b2=this[_0x464234(0x2c4)]();!isNaN(_0x5d96b2)&&this[_0x464234(0x33f)]();};function Sprite_EnemyName(){const _0x3c13a1=_0x57e85a;this[_0x3c13a1(0x84c)](...arguments);}Sprite_EnemyName[_0x57e85a(0x16f)]=Object['create'](Sprite_Name[_0x57e85a(0x16f)]),Sprite_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0xd77)]=Sprite_EnemyName,Sprite_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x84c)]=function(){const _0x532353=_0x57e85a;Sprite_Name[_0x532353(0x16f)][_0x532353(0x84c)][_0x532353(0xa23)](this),this[_0x532353(0x2a0)]();},Sprite_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x8dc)]=function(){const _0x3743d6=_0x57e85a;Sprite_Name[_0x3743d6(0x16f)][_0x3743d6(0x8dc)][_0x3743d6(0xa23)](this),this[_0x3743d6(0x6a4)]=0x0,this['_linkedSprite']=null,this[_0x3743d6(0x70e)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName[_0x57e85a(0x16f)]['createAttachedSprites']=function(){const _0x412a8=_0x57e85a;VisuMZ['BattleCore'][_0x412a8(0x478)]['Enemy']['NameAttachStateIcon']&&(this['_stateIconSprite']=new Sprite_StateIcon(),this['addChild'](this[_0x412a8(0x3ea)]));},Sprite_EnemyName['prototype'][_0x57e85a(0xae9)]=function(){return Graphics['boxWidth'];},Sprite_EnemyName[_0x57e85a(0x16f)]['bitmapHeight']=function(){const _0x1ef4be=_0x57e85a;return this[_0x1ef4be(0xd09)]=this['_lineHeight']||Window_Base['prototype'][_0x1ef4be(0x4ab)]()||0x24,this[_0x1ef4be(0xd09)]*0x4;},Sprite_EnemyName[_0x57e85a(0x16f)]['fontSize']=function(){const _0x290e3b=_0x57e85a;return VisuMZ[_0x290e3b(0x734)]['Settings'][_0x290e3b(0xb30)][_0x290e3b(0x86c)]||$gameSystem[_0x290e3b(0xabe)]();},Sprite_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x45b)]=function(_0x5ddf0d){const _0x189901=_0x57e85a;this[_0x189901(0xa7d)]=_0x5ddf0d;},Sprite_EnemyName['prototype'][_0x57e85a(0xa02)]=function(){const _0x5d52dc=_0x57e85a;Sprite_Name[_0x5d52dc(0x16f)][_0x5d52dc(0xa02)][_0x5d52dc(0xa23)](this),this[_0x5d52dc(0x45e)](),this[_0x5d52dc(0x8a4)](),this[_0x5d52dc(0x1f8)](),this[_0x5d52dc(0x1c3)]();},Sprite_EnemyName['prototype'][_0x57e85a(0x1e1)]=function(){const _0x1c164c=_0x57e85a;this['_cacheTextWidth']=undefined;const _0x22db73=this['name'](),_0xcfe879=this[_0x1c164c(0xae9)](),_0x3792c1=Window_Base[_0x1c164c(0x16f)]['lineHeight']();this['setupFont'](),this[_0x1c164c(0x632)]['clear'](),this['bitmap']['drawText'](_0x22db73,0x0,0x0,_0xcfe879,_0x3792c1,_0x1c164c(0xc31));},Sprite_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x45e)]=function(){const _0x404b2a=_0x57e85a;if(!this['_linkedSprite'])return;if(this[_0x404b2a(0xb08)]!==this[_0x404b2a(0xa7d)][_0x404b2a(0xb08)]){if('ruqfm'!==_0x404b2a(0x3f3))this[_0x404b2a(0xb62)](this[_0x404b2a(0xa7d)]['_battler']);else{if(_0x52bc62['VisuMZ_3_BattleAI']){if(_0x51cf61['BattleAI'][_0x404b2a(0x88f)]<1.19){let _0x1d55ad='';_0x1d55ad+='VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20',_0x1d55ad+=_0x404b2a(0x3e4),_0x1d55ad+=_0x404b2a(0x27f),_0xf27040(_0x1d55ad),_0xd142b[_0x404b2a(0x4f1)]();}}return this[_0x404b2a(0x81a)]=-0x1,_0x235c27[_0x404b2a(0x5fa)](...this[_0x404b2a(0x257)]()),this[_0x404b2a(0x97a)](_0x406331);}}},Sprite_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x8a4)]=function(){const _0x44706a=_0x57e85a;if(!this[_0x44706a(0xa7d)])return;this['_lineHeight']=this[_0x44706a(0xd09)]||Window_Base[_0x44706a(0x16f)][_0x44706a(0x4ab)](),this['x']=Math[_0x44706a(0x92a)](this['_linkedSprite'][_0x44706a(0x4aa)]),this['y']=Math[_0x44706a(0x92a)](this['_linkedSprite'][_0x44706a(0x20d)]-this['_lineHeight']*0.5);const _0x3161b2=VisuMZ[_0x44706a(0x734)]['Settings'][_0x44706a(0xb30)];this['x']+=Math[_0x44706a(0x92a)](_0x3161b2[_0x44706a(0x255)]||0x0),this['y']+=Math[_0x44706a(0x92a)](_0x3161b2[_0x44706a(0x6a5)]||0x0);},Sprite_EnemyName['prototype'][_0x57e85a(0x1f8)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x57e85a(0x16f)]['updateStateIconSprite']=function(){const _0x2ab97b=_0x57e85a;if(!this[_0x2ab97b(0x3ea)])return;this[_0x2ab97b(0xb08)]!==this[_0x2ab97b(0x3ea)]['_battler']&&this[_0x2ab97b(0x3ea)][_0x2ab97b(0xb62)](this[_0x2ab97b(0xb08)]);const _0x49bfdd=this['textWidth']();this['_lineHeight']=this[_0x2ab97b(0xd09)]||Window_Base[_0x2ab97b(0x16f)]['lineHeight'](),this['_stateIconSprite']['x']=Math[_0x2ab97b(0x92a)]((_0x49bfdd+ImageManager[_0x2ab97b(0xc15)])/0x2)+0x8,this[_0x2ab97b(0x3ea)]['y']=this[_0x2ab97b(0xd09)]/0x2;const _0x522ddd=VisuMZ['BattleCore']['Settings'][_0x2ab97b(0xb30)];this[_0x2ab97b(0x3ea)]['x']+=_0x522ddd[_0x2ab97b(0xc12)]||0x0,this[_0x2ab97b(0x3ea)]['y']+=_0x522ddd[_0x2ab97b(0x323)]||0x0;},Sprite_EnemyName['prototype'][_0x57e85a(0x1c3)]=function(){const _0x5b70b9=_0x57e85a,_0x7bf8ae=this[_0x5b70b9(0x3db)]();if(_0x7bf8ae&&this[_0x5b70b9(0x6a4)]<0xff)this['opacity']+=0x10;else!_0x7bf8ae&&this[_0x5b70b9(0x6a4)]>0x0&&(_0x5b70b9(0x161)===_0x5b70b9(0x161)?this[_0x5b70b9(0x6a4)]-=0x10:_0x37c5fb=_0x40929c[_0x5b70b9(0x297)]);},Sprite_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x3db)]=function(){const _0xdf2b76=_0x57e85a;if(this[_0xdf2b76(0xa70)]())return![];else{if(!this[_0xdf2b76(0xb08)]){if(_0xdf2b76(0xcec)!==_0xdf2b76(0xcec)){if(_0x4c4ca2[_0xdf2b76(0x392)](/(.*):[ ](\d+)/i)){const _0x4bbd44=_0x5d56d0(_0x1244bf['$1'])[_0xdf2b76(0xdf5)](),_0x4dbe5b=_0x118506(_0x146942['$2']);_0x295c1a[_0x4bbd44]=_0x4dbe5b,_0x1084e6+=_0x4dbe5b;}else{if(_0x2ec262[_0xdf2b76(0x392)](/(.*):[ ](\d+\.?\d+)/i)){const _0x2308d2=_0x31b538(_0x133404['$1'])[_0xdf2b76(0xdf5)](),_0x18d036=_0x2d7527(_0x1ce458['$2']);_0x23a2d9[_0x2308d2]=_0x18d036,_0x47dd09+=_0x18d036;}else _0x47a5b1!==''&&(_0x1b5b64[_0x4b5841]=0x1,_0x6f5189++);}}else return![];}else{if(this['_battler']['isDead']())return![];else{if(!this[_0xdf2b76(0xb08)][_0xdf2b76(0x6e8)]()){if('FGKKn'===_0xdf2b76(0xbde))_0xede10c[_0xdf2b76(0x734)][_0xdf2b76(0x47a)][_0xdf2b76(0xa23)](this),this[_0xdf2b76(0x886)]();else return![];}else{if(this['compatibilityVisible']())return!![];else{if(this[_0xdf2b76(0x96f)]())return!![];else{if(this[_0xdf2b76(0xab2)]())return!![];else{if(this[_0xdf2b76(0x6a4)]>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0xa70)]=function(){const _0x306136=_0x57e85a;return VisuMZ['BattleCore'][_0x306136(0x478)][_0x306136(0xb30)][_0x306136(0xc9c)];},Sprite_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x2f1)]=function(){return![];},Sprite_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x96f)]=function(){const _0x4dadb1=_0x57e85a;return VisuMZ[_0x4dadb1(0x734)][_0x4dadb1(0x478)]['Enemy'][_0x4dadb1(0x88a)];},Sprite_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0xab2)]=function(){const _0x362b6d=_0x57e85a;if(VisuMZ[_0x362b6d(0x734)][_0x362b6d(0x478)][_0x362b6d(0xb30)]['NameAlwaysSelectOnly']){if(_0x362b6d(0x663)!==_0x362b6d(0x663))this[_0x362b6d(0x937)]=new _0x417b22(),this[_0x362b6d(0x937)][_0x362b6d(0x70e)]['x']=0.5,this[_0x362b6d(0x937)][_0x362b6d(0x70e)]['y']=0.5,this[_0x362b6d(0x67f)](this[_0x362b6d(0x937)]);else return this['_battler'][_0x362b6d(0x20e)]();}else{if('fGyZr'==='fGyZr')return SceneManager[_0x362b6d(0xd04)][_0x362b6d(0x973)]&&SceneManager[_0x362b6d(0xd04)][_0x362b6d(0x973)][_0x362b6d(0x75e)]&&SceneManager[_0x362b6d(0xd04)][_0x362b6d(0x973)][_0x362b6d(0xc42)][_0x362b6d(0x3af)](this[_0x362b6d(0xb08)]);else{if(!_0x198cf0['isSceneBattle']())return;if(!_0x2e2fd4[_0x362b6d(0x465)])return;if(!_0x5bb3c2[_0x362b6d(0x475)]())return;_0x28fff7[_0x362b6d(0x15e)](_0x3f7a66,_0x5023be);const _0x31972a=_0x97efd9[_0x362b6d(0x666)];_0xff471a['_subject']&&_0x2048fc['_subject'][_0x362b6d(0xb9c)](_0x31972a);}}},Sprite_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x629)]=function(){const _0x55f9b9=_0x57e85a;if(!this[_0x55f9b9(0xb08)])return 0x0;if(this[_0x55f9b9(0x30e)])return this[_0x55f9b9(0x30e)];const _0x297410=this[_0x55f9b9(0x7a3)]();return this[_0x55f9b9(0x6eb)](),this[_0x55f9b9(0x30e)]=this['bitmap'][_0x55f9b9(0x5c0)](_0x297410)||0x1,this['_cacheTextWidth'];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x3c9)]=Sprite_Battleback[_0x57e85a(0x16f)][_0x57e85a(0xb63)],Sprite_Battleback[_0x57e85a(0x16f)]['adjustPosition']=function(){const _0xb2eadc=_0x57e85a,_0x5cba61=VisuMZ[_0xb2eadc(0x734)][_0xb2eadc(0x478)]['BattlebackScale'];if(!_0x5cba61)return VisuMZ[_0xb2eadc(0x734)][_0xb2eadc(0x3c9)][_0xb2eadc(0xa23)](this);const _0x38ab59=String(_0x5cba61[_0xb2eadc(0xa39)])||'MZ';switch(_0x38ab59){case'MZ':VisuMZ[_0xb2eadc(0x734)][_0xb2eadc(0x3c9)][_0xb2eadc(0xa23)](this);break;case'1:1':this[_0xb2eadc(0x664)]();break;case _0xb2eadc(0xb4a):this['adjustPosition_ScaleToFit']();break;case'ScaleDown':this['adjustPosition_ScaleDown']();break;case _0xb2eadc(0xc25):this[_0xb2eadc(0x24a)]();break;}},Sprite_Battleback[_0x57e85a(0x16f)][_0x57e85a(0x664)]=function(){const _0x419235=_0x57e85a,_0x2d792f=VisuMZ['BattleCore'][_0x419235(0x478)][_0x419235(0x192)];if(_0x2d792f&&_0x2d792f['jsOneForOne']){if(_0x419235(0x1f1)!==_0x419235(0x824))return _0x2d792f[_0x419235(0x1d1)][_0x419235(0xa23)](this);else _0x5c7665[_0x419235(0x7a2)](this);}this[_0x419235(0x8b9)]=Graphics[_0x419235(0x8b9)],this['height']=Graphics[_0x419235(0x54b)];const _0x35afd6=0x1;this[_0x419235(0xa63)]['x']=_0x35afd6,this[_0x419235(0xa63)]['y']=_0x35afd6,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x57e85a(0x16f)]['adjustPosition_ScaleToFit']=function(){const _0x259676=_0x57e85a,_0x5617c2=VisuMZ[_0x259676(0x734)]['Settings'][_0x259676(0x192)];if(_0x5617c2&&_0x5617c2[_0x259676(0x4ef)]){if(_0x259676(0xc59)===_0x259676(0xc59))return _0x5617c2['jsScaleToFit']['call'](this);else this['_spriteset'][_0x259676(0xa02)]();}this[_0x259676(0x8b9)]=Graphics[_0x259676(0x8b9)],this['height']=Graphics[_0x259676(0x54b)];const _0x4466d1=this[_0x259676(0x8b9)]/this[_0x259676(0x632)][_0x259676(0x8b9)],_0x28a922=this[_0x259676(0x54b)]/this['bitmap']['height'],_0x2a5e2b=Math[_0x259676(0xde7)](_0x4466d1,_0x28a922);this[_0x259676(0xa63)]['x']=_0x2a5e2b,this['scale']['y']=_0x2a5e2b,this['x']=(Graphics[_0x259676(0x8b9)]-this[_0x259676(0x8b9)])/0x2,this['y']=Graphics[_0x259676(0x54b)]-this['height'];},Sprite_Battleback[_0x57e85a(0x16f)]['adjustPosition_ScaleDown']=function(){const _0x181b86=_0x57e85a,_0x3be742=VisuMZ[_0x181b86(0x734)][_0x181b86(0x478)]['BattlebackScale'];if(_0x3be742&&_0x3be742[_0x181b86(0x8cd)])return _0x3be742[_0x181b86(0x8cd)][_0x181b86(0xa23)](this);this['width']=Graphics['width'],this[_0x181b86(0x54b)]=Graphics[_0x181b86(0x54b)];const _0x527408=Math[_0x181b86(0x16e)](0x1,this[_0x181b86(0x8b9)]/this[_0x181b86(0x632)]['width']),_0x10d26c=Math[_0x181b86(0x16e)](0x1,this[_0x181b86(0x54b)]/this['bitmap'][_0x181b86(0x54b)]),_0x1e2919=Math[_0x181b86(0xde7)](_0x527408,_0x10d26c);this[_0x181b86(0xa63)]['x']=_0x1e2919,this[_0x181b86(0xa63)]['y']=_0x1e2919,this['x']=(Graphics[_0x181b86(0x8b9)]-this[_0x181b86(0x8b9)])/0x2,this['y']=Graphics[_0x181b86(0x54b)]-this['height'];},Sprite_Battleback['prototype']['adjustPosition_ScaleUp']=function(){const _0x574d4e=_0x57e85a,_0x3a0dbe=VisuMZ[_0x574d4e(0x734)][_0x574d4e(0x478)]['BattlebackScale'];if(_0x3a0dbe&&_0x3a0dbe[_0x574d4e(0x1e4)])return _0x574d4e(0x333)!=='ewrUI'?_0x24639c[_0x574d4e(0x3ab)]()[_0x574d4e(0x4aa)]-_0x6f46ba[_0x574d4e(0x3ab)]()[_0x574d4e(0x4aa)]:_0x3a0dbe[_0x574d4e(0x1e4)][_0x574d4e(0xa23)](this);this['width']=Graphics[_0x574d4e(0x8b9)],this[_0x574d4e(0x54b)]=Graphics['height'];const _0x4ae690=Math[_0x574d4e(0xde7)](0x1,this[_0x574d4e(0x8b9)]/this[_0x574d4e(0x632)]['width']),_0x1acbe6=Math['max'](0x1,this[_0x574d4e(0x54b)]/this['bitmap'][_0x574d4e(0x54b)]),_0x18df2a=Math[_0x574d4e(0xde7)](_0x4ae690,_0x1acbe6);this[_0x574d4e(0xa63)]['x']=_0x18df2a,this['scale']['y']=_0x18df2a,this['x']=(Graphics[_0x574d4e(0x8b9)]-this[_0x574d4e(0x8b9)])/0x2,this['y']=Graphics['height']-this['height'];},Spriteset_Battle[_0x57e85a(0x6bc)]=VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x478)]['BattleLayout'][_0x57e85a(0x843)]??!![],Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x728)]=function(){const _0x18d17b=_0x57e85a;if(!$gameSystem[_0x18d17b(0xe14)]())return![];return![];},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x6f8)]=function(){return 0x0;},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x2a4)]=function(){return 0x0;},VisuMZ[_0x57e85a(0x734)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle[_0x57e85a(0x16f)]['createLowerLayer'],Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0xc84)]=function(){const _0x312e01=_0x57e85a;VisuMZ['BattleCore'][_0x312e01(0x1c5)][_0x312e01(0xa23)](this),this[_0x312e01(0x1a9)](),this['createEnemyNames']();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x7fc)]=Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0xa02)],Spriteset_Battle['prototype']['update']=function(){const _0x457665=_0x57e85a;VisuMZ[_0x457665(0x734)][_0x457665(0x7fc)][_0x457665(0xa23)](this),this[_0x457665(0x69b)](),this[_0x457665(0x9be)](),this[_0x457665(0xd72)](),this['updateBattleBalloons']();},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x1a9)]=function(){const _0x5036cd=_0x57e85a;this[_0x5036cd(0xa17)]=new Weather(),this['_battleField'][_0x5036cd(0x67f)](this[_0x5036cd(0xa17)]);},Spriteset_Battle['prototype'][_0x57e85a(0xd72)]=function(){const _0x1c7d64=_0x57e85a;this[_0x1c7d64(0xa17)]['type']=$gameScreen[_0x1c7d64(0x455)](),this['_weather'][_0x1c7d64(0x17d)]=$gameScreen[_0x1c7d64(0x2a5)]();},Game_Interpreter['prototype'][_0x57e85a(0xa03)]=function(_0x2b53c0){const _0x3a0e83=_0x57e85a;$gameScreen[_0x3a0e83(0xc8d)](_0x2b53c0[0x0],_0x2b53c0[0x1],_0x2b53c0[0x2]);if(_0x2b53c0[0x3])this[_0x3a0e83(0x674)](_0x2b53c0[0x2]);return!![];},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x375)]=Game_Interpreter[_0x57e85a(0x16f)][_0x57e85a(0xb3c)],Game_Interpreter['prototype'][_0x57e85a(0xb3c)]=function(_0x3a1668){const _0x57c05b=_0x57e85a;return SceneManager[_0x57c05b(0x4b2)]()?(SceneManager['_scene']['_spriteset'][_0x57c05b(0x2cc)](_0x3a1668[0x0],_0x3a1668[0x1]),!![]):VisuMZ[_0x57c05b(0x734)]['Game_Interpreter_command283']['call'](this,_0x3a1668);},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x972)]=function(_0x17da5a,_0x4ddb3e){_0x17da5a['bitmap']=_0x4ddb3e;},Spriteset_Battle['prototype']['changeBattlebacks']=function(_0x3c5332,_0x546d94){const _0x128ef4=_0x57e85a;_0x3c5332=_0x3c5332||'',_0x546d94=_0x546d94||'';_0x3c5332===''&&_0x546d94===''&&(_0x3c5332=this[_0x128ef4(0x2ed)][_0x128ef4(0x1bd)](),_0x546d94=this['_back2Sprite']['battleback2Name']());const _0x221dad=ImageManager[_0x128ef4(0x673)](_0x3c5332),_0x22bd5c=ImageManager['loadBattleback2'](_0x546d94);_0x221dad[_0x128ef4(0x53d)](this[_0x128ef4(0x48d)]['bind'](this,this[_0x128ef4(0x2ed)],this[_0x128ef4(0x99e)],_0x221dad,_0x22bd5c));},Spriteset_Battle['prototype']['updateBattlebackBitmap1']=function(_0x67f722,_0x726a79,_0x4ac012,_0x1a3330){const _0x201ef9=_0x57e85a;_0x1a3330[_0x201ef9(0x53d)](this[_0x201ef9(0x214)][_0x201ef9(0xc81)](this,_0x67f722,_0x726a79,_0x4ac012,_0x1a3330));},Spriteset_Battle[_0x57e85a(0x16f)]['updateBattlebackBitmap2']=function(_0x251e19,_0xb27bdc,_0x1747d4,_0x1b6546){const _0x210b5a=_0x57e85a;_0x251e19['bitmap']=_0x1747d4,_0xb27bdc[_0x210b5a(0x632)]=_0x1b6546,_0x251e19[_0x210b5a(0xb63)](),_0xb27bdc['adjustPosition']();},VisuMZ['BattleCore'][_0x57e85a(0xa83)]=Spriteset_Battle[_0x57e85a(0x16f)]['createBattleField'],Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0xac3)]=function(){const _0x25d880=_0x57e85a;VisuMZ[_0x25d880(0x734)][_0x25d880(0xa83)]['call'](this),this['createBattleFieldBattleCore']();},Spriteset_Battle['prototype'][_0x57e85a(0x79e)]=function(){const _0x4c074b=_0x57e85a;this[_0x4c074b(0xb6a)](),this[_0x4c074b(0x2f5)](),this[_0x4c074b(0x514)](),this[_0x4c074b(0x76b)](),this[_0x4c074b(0xad4)]();},Spriteset_Battle['prototype'][_0x57e85a(0xb6a)]=function(){const _0x380cf4=_0x57e85a;this['_battlerContainer']=new Sprite(),this[_0x380cf4(0x8af)][_0x380cf4(0x67f)](this[_0x380cf4(0xc14)]);},Spriteset_Battle[_0x57e85a(0x16f)]['createAnimationContainer']=function(){const _0x1a5e68=_0x57e85a;this[_0x1a5e68(0x867)]=new Sprite();if(Spriteset_Battle[_0x1a5e68(0x6bc)]){if(_0x1a5e68(0x261)!==_0x1a5e68(0x261))return _0x8d5c7e['filter'](_0x3b484c=>_0x3b484c!==_0x53de48&&!_0x2181ec[_0x1a5e68(0x3af)](_0x3b484c)&&_0x3b484c['notFocusValid']());else this[_0x1a5e68(0x67f)](this['_animationContainer']);}else'KVDgX'===_0x1a5e68(0xb80)?this[_0x1a5e68(0x8af)][_0x1a5e68(0x67f)](this[_0x1a5e68(0x867)]):(_0x29a741[_0x1a5e68(0x851)]=_0x1cfbfd,_0x2d6d19['_battleCoreBattleResumeAfter']=!![],this[_0x1a5e68(0x227)]());},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x76b)]=function(){const _0x58debf=_0x57e85a;this[_0x58debf(0x62b)]=new Sprite(),this['_damageContainer']['x']=this['_battleField']['x'],this['_damageContainer']['y']=this[_0x58debf(0x8af)]['y'],this[_0x58debf(0x67f)](this[_0x58debf(0x62b)]);},Spriteset_Battle['prototype']['adjustFlippedBattlefield']=function(){const _0x4f015f=_0x57e85a;if(!this[_0x4f015f(0x728)]())return;this[_0x4f015f(0xc14)]['scale']['x']=-0x1,this['_battlerContainer']['x']=this[_0x4f015f(0x8af)][_0x4f015f(0x8b9)],this[_0x4f015f(0x998)][_0x4f015f(0xa63)]['x']=-0x1,this[_0x4f015f(0x998)]['x']=this[_0x4f015f(0x8af)][_0x4f015f(0x8b9)],this[_0x4f015f(0x867)][_0x4f015f(0xa63)]['x']=-0x1,this[_0x4f015f(0x867)]['x']=this[_0x4f015f(0x8af)]['width'],this['_damageContainer'][_0x4f015f(0xa63)]['x']=-0x1,this[_0x4f015f(0x62b)]['x']=this[_0x4f015f(0x8af)]['x']+this['_battleField']['width'];},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0xb9e)]=function(){const _0x3317b9=_0x57e85a;Imported[_0x3317b9(0x376)]&&this[_0x3317b9(0x860)]()&&this['repositionEnemiesByResolution']();const _0x5d99ae=$gameTroop['members'](),_0x406be8=[];for(const _0x3ef69e of _0x5d99ae){'txSXQ'!=='UVDuP'?_0x406be8[_0x3317b9(0x5fa)](new Sprite_Enemy(_0x3ef69e)):(this[_0x3317b9(0x5bf)][_0x3317b9(0xb45)](_0x50082b),_0x25b9bd[_0x3317b9(0x202)](_0x1ada50),_0x24df07[_0x3317b9(0xd2b)]());}_0x406be8['sort'](this[_0x3317b9(0x551)][_0x3317b9(0xc81)](this));for(const _0x3031d4 of _0x406be8){this[_0x3317b9(0xc14)][_0x3317b9(0x67f)](_0x3031d4);}this[_0x3317b9(0x98b)]=_0x406be8;},Spriteset_Battle['prototype'][_0x57e85a(0xd70)]=function(){const _0x40b246=_0x57e85a;this[_0x40b246(0x634)]=[];for(let _0x58c961=0x0;_0x58c961<$gameParty[_0x40b246(0x9f7)]();_0x58c961++){const _0x3102d4=$gameParty[_0x40b246(0x57d)]()[_0x58c961],_0x45b945=new Sprite_Actor();_0x45b945[_0x40b246(0x179)](_0x3102d4),_0x45b945[_0x40b246(0xb01)](_0x3102d4),_0x45b945[_0x40b246(0xa02)](),this[_0x40b246(0x634)][_0x40b246(0x5fa)](_0x45b945),this[_0x40b246(0xc14)][_0x40b246(0x67f)](_0x45b945);}},Spriteset_Battle[_0x57e85a(0x16f)]['createAnimationSprite']=function(_0x55df00,_0x4aeaac,_0x3dece5,_0x12ec50){const _0x33330c=_0x57e85a,_0x54dd8f=this['isMVAnimation'](_0x4aeaac),_0x47ad96=new(_0x54dd8f?Sprite_AnimationMV:Sprite_Animation)(),_0x2b5aa5=this[_0x33330c(0xd42)](_0x55df00);if(this[_0x33330c(0x9c4)](_0x55df00[0x0])){if(_0x33330c(0x17f)!==_0x33330c(0x4f8))_0x3dece5=!_0x3dece5;else return![];}_0x47ad96[_0x33330c(0x5e6)]=_0x55df00,_0x47ad96[_0x33330c(0xb62)](_0x2b5aa5,_0x4aeaac,_0x3dece5,_0x12ec50),this['addAnimationSpriteToContainer'](_0x47ad96);},Spriteset_Battle['prototype'][_0x57e85a(0xdd2)]=function(_0x23cff2){const _0x3d47ce=_0x57e85a;if(this[_0x3d47ce(0xb44)](_0x23cff2)){if('cWBjP'===_0x3d47ce(0x62c))this[_0x3d47ce(0x3b8)]()['addChild'](_0x23cff2),_0x23cff2[_0x3d47ce(0xd29)]=!![];else{if(_0x42d123[_0x3d47ce(0x30a)]())return![];}}else this[_0x3d47ce(0x867)]['addChild'](_0x23cff2),Spriteset_Battle[_0x3d47ce(0x6bc)]&&(this['_animationContainer']['x']=this[_0x3d47ce(0x5a4)]['x'],this[_0x3d47ce(0x867)]['y']=this[_0x3d47ce(0x5a4)]['y']);this['_animationSprites'][_0x3d47ce(0x5fa)](_0x23cff2);},Spriteset_Battle['prototype']['isAnimationShownOnBattlePortrait']=function(_0x1b59df){const _0x2833a2=_0x57e85a;if(!_0x1b59df)return![];if(!_0x1b59df['_animation'])return![];if(!_0x1b59df['targetObjects'][0x0])return![];if(_0x1b59df[_0x2833a2(0x5e6)][0x0][_0x2833a2(0x7d1)]&&!_0x1b59df[_0x2833a2(0x5e6)][0x0]['isActor']())return![];if($gameSystem[_0x2833a2(0xe14)]())return![];if(!this[_0x2833a2(0x3b8)]())return![];if(_0x1b59df[_0x2833a2(0xd77)]===Sprite_Animation){if(_0x2833a2(0x82d)!==_0x2833a2(0x82d)){this[_0x2833a2(0x5fa)]('performSubstitute',_0x46dbbd,_0x2f237d);if(!_0x21b0b5['BattleCore'][_0x2833a2(0x478)][_0x2833a2(0x52a)]['ShowSubstitute'])return;const _0x377a41=_0x5267c2[_0x2833a2(0x7a3)](),_0xd788c1=_0x44dcdb[_0x2833a2(0xd79)][_0x2833a2(0x554)](_0x377a41,_0x1525c7[_0x2833a2(0x7a3)]());this['push'](_0x2833a2(0x3fd),_0xd788c1);}else{if(_0x1b59df[_0x2833a2(0x82c)][_0x2833a2(0xcc8)]!==0x0)return![];}}else{if(_0x1b59df['constructor']===Sprite_AnimationMV){if(_0x2833a2(0x451)===_0x2833a2(0x41b))this[_0x2833a2(0x1b7)]('sleep');else{if(_0x1b59df['_animation'][_0x2833a2(0x4e5)]===0x3)return![];}}}return!![];const _0x47f1e4=Window_BattleStatus[_0x2833a2(0x16f)][_0x2833a2(0x93c)]();return['xp',_0x2833a2(0x801)][_0x2833a2(0x370)](_0x47f1e4);},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x3b8)]=function(){const _0x97e29a=_0x57e85a;if(!SceneManager[_0x97e29a(0xd04)])return null;if(!SceneManager[_0x97e29a(0xd04)][_0x97e29a(0x912)])return null;if(!SceneManager[_0x97e29a(0xd04)][_0x97e29a(0x912)][_0x97e29a(0x5a4)])return null;return SceneManager[_0x97e29a(0xd04)][_0x97e29a(0x912)][_0x97e29a(0x5a4)];},Spriteset_Battle['prototype'][_0x57e85a(0x291)]=function(_0x3329fe){const _0x4aca58=_0x57e85a;this[_0x4aca58(0x1b5)](_0x3329fe);for(const _0x25de07 of _0x3329fe[_0x4aca58(0x5e6)]){if(_0x4aca58(0x74d)!==_0x4aca58(0x8c2)){if(_0x25de07[_0x4aca58(0xc2f)]){if('VcLLh'!==_0x4aca58(0x792)){if(this[_0x4aca58(0x93c)]()!==_0x4aca58(0x801))return;this[_0x4aca58(0x686)](_0x3b884f[_0x4aca58(0x8c8)]());}else _0x25de07[_0x4aca58(0xc2f)]();}}else _0x56ecea+=_0x30c4d6,_0x105b72+=_0xbc5c04[_0x4aca58(0x7d1)]()?-_0x17a89c:_0x4a20d1;}_0x3329fe[_0x4aca58(0xd2b)]();},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x1b5)]=function(_0x56086b){const _0x262a2c=_0x57e85a;if(this['isAnimationShownOnBattlePortrait'](_0x56086b))this[_0x262a2c(0x3b8)]()['removeChild'](_0x56086b);else{if(_0x262a2c(0xab4)===_0x262a2c(0xab4))this[_0x262a2c(0x867)][_0x262a2c(0xb77)](_0x56086b);else return this[_0x262a2c(0x80e)][_0x262a2c(0xda9)]===0x0&&this[_0x262a2c(0x80e)][_0x262a2c(0xde2)]===0x0;}this[_0x262a2c(0x5a4)]['removeChild'](_0x56086b),this[_0x262a2c(0x867)]['removeChild'](_0x56086b),this[_0x262a2c(0x61b)][_0x262a2c(0xb45)](_0x56086b);if(this['_fauxAnimationSprites'])this['_fauxAnimationSprites'][_0x262a2c(0xb45)](_0x56086b);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xd65)]=Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x9a1)],Spriteset_Battle['prototype'][_0x57e85a(0x9a1)]=function(){const _0x51b164=_0x57e85a;VisuMZ[_0x51b164(0x734)][_0x51b164(0xd65)][_0x51b164(0xa23)](this),this[_0x51b164(0x69b)]();},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x69b)]=function(){const _0x4f7d2b=_0x57e85a;this['_battlerContainer']['children'][_0x4f7d2b(0x494)](this[_0x4f7d2b(0x189)][_0x4f7d2b(0xc81)](this)),this[_0x4f7d2b(0x2b3)]();if(!this[_0x4f7d2b(0xc14)])return;this['_battlerContainer']['opacity']=this[_0x4f7d2b(0x80c)]();},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x189)]=function(_0xe7ee7a,_0x293b78){const _0x4aeb1b=_0x57e85a;if(VisuMZ[_0x4aeb1b(0x734)][_0x4aeb1b(0x478)]['Actor'][_0x4aeb1b(0x7d4)]){if('BAdiw'===_0x4aeb1b(0x207)){if(!_0x592069[_0x4aeb1b(0x4b2)]())return;if(!_0x574acb[_0x4aeb1b(0x599)])return;_0x48c820['ConvertParams'](_0x550333,_0x1cc2c0);const _0xd2cd17=_0x4b2af4[_0x4aeb1b(0x734)][_0x4aeb1b(0xcf2)](_0x167fe5);_0x126dc0[_0x4aeb1b(0xd04)][_0x4aeb1b(0x8e8)](_0xd2cd17);const _0x282d12=_0x20d05a['getLastPluginCommandInterpreter']();_0x282d12&&_0x4959a9['WaitForEntrance']&&_0x282d12[_0x4aeb1b(0x1f9)](_0x4aeb1b(0x3fe));}else{if(_0xe7ee7a['_battler']&&_0x293b78[_0x4aeb1b(0xb08)]){if(_0xe7ee7a['_battler']['isActor']()&&_0x293b78[_0x4aeb1b(0xb08)]['isEnemy']()){if(_0x4aeb1b(0xe16)==='LfvxE')this[_0x4aeb1b(0xbef)][_0x4aeb1b(0x5fa)](_0xae79b2),this[_0x4aeb1b(0xa6a)](),this[_0x4aeb1b(0x8d9)]();else return 0x1;}else{if(_0x293b78[_0x4aeb1b(0xb08)][_0x4aeb1b(0x7d1)]()&&_0xe7ee7a[_0x4aeb1b(0xb08)][_0x4aeb1b(0xd89)]())return-0x1;}}}}if(_0xe7ee7a[_0x4aeb1b(0x20d)]!==_0x293b78[_0x4aeb1b(0x20d)])return _0xe7ee7a[_0x4aeb1b(0x20d)]-_0x293b78[_0x4aeb1b(0x20d)];else{if('pEmDI'==='pEmDI')return _0x293b78[_0x4aeb1b(0x234)]-_0xe7ee7a[_0x4aeb1b(0x234)];else _0x41b56a=(_0x361df4+_0x1b2d19)/0x2,_0x3e0b4d=-0x1;}},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x2b3)]=function(){const _0xcfaf28=_0x57e85a;if(!VisuMZ[_0xcfaf28(0x734)]['Settings']['Actor'][_0xcfaf28(0x524)])return;const _0x10a707=BattleManager[_0xcfaf28(0xa77)];if(_0x10a707){if(_0x10a707['isActor']()&&!$gameSystem[_0xcfaf28(0xe14)]())return;const _0x29d5ca=_0x10a707[_0xcfaf28(0x3ab)]();if(_0x29d5ca&&_0x10a707[_0xcfaf28(0x7d1)]())this['_battlerContainer']['addChild'](_0x29d5ca);}},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x6a2)]=function(){const _0xa3f7a1=_0x57e85a;for(const _0x410ecd of $gameParty[_0xa3f7a1(0x8a1)]()){if(!_0x410ecd)continue;if(!_0x410ecd[_0xa3f7a1(0x3ab)]())continue;_0x410ecd['battler']()[_0xa3f7a1(0x7cf)]=!![],_0x410ecd[_0xa3f7a1(0x3ab)]()[_0xa3f7a1(0x780)]();}},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x2f5)]=function(){const _0x3369f6=_0x57e85a;this[_0x3369f6(0x998)]=new Sprite();if(Spriteset_Battle[_0x3369f6(0x6bc)])this[_0x3369f6(0x67f)](this[_0x3369f6(0x998)]);else{if('vjeJY'===_0x3369f6(0x7e7)){const _0x3347e9=_0x5d90e2[_0x3369f6(0x734)][_0x3369f6(0x478)][_0x3369f6(0x5ad)],_0x23f7f4=_0x3347e9['BattleStartEvent'],_0x15b654=_0x1e532f[_0x23f7f4];if(_0x15b654&&_0x525b66[_0x3369f6(0x734)]['CheckMapBattleEventValid'](_0x23f7f4)){const _0x428221=this[_0x3369f6(0x5ca)]()?this[_0x3369f6(0x64f)]:0x0,_0x31604e=_0x15b654[_0x3369f6(0x7df)];this[_0x3369f6(0x389)](_0x31604e,_0x428221),this[_0x3369f6(0xd54)]=_0x48d0a6[_0x3369f6(0xbdc)](this[_0x3369f6(0xd54)]);const _0x3342c4={'code':0xbc3,'indent':this[_0x3369f6(0x4b1)],'parameters':_0x5a7132['makeDeepCopy'](_0x29abc0)};return this['_list'][_0x3369f6(0x8ed)](this[_0x3369f6(0xc87)]+0x1,0x0,_0x3342c4),!![];}else return _0x31b926[_0x3369f6(0x734)][_0x3369f6(0xe0f)]['call'](this,_0x124888);}else this[_0x3369f6(0x8af)][_0x3369f6(0x67f)](this['_uiContainer']);}SceneManager[_0x3369f6(0xd04)][_0x3369f6(0x998)]=this[_0x3369f6(0x998)];},Spriteset_Battle[_0x57e85a(0x16f)]['createEnemyNames']=function(){const _0x1d5699=_0x57e85a;if(VisuMZ[_0x1d5699(0x734)][_0x1d5699(0x478)][_0x1d5699(0xb30)][_0x1d5699(0x7c0)])return;this['_enemyNameContainer']=new Sprite(),BattleManager['addChildToUiContainer'](this[_0x1d5699(0x54e)]);for(const _0x71bc42 of this[_0x1d5699(0x98b)]){if(_0x1d5699(0xa82)!==_0x1d5699(0xa82)){if(!_0x426cfd[_0x1d5699(0x4b2)]())return;if(!_0x1c3d11[_0x1d5699(0x272)])return;_0x178a5b[_0x1d5699(0x15e)](_0x39ee6b,_0x44ae9a);const _0x291bc9=_0x3464ff[_0x1d5699(0xc21)](),_0x2362a9=_0x332dcf[_0x1d5699(0xdd4)](_0x3c7860[_0x1d5699(0xa3a)]),_0xb31324=_0x23b1dc['WaitForCamera'];_0x484525[_0x1d5699(0x4ff)](_0x2362a9,_0x13165d[_0x1d5699(0x692)],_0x35c422[_0x1d5699(0xa42)]);if(_0xb31324)_0x291bc9[_0x1d5699(0x1f9)]('battleCamera');}else{const _0x3cd5d=new Sprite_EnemyName();this[_0x1d5699(0x54e)][_0x1d5699(0x67f)](_0x3cd5d),_0x3cd5d[_0x1d5699(0x45b)](_0x71bc42);}}},Spriteset_Battle['prototype'][_0x57e85a(0x9be)]=function(){const _0x444ba0=_0x57e85a;if(!this[_0x444ba0(0x62b)])return;if(!this['_uiContainer'])return;const _0x19b4af=Spriteset_Battle[_0x444ba0(0x6bc)]?this['_damageContainer']['x']:0x0,_0x56cf37=Spriteset_Battle[_0x444ba0(0x6bc)]?this['_damageContainer']['y']:0x0,_0x2ba651=Imported['VisuMZ_3_ActSeqCamera']?this[_0x444ba0(0x8af)]['x']:0x0,_0x288748=Imported[_0x444ba0(0x272)]?this[_0x444ba0(0x8af)]['y']:0x0;this['_uiContainer']['x']=_0x19b4af+_0x2ba651,this[_0x444ba0(0x998)]['y']=_0x56cf37+_0x288748;},BattleManager['addChildToUiContainer']=function(_0x859da6){const _0x3a183a=_0x57e85a;if(!SceneManager[_0x3a183a(0xd04)]['_uiContainer'])return;SceneManager[_0x3a183a(0xd04)][_0x3a183a(0x998)][_0x3a183a(0x67f)](_0x859da6);},BattleManager[_0x57e85a(0x202)]=function(_0x1d1d48){const _0xca0f50=_0x57e85a;if(!SceneManager['_scene']['_uiContainer'])return;SceneManager[_0xca0f50(0xd04)]['_uiContainer']['removeChild'](_0x1d1d48);},Spriteset_Battle[_0x57e85a(0x16f)]['targetBattlerContainerOpacity']=function(){return 0xff;},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x782)]=function(){return![];},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x55d)]=function(){const _0x229056=_0x57e85a;return this['battlerSprites']()[_0x229056(0x54d)](_0x191372=>_0x191372[_0x229056(0xbe7)]());},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x7fb)]=function(){const _0x452902=_0x57e85a;return this[_0x452902(0x5b0)]()[_0x452902(0x54d)](_0x2b9e24=>_0x2b9e24[_0x452902(0xad5)]());},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0xd39)]=function(){const _0x380269=_0x57e85a;return this[_0x380269(0x5b0)]()[_0x380269(0x54d)](_0x23ef66=>_0x23ef66[_0x380269(0xd97)]());},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0xb75)]=function(){const _0x169487=_0x57e85a;return this['battlerSprites']()[_0x169487(0x54d)](_0x4509c9=>_0x4509c9[_0x169487(0xdbe)]());},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x871)]=function(){const _0x7ec68=_0x57e85a;return this[_0x7ec68(0x5b0)]()[_0x7ec68(0x54d)](_0x1b1883=>_0x1b1883[_0x7ec68(0x7c8)]());},Spriteset_Battle[_0x57e85a(0x16f)][_0x57e85a(0x94d)]=function(){const _0x1fae19=_0x57e85a;return this[_0x1fae19(0x5b0)]()[_0x1fae19(0x54d)](_0x1d1913=>_0x1d1913[_0x1fae19(0xe28)]());},VisuMZ[_0x57e85a(0x734)]['Window_ItemList_maxCols']=Window_ItemList[_0x57e85a(0x16f)][_0x57e85a(0x99d)],Window_ItemList[_0x57e85a(0x16f)]['maxCols']=function(){const _0x5ea89e=_0x57e85a;if(SceneManager['isSceneBattle']())return SceneManager[_0x5ea89e(0xd04)][_0x5ea89e(0x93c)]()===_0x5ea89e(0x515)?VisuMZ['BattleCore']['Settings'][_0x5ea89e(0xcab)][_0x5ea89e(0x5c5)]:VisuMZ['BattleCore'][_0x5ea89e(0x478)]['BattleLayout'][_0x5ea89e(0x529)];else{if(_0x5ea89e(0xe25)!==_0x5ea89e(0x3e0))return VisuMZ['BattleCore'][_0x5ea89e(0x48e)]['call'](this);else _0x193712[_0x5ea89e(0xd04)][_0x5ea89e(0x78d)][_0x5ea89e(0x811)](),_0x5ecc0c[_0x5ea89e(0x1f9)]('battleAnimation');}},VisuMZ['BattleCore'][_0x57e85a(0x5da)]=Window_SkillList[_0x57e85a(0x16f)][_0x57e85a(0x99d)],Window_SkillList[_0x57e85a(0x16f)][_0x57e85a(0x99d)]=function(){const _0x582be4=_0x57e85a;if(SceneManager[_0x582be4(0x4b2)]()){if(SceneManager[_0x582be4(0xd04)]['battleLayoutStyle']()===_0x582be4(0x515)){if('OyYEE'!==_0x582be4(0xa4f))_0x1370b7[_0x582be4(0x1b4)][_0x582be4(0x7c3)](_0x3d91e4);else return VisuMZ[_0x582be4(0x734)][_0x582be4(0x478)]['BattleLayout']['SkillItemBorderCols'];}else{if(_0x582be4(0x6f5)===_0x582be4(0x2f7))_0x5bbc32['BattleCore'][_0x582be4(0xb9a)][_0x582be4(0xa23)](this,_0x3e5057,_0x322e97),this[_0x582be4(0x8d9)]();else return VisuMZ[_0x582be4(0x734)]['Settings'][_0x582be4(0xcab)]['SkillItemStandardCols'];}}else return VisuMZ[_0x582be4(0x734)][_0x582be4(0x5da)][_0x582be4(0xa23)](this);},VisuMZ['BattleCore']['Window_Options_addGeneralOptions']=Window_Options[_0x57e85a(0x16f)]['addGeneralOptions'],Window_Options[_0x57e85a(0x16f)][_0x57e85a(0xc09)]=function(){const _0x1799f1=_0x57e85a;VisuMZ[_0x1799f1(0x734)][_0x1799f1(0xb91)][_0x1799f1(0xa23)](this),this[_0x1799f1(0xa79)](),this[_0x1799f1(0x2cb)]();},Window_Options[_0x57e85a(0x16f)][_0x57e85a(0xa79)]=function(){const _0x5d2d74=_0x57e85a;if(VisuMZ[_0x5d2d74(0x734)][_0x5d2d74(0x478)][_0x5d2d74(0x447)]['AddOption']){if(_0x5d2d74(0xb79)===_0x5d2d74(0x46e)){this[_0x5d2d74(0xb44)](_0x100257)?this[_0x5d2d74(0x3b8)]()[_0x5d2d74(0xb77)](_0x58830f):this[_0x5d2d74(0x867)]['removeChild'](_0x545da6);this['_effectsContainer'][_0x5d2d74(0xb77)](_0xdaf4db),this[_0x5d2d74(0x867)]['removeChild'](_0x414f90),this[_0x5d2d74(0x61b)][_0x5d2d74(0xb45)](_0x498afb);if(this[_0x5d2d74(0xdf0)])this[_0x5d2d74(0xdf0)][_0x5d2d74(0xb45)](_0x577736);}else this[_0x5d2d74(0xa32)](),this['addBattleCoreAutoBattleStyleCommand']();}},Window_Options['prototype']['addShowHpGaugeCommand']=function(){const _0x4fa531=_0x57e85a;if(!VisuMZ[_0x4fa531(0x734)][_0x4fa531(0x478)][_0x4fa531(0x6bd)][_0x4fa531(0x6e7)])return;const _0x1479dc=TextManager[_0x4fa531(0x191)],_0xd1af9b=_0x4fa531(0x191);this[_0x4fa531(0x761)](_0x1479dc,_0xd1af9b);},Window_Options['prototype'][_0x57e85a(0xa32)]=function(){const _0x25f1cd=_0x57e85a,_0x1e94b9=TextManager[_0x25f1cd(0x804)],_0x50672d='autoBattleAtStart';this['addCommand'](_0x1e94b9,_0x50672d);},Window_Options['prototype'][_0x57e85a(0xdc8)]=function(){const _0x3a033b=_0x57e85a,_0x284927=TextManager[_0x3a033b(0xbb8)],_0x5066d7=_0x3a033b(0xa9f);this[_0x3a033b(0x761)](_0x284927,_0x5066d7);},VisuMZ[_0x57e85a(0x734)]['Window_Options_statusText']=Window_Options[_0x57e85a(0x16f)][_0x57e85a(0xab5)],Window_Options[_0x57e85a(0x16f)]['statusText']=function(_0x4d9cba){const _0x5c7e94=_0x57e85a,_0x2c983f=this['commandSymbol'](_0x4d9cba);if(_0x2c983f===_0x5c7e94(0xa9f))return this[_0x5c7e94(0xa4a)]();else{if(_0x5c7e94(0xbf9)===_0x5c7e94(0xbf9))return VisuMZ['BattleCore']['Window_Options_statusText'][_0x5c7e94(0xa23)](this,_0x4d9cba);else{if(!_0x56645c[_0x5c7e94(0xd04)][_0x5c7e94(0x998)])return;_0x36c5bf[_0x5c7e94(0xd04)][_0x5c7e94(0x998)][_0x5c7e94(0xb77)](_0x39ff4d);}}},Window_Options[_0x57e85a(0x16f)][_0x57e85a(0xa4a)]=function(){const _0x53967c=_0x57e85a,_0x2132b2=VisuMZ[_0x53967c(0x734)]['Settings'][_0x53967c(0x447)],_0x3d0646=this[_0x53967c(0x818)](_0x53967c(0xa9f));return _0x3d0646?_0x2132b2['StyleON']:_0x2132b2[_0x53967c(0x6d6)];},Window_ShopStatus[_0x57e85a(0x16f)]['getItemDamageAmountLabelBattleCore']=function(){const _0x57ef73=_0x57e85a,_0x13abeb=DataManager['getDamageStyle'](this[_0x57ef73(0x8cf)]),_0x24cc8e=VisuMZ[_0x57ef73(0x684)][_0x13abeb];if(!_0x24cc8e)return this[_0x57ef73(0xdb5)]();const _0x50524d=_0x57ef73(0xb2e)['format'](this[_0x57ef73(0x8cf)]['damage'][_0x57ef73(0x24b)]),_0x57bfc1=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x57ef73(0x8cf)][_0x57ef73(0x356)][_0x57ef73(0x24b)]];return _0x24cc8e[_0x50524d]['format'](_0x57bfc1);},Window_ShopStatus[_0x57e85a(0x16f)][_0x57e85a(0xb42)]=function(){const _0x219aa0=_0x57e85a,_0x301dfb=DataManager[_0x219aa0(0x546)](this[_0x219aa0(0x8cf)]),_0x76c5b=VisuMZ['DamageStyles'][_0x301dfb];if(!_0x76c5b)return this[_0x219aa0(0x66d)]();return _0x76c5b[_0x219aa0(0x627)][_0x219aa0(0xa23)](this);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x1a5)]=Window_PartyCommand['prototype'][_0x57e85a(0x84c)],Window_PartyCommand['prototype'][_0x57e85a(0x84c)]=function(_0x58a063){const _0x24a30f=_0x57e85a;VisuMZ['BattleCore'][_0x24a30f(0x1a5)][_0x24a30f(0xa23)](this,_0x58a063),this[_0x24a30f(0x1c7)](_0x58a063);},Window_PartyCommand['prototype'][_0x57e85a(0x1c7)]=function(_0x26ffca){const _0x52b193=_0x57e85a,_0x1f840b=new Rectangle(0x0,0x0,_0x26ffca[_0x52b193(0x8b9)],_0x26ffca['height']);this[_0x52b193(0x229)]=new Window_Base(_0x1f840b),this[_0x52b193(0x229)]['opacity']=0x0,this[_0x52b193(0x67f)](this[_0x52b193(0x229)]),this[_0x52b193(0x661)]();},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x78b)]=function(){const _0x3e5ac9=_0x57e85a;Window_Command[_0x3e5ac9(0x16f)][_0x3e5ac9(0x78b)][_0x3e5ac9(0xa23)](this);if(this[_0x3e5ac9(0x229)])this['updateCommandNameWindow']();},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x661)]=function(){const _0x52321e=_0x57e85a,_0x37b4ce=this[_0x52321e(0x229)];_0x37b4ce[_0x52321e(0x887)]['clear']();const _0x4a4cfc=this[_0x52321e(0x9d1)](this[_0x52321e(0x8c8)]());if(_0x4a4cfc===_0x52321e(0xa69)&&this[_0x52321e(0xdf8)]()>0x0){const _0xe4acac=this['itemLineRect'](this[_0x52321e(0x8c8)]());let _0x2c711d=this[_0x52321e(0x276)](this[_0x52321e(0x8c8)]());_0x2c711d=_0x2c711d[_0x52321e(0x795)](/\\I\[(\d+)\]/gi,''),_0x37b4ce[_0x52321e(0x210)](),this[_0x52321e(0x63f)](_0x2c711d,_0xe4acac),this[_0x52321e(0x5b2)](_0x2c711d,_0xe4acac),this[_0x52321e(0x160)](_0x2c711d,_0xe4acac);}},Window_PartyCommand['prototype']['commandNameWindowDrawBackground']=function(_0x46a11a,_0x4fd928){},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x5b2)]=function(_0x4c2796,_0x39d89f){const _0x5c38a1=_0x57e85a,_0x13e8ae=this[_0x5c38a1(0x229)];_0x13e8ae[_0x5c38a1(0xde4)](_0x4c2796,0x0,_0x39d89f['y'],_0x13e8ae[_0x5c38a1(0x9f5)],_0x5c38a1(0xc31));},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x160)]=function(_0x11633c,_0x454c97){const _0x4d68ce=_0x57e85a,_0x297849=this[_0x4d68ce(0x229)],_0x55d21a=$gameSystem[_0x4d68ce(0x7b2)](),_0x9706f=_0x454c97['x']+Math[_0x4d68ce(0x7f8)](_0x454c97['width']/0x2)+_0x55d21a;_0x297849['x']=_0x297849[_0x4d68ce(0x8b9)]/-0x2+_0x9706f,_0x297849['y']=Math[_0x4d68ce(0x7f8)](_0x454c97[_0x4d68ce(0x54b)]/0x2);},Window_PartyCommand[_0x57e85a(0x16f)]['makeCommandList']=function(){const _0x3f7a7a=_0x57e85a;this[_0x3f7a7a(0xd4a)](),this[_0x3f7a7a(0x668)](),this['addCustomCommands'](),this[_0x3f7a7a(0xb00)](),this[_0x3f7a7a(0xcae)]();},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0xd4a)]=function(){const _0x1057a8=_0x57e85a,_0x44ad6c=this[_0x1057a8(0x6ac)](),_0x4605b7=VisuMZ['BattleCore'][_0x1057a8(0x478)][_0x1057a8(0x7f9)][_0x1057a8(0xa76)],_0x1a1ffa=_0x44ad6c===_0x1057a8(0x891)?TextManager[_0x1057a8(0x8d8)]:_0x1057a8(0x53c)[_0x1057a8(0x554)](_0x4605b7,TextManager[_0x1057a8(0x8d8)]),_0x5c8fcb=this[_0x1057a8(0xd60)]();this['addCommand'](_0x1a1ffa,'fight',_0x5c8fcb);},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0xd60)]=function(){return!![];},Window_PartyCommand[_0x57e85a(0x16f)]['addAutoBattleCommand']=function(){const _0x5c93b3=_0x57e85a;if(!this['isAutoBattleCommandAdded']())return;const _0x1b377c=this[_0x5c93b3(0x6ac)](),_0x3dbb7b=VisuMZ[_0x5c93b3(0x734)][_0x5c93b3(0x478)]['PartyCmd'][_0x5c93b3(0xc57)],_0x208ea1=_0x1b377c===_0x5c93b3(0x891)?TextManager['autoBattle']:_0x5c93b3(0x53c)[_0x5c93b3(0x554)](_0x3dbb7b,TextManager[_0x5c93b3(0x635)]),_0x13fd47=this[_0x5c93b3(0x75f)]();this[_0x5c93b3(0x761)](_0x208ea1,_0x5c93b3(0x635),_0x13fd47);},Window_PartyCommand['prototype'][_0x57e85a(0x748)]=function(){const _0x280f51=_0x57e85a;return VisuMZ[_0x280f51(0x734)]['Settings']['PartyCmd'][_0x280f51(0x709)];},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x75f)]=function(){return!![];},Window_PartyCommand['prototype'][_0x57e85a(0x5bc)]=function(){},Window_PartyCommand[_0x57e85a(0x16f)]['addOptionsCommand']=function(){const _0x58a12a=_0x57e85a;if(!this['isOptionsCommandAdded']())return;const _0x3faf68=this['commandStyle'](),_0x5af367=VisuMZ[_0x58a12a(0x734)]['Settings'][_0x58a12a(0x7f9)][_0x58a12a(0x699)],_0x128437=_0x3faf68==='text'?TextManager[_0x58a12a(0xd5f)]:_0x58a12a(0x53c)[_0x58a12a(0x554)](_0x5af367,TextManager[_0x58a12a(0xd5f)]),_0x5e4394=this[_0x58a12a(0x83f)]();this['addCommand'](_0x128437,_0x58a12a(0xd5f),_0x5e4394);},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x1df)]=function(){const _0x421412=_0x57e85a;return VisuMZ[_0x421412(0x734)][_0x421412(0x478)][_0x421412(0x7f9)][_0x421412(0x7ad)];},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x83f)]=function(){return!![];},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0xcae)]=function(){const _0x1323ff=_0x57e85a,_0x18946d=this['commandStyle'](),_0x244317=VisuMZ[_0x1323ff(0x734)]['Settings'][_0x1323ff(0x7f9)][_0x1323ff(0x49a)],_0x3dd813=_0x18946d===_0x1323ff(0x891)?TextManager['escape']:_0x1323ff(0x53c)['format'](_0x244317,TextManager['escape']),_0x22288a=this[_0x1323ff(0xe0b)]();this[_0x1323ff(0x761)](_0x3dd813,_0x1323ff(0x6b7),_0x22288a);},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0xe0b)]=function(){const _0x37d033=_0x57e85a;return BattleManager[_0x37d033(0x350)]();},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x5e8)]=function(){const _0x2e9e03=_0x57e85a;return VisuMZ[_0x2e9e03(0x734)][_0x2e9e03(0x478)][_0x2e9e03(0x7f9)][_0x2e9e03(0x5f1)];},Window_PartyCommand['prototype']['drawItem']=function(_0x1083cd){const _0x4bf776=_0x57e85a,_0x356ad8=this[_0x4bf776(0x9d1)](_0x1083cd);if(_0x356ad8===_0x4bf776(0x95c))this[_0x4bf776(0x636)](_0x1083cd);else _0x356ad8===_0x4bf776(0xa69)?this[_0x4bf776(0x8cb)](_0x1083cd):Window_Command[_0x4bf776(0x16f)][_0x4bf776(0xa52)][_0x4bf776(0xa23)](this,_0x1083cd);},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x6ac)]=function(){const _0x42f298=_0x57e85a;return VisuMZ['BattleCore'][_0x42f298(0x478)][_0x42f298(0x7f9)][_0x42f298(0x536)];},Window_PartyCommand[_0x57e85a(0x16f)]['commandStyleCheck']=function(_0x39e94a){const _0x42efa6=_0x57e85a;if(_0x39e94a<0x0)return _0x42efa6(0x891);const _0x252e7b=this['commandStyle']();if(_0x252e7b!==_0x42efa6(0x971)){if('bFOAV'===_0x42efa6(0xca8)){let _0x4b463e=(_0xbb042['mmp']*_0xba5558[_0x42efa6(0x7f4)]+_0x11729f['value2'])*_0x5be14e[_0x42efa6(0x236)];_0x4b463e=this['disperseDamage'](_0x4b463e),this[_0x42efa6(0x68b)]()&&(_0x4b463e*=this[_0x42efa6(0xbe8)]()['pha']),_0x4b463e=_0x26f06d[_0x42efa6(0x7f8)](_0x4b463e),_0x4b463e!==0x0&&(_0x5bd7a5[_0x42efa6(0x65e)](_0x4b463e),this['makeSuccess'](_0xb29a4));}else return _0x252e7b;}else{if(this['maxItems']()>0x0){const _0x846c67=this[_0x42efa6(0x276)](_0x39e94a);if(_0x846c67[_0x42efa6(0x392)](/\\I\[(\d+)\]/i)){const _0x487499=this[_0x42efa6(0xbca)](_0x39e94a),_0x526056=this[_0x42efa6(0x754)](_0x846c67)[_0x42efa6(0x8b9)];if(_0x526056<=_0x487499[_0x42efa6(0x8b9)]){if(_0x42efa6(0xce9)!==_0x42efa6(0xc1b))return _0x42efa6(0x95c);else{if(!_0x59d01c[_0x42efa6(0x4b2)]())return;if(!_0x18339d[_0x42efa6(0x272)])return;_0x40a3d2['ConvertParams'](_0x5e8263,_0x20f09e);const _0x4af723=_0x52caf4[_0x42efa6(0xc21)](),_0x44811f=_0x26c39d[_0x42efa6(0x6db)],_0x566921=_0x363d43[_0x42efa6(0x2bd)],_0x135afa=_0x30f9bb[_0x42efa6(0x3bd)];if(_0x44811f){const _0x3233b5=_0xfb6d03[_0x42efa6(0x92a)](_0x502ebb[_0x42efa6(0x8b9)]/0x2),_0xcd1132=_0x29d4bb[_0x42efa6(0x92a)](_0x409e90[_0x42efa6(0x54b)]/0x2);_0x2cf690[_0x42efa6(0x62a)](_0x3233b5,_0xcd1132,_0x4567bd[_0x42efa6(0x692)],_0x36a393[_0x42efa6(0xa42)]);}_0x566921&&_0x5e1e0d[_0x42efa6(0x3b7)](0x0,0x0,_0x12c219[_0x42efa6(0x692)],_0x10d941[_0x42efa6(0xa42)]);if(_0x135afa)_0x4af723[_0x42efa6(0x1f9)](_0x42efa6(0x6e6));}}else return _0x42efa6(0xa69);}}}return _0x42efa6(0x891);},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x636)]=function(_0x36f744){const _0x1cca4b=_0x57e85a,_0x7be5dc=this[_0x1cca4b(0xbca)](_0x36f744),_0x5c7d7e=this[_0x1cca4b(0x276)](_0x36f744),_0x3baaac=this[_0x1cca4b(0x754)](_0x5c7d7e)[_0x1cca4b(0x8b9)];this[_0x1cca4b(0x86d)](this[_0x1cca4b(0x743)](_0x36f744));const _0x4bbb39=this[_0x1cca4b(0x5e8)]();if(_0x4bbb39==='right')this[_0x1cca4b(0xa50)](_0x5c7d7e,_0x7be5dc['x']+_0x7be5dc[_0x1cca4b(0x8b9)]-_0x3baaac,_0x7be5dc['y'],_0x3baaac);else{if(_0x4bbb39===_0x1cca4b(0xc31)){const _0x16bd14=_0x7be5dc['x']+Math[_0x1cca4b(0x7f8)]((_0x7be5dc['width']-_0x3baaac)/0x2);this[_0x1cca4b(0xa50)](_0x5c7d7e,_0x16bd14,_0x7be5dc['y'],_0x3baaac);}else this[_0x1cca4b(0xa50)](_0x5c7d7e,_0x7be5dc['x'],_0x7be5dc['y'],_0x3baaac);}},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x8cb)]=function(_0x21332){const _0x4bccc2=_0x57e85a;this['commandName'](_0x21332)['match'](/\\I\[(\d+)\]/i);const _0xff01bc=Number(RegExp['$1'])||0x0,_0x16d09d=this[_0x4bccc2(0xbca)](_0x21332),_0xa803d9=_0x16d09d['x']+Math['floor']((_0x16d09d['width']-ImageManager['iconWidth'])/0x2),_0x2dca9e=_0x16d09d['y']+(_0x16d09d['height']-ImageManager[_0x4bccc2(0x15d)])/0x2;this['drawIcon'](_0xff01bc,_0xa803d9,_0x2dca9e);},Window_PartyCommand['prototype']['hide']=function(){},Window_PartyCommand[_0x57e85a(0x16f)]['activate']=function(){const _0x3c5173=_0x57e85a;Window_Command[_0x3c5173(0x16f)][_0x3c5173(0xa13)][_0x3c5173(0xa23)](this);const _0x3ba59f=this['battleLayoutStyle']();if(_0x3ba59f===_0x3c5173(0x515)){if(_0x3c5173(0x4e3)===_0x3c5173(0x2b6)){const _0x32a3e0=_0x218c48['BattleCore'][_0x3c5173(0x478)][_0x3c5173(0x192)];if(_0x32a3e0&&_0x32a3e0[_0x3c5173(0x1e4)])return _0x32a3e0[_0x3c5173(0x1e4)][_0x3c5173(0xa23)](this);this[_0x3c5173(0x8b9)]=_0x26f8d5[_0x3c5173(0x8b9)],this['height']=_0x1dfbd2[_0x3c5173(0x54b)];const _0x4ae7c0=_0x2401ce[_0x3c5173(0xde7)](0x1,this[_0x3c5173(0x8b9)]/this[_0x3c5173(0x632)][_0x3c5173(0x8b9)]),_0x1c9b1b=_0xdaa8a1[_0x3c5173(0xde7)](0x1,this[_0x3c5173(0x54b)]/this[_0x3c5173(0x632)][_0x3c5173(0x54b)]),_0x2f112b=_0x30a1bd[_0x3c5173(0xde7)](_0x4ae7c0,_0x1c9b1b);this[_0x3c5173(0xa63)]['x']=_0x2f112b,this[_0x3c5173(0xa63)]['y']=_0x2f112b,this['x']=(_0x5b8b0e[_0x3c5173(0x8b9)]-this[_0x3c5173(0x8b9)])/0x2,this['y']=_0x3598db[_0x3c5173(0x54b)]-this[_0x3c5173(0x54b)];}else this[_0x3c5173(0x903)]();}},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x93c)]=function(){const _0xe18498=_0x57e85a;if(this[_0xe18498(0xbfd)])return this[_0xe18498(0xbfd)];return this[_0xe18498(0xbfd)]=SceneManager[_0xe18498(0xd04)][_0xe18498(0x93c)](),this[_0xe18498(0xbfd)];},Window_PartyCommand[_0x57e85a(0x16f)][_0x57e85a(0x86b)]=function(){const _0x5888f8=_0x57e85a,_0x4ea397=VisuMZ['BattleCore'][_0x5888f8(0x478)][_0x5888f8(0x7f9)],_0x38e263=this[_0x5888f8(0x20f)]();switch(_0x38e263){case _0x5888f8(0x8d8):this[_0x5888f8(0xb41)][_0x5888f8(0x9a7)](_0x4ea397[_0x5888f8(0x842)]);break;case _0x5888f8(0x635):this[_0x5888f8(0xb41)][_0x5888f8(0x9a7)](_0x4ea397['HelpAutoBattle']);break;case'options':this[_0x5888f8(0xb41)][_0x5888f8(0x9a7)](_0x4ea397['HelpOptions']);break;case _0x5888f8(0x6b7):this['_helpWindow'][_0x5888f8(0x9a7)](_0x4ea397[_0x5888f8(0x228)]);break;default:this[_0x5888f8(0xb41)][_0x5888f8(0x9a7)]('');break;}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x71d)]=Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x84c)],Window_ActorCommand[_0x57e85a(0x16f)]['initialize']=function(_0x1697ce){const _0xc989b9=_0x57e85a;VisuMZ[_0xc989b9(0x734)][_0xc989b9(0x71d)][_0xc989b9(0xa23)](this,_0x1697ce),this[_0xc989b9(0x1c7)](_0x1697ce);},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x1c7)]=function(_0x589581){const _0x1e1c3f=_0x57e85a,_0x6bda3=new Rectangle(0x0,0x0,_0x589581['width'],_0x589581[_0x1e1c3f(0x54b)]);this[_0x1e1c3f(0x229)]=new Window_Base(_0x6bda3),this[_0x1e1c3f(0x229)][_0x1e1c3f(0x6a4)]=0x0,this['addChild'](this['_commandNameWindow']),this[_0x1e1c3f(0x661)]();},Window_ActorCommand['prototype'][_0x57e85a(0x78b)]=function(){const _0x2c78d7=_0x57e85a;Window_Command[_0x2c78d7(0x16f)][_0x2c78d7(0x78b)]['call'](this);if(this[_0x2c78d7(0x229)])this[_0x2c78d7(0x661)]();},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x661)]=function(){const _0x42f57e=_0x57e85a,_0x2ed68e=this[_0x42f57e(0x229)];_0x2ed68e[_0x42f57e(0x887)][_0x42f57e(0x896)]();const _0xe1f331=this[_0x42f57e(0x9d1)](this[_0x42f57e(0x8c8)]());if(_0xe1f331===_0x42f57e(0xa69)&&this[_0x42f57e(0xdf8)]()>0x0){const _0x3e8fce=this[_0x42f57e(0xbca)](this[_0x42f57e(0x8c8)]());let _0x3481ee=this['commandName'](this[_0x42f57e(0x8c8)]());_0x3481ee=_0x3481ee[_0x42f57e(0x795)](/\\I\[(\d+)\]/gi,''),_0x2ed68e[_0x42f57e(0x210)](),this[_0x42f57e(0x63f)](_0x3481ee,_0x3e8fce),this[_0x42f57e(0x5b2)](_0x3481ee,_0x3e8fce),this['commandNameWindowCenter'](_0x3481ee,_0x3e8fce);}},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x63f)]=function(_0x4326e4,_0x2369a4){},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x5b2)]=function(_0x58a23c,_0x461002){const _0x3b1ff5=this['_commandNameWindow'];_0x3b1ff5['drawText'](_0x58a23c,0x0,_0x461002['y'],_0x3b1ff5['innerWidth'],'center');},Window_ActorCommand['prototype'][_0x57e85a(0x160)]=function(_0x5a5599,_0x46d460){const _0x55ae66=_0x57e85a,_0x55fb6e=this['_commandNameWindow'],_0x581643=$gameSystem[_0x55ae66(0x7b2)](),_0x4e5e8b=_0x46d460['x']+Math[_0x55ae66(0x7f8)](_0x46d460[_0x55ae66(0x8b9)]/0x2)+_0x581643;_0x55fb6e['x']=_0x55fb6e[_0x55ae66(0x8b9)]/-0x2+_0x4e5e8b,_0x55fb6e['y']=Math[_0x55ae66(0x7f8)](_0x46d460[_0x55ae66(0x54b)]/0x2);},Window_ActorCommand[_0x57e85a(0x16f)]['makeCommandList']=function(){const _0x408141=_0x57e85a;if(!this['_actor'])return;const _0x38d04a=this['_actor'][_0x408141(0xdb7)]();for(const _0x1c2afa of _0x38d04a){if(_0x408141(0x609)!==_0x408141(0x8c1))this['makeBattleCommand'](_0x1c2afa[_0x408141(0x307)]()['trim']());else return _0x1c1f44[_0x408141(0x734)][_0x408141(0x478)][_0x408141(0xcab)]['SkillItemMiddleLayout'];}},Window_ActorCommand[_0x57e85a(0x16f)]['makeBattleCommand']=function(_0x4de248){const _0x2dcf73=_0x57e85a;_0x4de248==='ATTACK'&&(_0x2dcf73(0x53a)==='zdVLY'?(this[_0x2dcf73(0x25e)]=this[_0x2dcf73(0x25e)]||[],this['_onceParallelInterpreters'][_0x2dcf73(0xb45)](_0x3d949c)):this['addAttackCommand']());['STYPES',_0x2dcf73(0x603)][_0x2dcf73(0x3af)](_0x4de248)&&(_0x2dcf73(0x40a)!==_0x2dcf73(0xc9f)?this[_0x2dcf73(0xa67)]():(this[_0x2dcf73(0x9ec)](),this[_0x2dcf73(0xa77)]=null));_0x4de248===_0x2dcf73(0x974)&&(_0x2dcf73(0x810)===_0x2dcf73(0x810)?this[_0x2dcf73(0x178)]():this[_0x2dcf73(0x2fa)]=_0xd33a9);_0x4de248===_0x2dcf73(0x5ef)&&this[_0x2dcf73(0x204)]();_0x4de248==='ESCAPE'&&this['addEscapeCommand']();_0x4de248===_0x2dcf73(0x6fd)&&(_0x2dcf73(0x262)===_0x2dcf73(0x7de)?_0x502059=_0x3e3a24[_0x2dcf73(0x2df)]()['id']:this[_0x2dcf73(0x668)]());if(_0x4de248[_0x2dcf73(0x392)](/STYPE: (\d+)/i)){const _0x3f3360=Number(RegExp['$1']);this[_0x2dcf73(0x523)](_0x3f3360);}else{if(_0x4de248[_0x2dcf73(0x392)](/STYPE: (.*)/i)){if(_0x2dcf73(0xa26)===_0x2dcf73(0xa26)){const _0x18c6b2=DataManager[_0x2dcf73(0x442)](RegExp['$1']);this[_0x2dcf73(0x523)](_0x18c6b2);}else this[_0x2dcf73(0xdf7)](_0x2dcf73(0x7ae),this[_0x2dcf73(0x3f6)][_0x2dcf73(0xc81)](this));}}_0x4de248==='ALL\x20SKILLS'&&this['addSingleSkillCommands']();if(_0x4de248['match'](/SKILL: (\d+)/i)){if('CvfcL'===_0x2dcf73(0x233)){const _0x472b9d=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x472b9d]);}else{if(this[_0x2dcf73(0x53e)]!==_0x2dcf73(0xd1f))return this[_0x2dcf73(0xe15)](_0x215b1f);else return _0x3dc0c6[_0x2dcf73(0x546)](this[_0x2dcf73(0x2df)]())===_0x2dcf73(0x7f1)?_0x355384[_0x2dcf73(0x734)]['Game_Action_evalDamageFormula'][_0x2dcf73(0xa23)](this,_0x12dd7a):this[_0x2dcf73(0xaa4)](_0x4fbcdd);}}else{if(_0x4de248['match'](/SKILL: (.*)/i)){const _0x16e5d1=DataManager[_0x2dcf73(0x49e)](RegExp['$1']);this[_0x2dcf73(0x805)]($dataSkills[_0x16e5d1]);}}if(_0x4de248===_0x2dcf73(0x5c1)&&Imported[_0x2dcf73(0xc0b)]){if('esyPo'===_0x2dcf73(0xcb3)){if(_0x2a13d0[_0x2dcf73(0x7d1)]()&&!_0x2c36a6[_0x2dcf73(0xe14)]())return;const _0x284bdc=_0x3397e3['battler']();if(_0x284bdc&&_0x19cfb9[_0x2dcf73(0x7d1)]())this[_0x2dcf73(0xc14)]['addChild'](_0x284bdc);}else this[_0x2dcf73(0x944)]();}if([_0x2dcf73(0x5c3),_0x2dcf73(0xd85)][_0x2dcf73(0x3af)](_0x4de248)&&Imported[_0x2dcf73(0x4c7)]){if('WpBWP'===_0x2dcf73(0x9d7)){const _0x106e5c=this[_0x2dcf73(0x2df)]()['scope'];return _0x106e5c[_0x2dcf73(0x392)](/(?:RAND|RANDOM)/i);}else this[_0x2dcf73(0x9ee)]();}_0x4de248===_0x2dcf73(0x47e)&&Imported[_0x2dcf73(0x8b7)]&&this[_0x2dcf73(0x832)](!![]),_0x4de248==='GRID\x20MOVE'&&Imported[_0x2dcf73(0x65b)]&&this[_0x2dcf73(0x84f)]();},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x5a2)]=function(){const _0x58ac35=_0x57e85a,_0xe35421=$dataSkills[this[_0x58ac35(0x6c6)][_0x58ac35(0x704)]()];if(!_0xe35421)return;if(!this[_0x58ac35(0x377)](_0xe35421))return;const _0x24592a=this[_0x58ac35(0x6ac)](),_0x34a601=DataManager['battleCommandName'](_0xe35421),_0x49cebb=DataManager[_0x58ac35(0xcaa)](_0xe35421),_0x2b3154=_0x24592a===_0x58ac35(0x891)?_0x34a601:_0x58ac35(0x53c)[_0x58ac35(0x554)](_0x49cebb,_0x34a601);this['addCommand'](_0x2b3154,'attack',this[_0x58ac35(0x6c6)][_0x58ac35(0x415)]());},Window_ActorCommand['prototype']['addGuardCommand']=function(){const _0x544167=_0x57e85a,_0x9491da=$dataSkills[this[_0x544167(0x6c6)][_0x544167(0xc48)]()];if(!_0x9491da)return;if(!this['canAddSkillCommand'](_0x9491da))return;const _0x803b61=this[_0x544167(0x6ac)](),_0x6874a6=DataManager[_0x544167(0xade)](_0x9491da),_0x333427=DataManager[_0x544167(0xcaa)](_0x9491da),_0x42e159=_0x803b61===_0x544167(0x891)?_0x6874a6:_0x544167(0x53c)[_0x544167(0x554)](_0x333427,_0x6874a6);this[_0x544167(0x761)](_0x42e159,_0x544167(0xd9a),this['_actor'][_0x544167(0x3d4)]());},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x204)]=function(){const _0xd02cbf=_0x57e85a,_0x3ee79f=this[_0xd02cbf(0x6ac)](),_0x317d3b=VisuMZ['BattleCore'][_0xd02cbf(0x478)][_0xd02cbf(0x16c)][_0xd02cbf(0x19d)],_0x51476b=_0x3ee79f===_0xd02cbf(0x891)?TextManager[_0xd02cbf(0x2df)]:_0xd02cbf(0x53c)[_0xd02cbf(0x554)](_0x317d3b,TextManager[_0xd02cbf(0x2df)]),_0x2fba08=this['isItemCommandEnabled']();this[_0xd02cbf(0x761)](_0x51476b,'item',_0x2fba08);},Window_ActorCommand['prototype'][_0x57e85a(0x71c)]=function(){const _0xd9d9d7=_0x57e85a;return this[_0xd9d9d7(0x6c6)]&&this[_0xd9d9d7(0x6c6)][_0xd9d9d7(0xa8a)]();},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0xa67)]=function(){const _0x419a8c=_0x57e85a,_0x35610f=this[_0x419a8c(0x6c6)][_0x419a8c(0x243)]();for(const _0x1e2d68 of _0x35610f){'tmUtF'===_0x419a8c(0x4e1)?(_0x81f8da[_0x419a8c(0x734)][_0x419a8c(0x215)][_0x419a8c(0xa23)](this),_0x3fc6dc['isSceneBattle']()&&this[_0x419a8c(0x4c9)]('dead')):this[_0x419a8c(0x523)](_0x1e2d68);}},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x523)]=function(_0x40f0e5){const _0x283014=_0x57e85a;let _0x4583b9=$dataSystem[_0x283014(0x243)][_0x40f0e5];if(!_0x4583b9)return;let _0x106898=_0x4583b9;const _0x1b5fb8=this[_0x283014(0x6ac)]();if(_0x1b5fb8==='text')_0x283014(0x731)===_0x283014(0x731)?(_0x106898=_0x106898[_0x283014(0x795)](/\x1I\[(\d+)\]/gi,''),_0x106898=_0x106898[_0x283014(0x795)](/\\I\[(\d+)\]/gi,'')):this[_0x283014(0x89c)]=this[_0x283014(0x89c)]||[];else{if(!_0x4583b9['match'](/\\I\[(\d+)\]/i)){if(_0x283014(0x35d)!==_0x283014(0x6be)){const _0x4221a2=Imported[_0x283014(0xbaa)]?VisuMZ['SkillsStatesCore']['Settings'][_0x283014(0x8d4)]:VisuMZ[_0x283014(0x734)][_0x283014(0x478)][_0x283014(0x16c)],_0x26f1ca=$dataSystem[_0x283014(0x254)][_0x283014(0x3af)](_0x40f0e5),_0x4e73b1=_0x26f1ca?_0x4221a2[_0x283014(0x27d)]:_0x4221a2[_0x283014(0xbf1)];_0x106898=_0x283014(0x53c)[_0x283014(0x554)](_0x4e73b1,_0x4583b9);}else this[_0x283014(0x960)]();}}this[_0x283014(0x761)](_0x106898,_0x283014(0x94f),!![],_0x40f0e5);},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x26c)]=function(){const _0x5f3a0d=_0x57e85a,_0x231e94=this[_0x5f3a0d(0x6c6)][_0x5f3a0d(0x243)](),_0xa6eee4=this[_0x5f3a0d(0x6c6)][_0x5f3a0d(0x352)]();for(const _0x273008 of _0xa6eee4){if(!_0x273008)continue;if(Imported[_0x5f3a0d(0xbaa)]){if(this[_0x5f3a0d(0x87c)](_0x273008))continue;if(this[_0x5f3a0d(0x766)](_0x273008))continue;}else{if(!_0x231e94['includes'](_0x273008[_0x5f3a0d(0x6fc)])){if(_0x5f3a0d(0x5b3)===_0x5f3a0d(0x5b3))continue;else this[_0x5f3a0d(0xa9f)]=_0x5ec7b5[_0x5f3a0d(0xa9f)];}}this['addSingleSkillCommand'](_0x273008);}},Window_ActorCommand[_0x57e85a(0x16f)]['noSimilarSTypes']=function(_0x43984b){const _0x2f570f=_0x57e85a,_0xb8d178=this[_0x2f570f(0x6c6)][_0x2f570f(0x243)](),_0xb6f82c=_0xb8d178[_0x2f570f(0x1db)](_0x479cf9=>DataManager['getSkillTypes'](_0x43984b)[_0x2f570f(0x3af)](_0x479cf9));return _0xb6f82c[_0x2f570f(0xd36)]<=0x0;},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x766)]=function(_0x3ed79e){const _0x30ab24=_0x57e85a;if(Imported[_0x30ab24(0xbaa)]){if(_0x30ab24(0x6b2)==='xTUOE')_0x71a058[_0x30ab24(0xe00)](_0x266c1e);else{if(VisuMZ['SkillsStatesCore'][_0x30ab24(0x88f)]>=1.24){if(this[_0x30ab24(0x6c6)]){if(!VisuMZ['SkillsStatesCore'][_0x30ab24(0xb38)](this[_0x30ab24(0x6c6)],_0x3ed79e))return!![];if(!VisuMZ[_0x30ab24(0xdd5)][_0x30ab24(0xa6c)](this['_actor'],_0x3ed79e))return!![];if(!VisuMZ['SkillsStatesCore'][_0x30ab24(0x458)](this[_0x30ab24(0x6c6)],_0x3ed79e))return!![];}}else{if(_0x30ab24(0x2db)!==_0x30ab24(0x2db))_0x53d2b1[_0x30ab24(0x7b3)](0x0);else{if(!Window_SkillList[_0x30ab24(0x16f)][_0x30ab24(0xca0)][_0x30ab24(0xa23)](this,_0x3ed79e))return!![];if(!Window_SkillList['prototype'][_0x30ab24(0x626)]['call'](this,_0x3ed79e))return!![];if(!Window_SkillList[_0x30ab24(0x16f)][_0x30ab24(0x8c4)][_0x30ab24(0xa23)](this,_0x3ed79e))return!![];}}}}return![];},Window_ActorCommand['prototype'][_0x57e85a(0x805)]=function(_0x1e5d9){const _0x2c5800=_0x57e85a;if(!_0x1e5d9)return;if(!this[_0x2c5800(0x377)](_0x1e5d9))return;const _0x4a8c42=this[_0x2c5800(0x6ac)](),_0x3da381=DataManager[_0x2c5800(0xade)](_0x1e5d9),_0x694099=DataManager[_0x2c5800(0xcaa)](_0x1e5d9),_0x545048=_0x4a8c42===_0x2c5800(0x891)?_0x3da381:_0x2c5800(0x53c)[_0x2c5800(0x554)](_0x694099,_0x3da381),_0x427a7d=this[_0x2c5800(0x6c6)][_0x2c5800(0x42d)](_0x1e5d9);this['addCommand'](_0x545048,_0x2c5800(0x3a3),_0x427a7d,_0x1e5d9['id']);},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x377)]=function(_0x2ff78a){const _0xbe9455=_0x57e85a,_0x4835fa=_0x2ff78a[_0xbe9455(0x40f)];if(_0x4835fa[_0xbe9455(0x392)](/<COMMAND REQUIRE LEARN>/i)){if(_0xbe9455(0xb1a)!==_0xbe9455(0xb1a))return this[_0xbe9455(0x8f7)]()[_0xbe9455(0xd76)];else{if(!this[_0xbe9455(0x6c6)][_0xbe9455(0x4ba)](_0x2ff78a['id']))return![];}}if(_0x4835fa[_0xbe9455(0x392)](/<COMMAND REQUIRE ACCESS>/i)){if(!this['_actor'][_0xbe9455(0x35c)](_0x2ff78a['id']))return![];}const _0x107549=VisuMZ[_0xbe9455(0x734)]['createKeyJS'](_0x2ff78a,_0xbe9455(0x5af));if(VisuMZ[_0xbe9455(0x734)]['JS'][_0x107549]){if(!VisuMZ[_0xbe9455(0x734)]['JS'][_0x107549][_0xbe9455(0xa23)](this,this[_0xbe9455(0x6c6)],_0x2ff78a))return![];}return VisuMZ[_0xbe9455(0x734)][_0xbe9455(0x397)](_0x2ff78a);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x397)]=function(_0x355d08){const _0x9c76ea=_0x57e85a,_0x34bb6c=_0x355d08['note'];if(_0x34bb6c['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x330f82=JSON[_0x9c76ea(0x1ee)]('['+RegExp['$1'][_0x9c76ea(0x392)](/\d+/g)+']');for(const _0x1950c1 of _0x330f82){if(_0x9c76ea(0xba6)!==_0x9c76ea(0x69e)){if(!$gameSwitches[_0x9c76ea(0x3a6)](_0x1950c1))return![];}else _0xc1f471+=_0x192fc6[_0x9c76ea(0x7d1)]()?-_0x4355aa:_0x5ca1af,_0x11708e+=_0x392fba;}return!![];}if(_0x34bb6c[_0x9c76ea(0x392)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x35d585=JSON[_0x9c76ea(0x1ee)]('['+RegExp['$1'][_0x9c76ea(0x392)](/\d+/g)+']');for(const _0x32dc3b of _0x35d585){if(!$gameSwitches[_0x9c76ea(0x3a6)](_0x32dc3b))return![];}return!![];}if(_0x34bb6c[_0x9c76ea(0x392)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x9c76ea(0xc8a)!==_0x9c76ea(0x353)){const _0x4dabc0=JSON[_0x9c76ea(0x1ee)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x21a2fa of _0x4dabc0){if($gameSwitches['value'](_0x21a2fa))return!![];}return![];}else _0x1a3633[_0x9c76ea(0x632)]=_0x1d7cfe;}if(_0x34bb6c['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x9c76ea(0x311)===_0x9c76ea(0x311)){const _0x2b05af=JSON[_0x9c76ea(0x1ee)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x1f24c4 of _0x2b05af){if(!$gameSwitches[_0x9c76ea(0x3a6)](_0x1f24c4))return!![];}return![];}else{if(!_0x53b633[_0x9c76ea(0x4b2)]())return;_0x25abc9[_0x9c76ea(0x15e)](_0x34ccf1,_0x2be999);const _0x1cc5f8=_0x28fda4[_0x9c76ea(0xc21)](),_0x34a951=_0x26c1e1[_0x9c76ea(0x577)],_0x10bce8=_0x3e7920[_0x9c76ea(0xa77)],_0x5bdfb6=_0x11a78e[_0x9c76ea(0xc11)]?_0x2d1ea8[_0x9c76ea(0xc11)][_0x9c76ea(0x241)](0x0):[],_0xbc6f4f=_0x26f445['_logWindow'];if(!_0x1cc5f8||!_0x34a951||!_0x10bce8)return;if(!_0x34a951[_0x9c76ea(0x2df)]())return;if(_0x26bf87[_0x9c76ea(0xcfc)])_0xbc6f4f[_0x9c76ea(0x81f)](_0x10bce8,_0x34a951[_0x9c76ea(0x2df)]());_0x15e9e8[_0x9c76ea(0x5cf)]&&_0xbc6f4f[_0x9c76ea(0x5fa)](_0x9c76ea(0x7ec),_0x10bce8,_0x5bdfb6,!![]);if(_0x5829db['ActionStart'])_0xbc6f4f['push']('performActionStart',_0x10bce8,_0x34a951);if(_0x4324ec[_0x9c76ea(0x45a)])_0xbc6f4f[_0x9c76ea(0x5fa)](_0x9c76ea(0xd1d));if(_0x4dff69[_0x9c76ea(0x5dc)])_0xbc6f4f['push'](_0x9c76ea(0xab9),_0x10bce8,_0x34a951);if(_0x3aa3d2[_0x9c76ea(0xd52)])_0xbc6f4f[_0x9c76ea(0x5fa)](_0x9c76ea(0x8d7));_0x1cc5f8[_0x9c76ea(0x1f9)](_0x9c76ea(0x84e));}}if(_0x34bb6c[_0x9c76ea(0x392)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x389720=JSON[_0x9c76ea(0x1ee)]('['+RegExp['$1'][_0x9c76ea(0x392)](/\d+/g)+']');for(const _0x4c6750 of _0x389720){if(_0x9c76ea(0x463)===_0x9c76ea(0xb0f)){const _0xe7b307=this['itemLineRect'](_0x351ea2);this[_0x9c76ea(0x835)](),this[_0x9c76ea(0x86d)](this[_0x9c76ea(0x743)](_0x467854));const _0x22506c=this[_0x9c76ea(0x276)](_0x491b85),_0x470afd=this[_0x9c76ea(0x754)](_0x22506c)[_0x9c76ea(0x8b9)],_0x193b5e=_0xe7b307['x']+_0x3c570a['floor']((_0xe7b307[_0x9c76ea(0x8b9)]-_0x470afd)/0x2);this[_0x9c76ea(0xa50)](_0x22506c,_0x193b5e,_0xe7b307['y'],_0xe7b307[_0x9c76ea(0x8b9)]);}else{if(!$gameSwitches[_0x9c76ea(0x3a6)](_0x4c6750))return!![];}}return![];}if(_0x34bb6c[_0x9c76ea(0x392)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x784069=JSON[_0x9c76ea(0x1ee)]('['+RegExp['$1'][_0x9c76ea(0x392)](/\d+/g)+']');for(const _0x5612d3 of _0x784069){if($gameSwitches['value'](_0x5612d3))return![];}return!![];}return!![];},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0xcae)]=function(){const _0x400b20=_0x57e85a,_0x14ccfb=this[_0x400b20(0x6ac)](),_0x677ef=VisuMZ[_0x400b20(0x734)][_0x400b20(0x478)][_0x400b20(0x7f9)][_0x400b20(0x49a)],_0x715789=_0x14ccfb===_0x400b20(0x891)?TextManager[_0x400b20(0x6b7)]:_0x400b20(0x53c)['format'](_0x677ef,TextManager['escape']),_0x52a920=this['isEscapeCommandEnabled']();this[_0x400b20(0x761)](_0x715789,_0x400b20(0x6b7),_0x52a920);},Window_ActorCommand['prototype'][_0x57e85a(0xe0b)]=function(){const _0x1cb5f6=_0x57e85a;return BattleManager[_0x1cb5f6(0x350)]();},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x668)]=function(){const _0xbe68ce=_0x57e85a,_0x49813d=this[_0xbe68ce(0x6ac)](),_0xa7df8d=VisuMZ[_0xbe68ce(0x734)][_0xbe68ce(0x478)][_0xbe68ce(0x7f9)][_0xbe68ce(0xc57)],_0x4770bf=_0x49813d===_0xbe68ce(0x891)?TextManager[_0xbe68ce(0x635)]:_0xbe68ce(0x53c)['format'](_0xa7df8d,TextManager[_0xbe68ce(0x635)]),_0x37f858=this['isAutoBattleCommandEnabled']();this[_0xbe68ce(0x761)](_0x4770bf,_0xbe68ce(0x635),_0x37f858);},Window_ActorCommand[_0x57e85a(0x16f)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x5e8)]=function(){const _0x3f2f52=_0x57e85a;return VisuMZ[_0x3f2f52(0x734)][_0x3f2f52(0x478)]['ActorCmd'][_0x3f2f52(0x5f1)];},Window_ActorCommand['prototype'][_0x57e85a(0xa52)]=function(_0x2eedad){const _0x130b93=_0x57e85a,_0x5ad2c8=this[_0x130b93(0x9d1)](_0x2eedad);if(_0x5ad2c8==='iconText')_0x130b93(0x1a0)===_0x130b93(0x1a0)?this[_0x130b93(0x636)](_0x2eedad):this[_0x130b93(0x84c)](...arguments);else _0x5ad2c8===_0x130b93(0xa69)?_0x130b93(0x963)===_0x130b93(0x583)?(this[_0x130b93(0x395)]=!this[_0x130b93(0xb9b)][_0x130b93(0xcf4)](),!this['_appeared']&&(this['opacity']=0x0)):this[_0x130b93(0x8cb)](_0x2eedad):Window_Command[_0x130b93(0x16f)]['drawItem'][_0x130b93(0xa23)](this,_0x2eedad);this['drawSingleSkillCost'](_0x2eedad);},Window_ActorCommand[_0x57e85a(0x16f)]['commandStyle']=function(){const _0x28cbd6=_0x57e85a;return VisuMZ['BattleCore'][_0x28cbd6(0x478)][_0x28cbd6(0x16c)][_0x28cbd6(0x536)];},Window_ActorCommand['prototype'][_0x57e85a(0x9d1)]=function(_0x40547a){const _0x557b74=_0x57e85a;if(_0x40547a<0x0)return _0x557b74(0x891);const _0x15ed24=this[_0x557b74(0x6ac)]();if(_0x15ed24!=='auto')return _0x15ed24;else{if(this[_0x557b74(0xdf8)]()>0x0){const _0x4c5ba4=this[_0x557b74(0x276)](_0x40547a);if(_0x4c5ba4['match'](/\\I\[(\d+)\]/i)){const _0x2d6c6e=this[_0x557b74(0xbca)](_0x40547a),_0x42d8f0=this[_0x557b74(0x754)](_0x4c5ba4)[_0x557b74(0x8b9)];if(_0x42d8f0<=_0x2d6c6e[_0x557b74(0x8b9)]){if(_0x557b74(0x93d)===_0x557b74(0x6c0)){if(!_0x573b57[_0x557b74(0x4b2)]())return;_0x4c0e94[_0x557b74(0x15e)](_0x26d9f5,_0x42400e);const _0x35808a=_0x74bec3[_0x557b74(0xc21)](),_0x5bc099=_0x553572[_0x557b74(0xdd4)](_0x2af24a['Targets']),_0x48e222=_0x1a2ec4(_0x34fb34['SkillID']||0x1),_0x3213f9=_0x31142a[_0x48e222],_0x4ff2b7=_0x48459c['Mirror'];if(!_0x35808a)return;if(!_0x3213f9)return;let _0x2070c0=_0x3213f9[_0x557b74(0x68e)];_0x543681[_0x557b74(0x986)](_0x5bc099,_0x2070c0,_0x4ff2b7),_0x281079['WaitForAnimation']&&_0x35808a[_0x557b74(0x1f9)](_0x557b74(0x479));}else return _0x557b74(0x95c);}else return _0x557b74(0xa69);}}}return _0x557b74(0x891);},Window_ActorCommand[_0x57e85a(0x16f)]['drawItemStyleIconText']=function(_0x23e704){const _0x1c482b=_0x57e85a,_0x14dcc8=this['itemLineRect'](_0x23e704),_0x161641=this[_0x1c482b(0x276)](_0x23e704),_0x360d8b=this[_0x1c482b(0x754)](_0x161641)[_0x1c482b(0x8b9)];this[_0x1c482b(0x86d)](this[_0x1c482b(0x743)](_0x23e704));const _0x15ced7=this[_0x1c482b(0x5e8)]();if(_0x15ced7===_0x1c482b(0x862))this[_0x1c482b(0xa50)](_0x161641,_0x14dcc8['x']+_0x14dcc8['width']-_0x360d8b,_0x14dcc8['y'],_0x360d8b);else{if(_0x15ced7===_0x1c482b(0xc31)){const _0x1cd3ab=_0x14dcc8['x']+Math['floor']((_0x14dcc8[_0x1c482b(0x8b9)]-_0x360d8b)/0x2);this['drawTextEx'](_0x161641,_0x1cd3ab,_0x14dcc8['y'],_0x360d8b);}else this[_0x1c482b(0xa50)](_0x161641,_0x14dcc8['x'],_0x14dcc8['y'],_0x360d8b);}},Window_ActorCommand['prototype'][_0x57e85a(0x8cb)]=function(_0xdea951){const _0x2b0efa=_0x57e85a;this['commandName'](_0xdea951)['match'](/\\I\[(\d+)\]/i);const _0x2e5ead=Number(RegExp['$1'])||0x0,_0x56b980=this['itemLineRect'](_0xdea951),_0x55aa15=_0x56b980['x']+Math[_0x2b0efa(0x7f8)]((_0x56b980['width']-ImageManager[_0x2b0efa(0xc15)])/0x2),_0x4e93e2=_0x56b980['y']+(_0x56b980[_0x2b0efa(0x54b)]-ImageManager[_0x2b0efa(0x15d)])/0x2;this[_0x2b0efa(0xaa0)](_0x2e5ead,_0x55aa15,_0x4e93e2);},Window_ActorCommand[_0x57e85a(0x16f)]['drawSingleSkillCost']=function(_0x346773){const _0x1ff0b8=_0x57e85a;if(!(VisuMZ[_0x1ff0b8(0x734)]['Settings'][_0x1ff0b8(0x16c)][_0x1ff0b8(0x884)]??!![]))return;const _0x45e141=this[_0x1ff0b8(0x89b)](_0x346773);if(![_0x1ff0b8(0xa2b),_0x1ff0b8(0xd9a),_0x1ff0b8(0x3a3)][_0x1ff0b8(0x3af)](_0x45e141))return;const _0x593363=this[_0x1ff0b8(0xbca)](_0x346773);let _0x580073=null;if(_0x45e141===_0x1ff0b8(0xa2b))_0x580073=$dataSkills[this['_actor'][_0x1ff0b8(0x704)]()];else _0x45e141===_0x1ff0b8(0xd9a)?_0x580073=$dataSkills[this[_0x1ff0b8(0x6c6)][_0x1ff0b8(0xc48)]()]:'PXtxx'!==_0x1ff0b8(0xa80)?(this['_selectionEffectCount']++,_0x3c8fa4[_0x1ff0b8(0x868)]%0x1e<0xf?_0x3962cb[_0x1ff0b8(0xaac)]([0xff,0xff,0xff,0x40]):_0x1991cf['setBlendColor']([0x0,0x0,0x0,0x0])):_0x580073=$dataSkills[this[_0x1ff0b8(0xd54)][_0x346773]['ext']];this[_0x1ff0b8(0xa1f)](this[_0x1ff0b8(0x6c6)],_0x580073,_0x593363['x'],_0x593363['y'],_0x593363[_0x1ff0b8(0x8b9)]);},Window_ActorCommand[_0x57e85a(0x16f)]['drawSkillCost']=function(_0x4323ff,_0x2f31bd,_0x3f0ea,_0x3ceff9,_0x8fd024){const _0x323599=_0x57e85a;if(!_0x2f31bd)return;Imported[_0x323599(0xbaa)]?Window_Command['prototype'][_0x323599(0xa1f)][_0x323599(0xa23)](this,_0x4323ff,_0x2f31bd,_0x3f0ea,_0x3ceff9,_0x8fd024):_0x323599(0xa89)===_0x323599(0x685)?(_0x5e576d[_0x323599(0x734)][_0x323599(0x773)][_0x323599(0xa23)](this),this[_0x323599(0x37e)]()):Window_SkillList[_0x323599(0x16f)][_0x323599(0xa1f)]['call'](this,_0x2f31bd,_0x3f0ea,_0x3ceff9,_0x8fd024);},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x639)]=function(){},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0xa13)]=function(){const _0x466591=_0x57e85a;Window_Command['prototype'][_0x466591(0xa13)][_0x466591(0xa23)](this);const _0x78e1aa=this[_0x466591(0x93c)]();_0x78e1aa===_0x466591(0x515)&&this[_0x466591(0x903)]();},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x93c)]=function(){const _0x3d94d3=_0x57e85a;if(this['_battleLayoutStyle'])return this[_0x3d94d3(0xbfd)];return this[_0x3d94d3(0xbfd)]=SceneManager['_scene']['battleLayoutStyle'](),this['_battleLayoutStyle'];},VisuMZ[_0x57e85a(0x734)]['Window_ActorCommand_setup']=Window_ActorCommand[_0x57e85a(0x16f)]['setup'],Window_ActorCommand['prototype'][_0x57e85a(0xb62)]=function(_0x406981){const _0x82e2d9=_0x57e85a,_0x1880be=this['battleLayoutStyle']();if(_0x406981&&['xp','portrait'][_0x82e2d9(0x3af)](_0x1880be))_0x82e2d9(0xe04)!=='oLmXT'?(this['_battlerContainer']=new _0x345f47(),this[_0x82e2d9(0x8af)]['addChild'](this['_battlerContainer'])):this['resizeWindowXPStyle'](_0x406981);else _0x406981&&['border'][_0x82e2d9(0x3af)](_0x1880be)&&(_0x82e2d9(0x8cc)===_0x82e2d9(0x8cc)?(this[_0x82e2d9(0x4ad)](_0x406981),this[_0x82e2d9(0x903)]()):this['startMotion'](_0x5417d1[_0x82e2d9(0x8f7)]()[_0x82e2d9(0xab7)]||'walk'));VisuMZ[_0x82e2d9(0x734)]['Window_ActorCommand_setup'][_0x82e2d9(0xa23)](this,_0x406981);if(_0x406981&&$gameTroop[_0x82e2d9(0x8a1)]()[_0x82e2d9(0xd36)]>0x0&&_0x406981[_0x82e2d9(0x3ab)]()){if('EfeqL'!==_0x82e2d9(0x72c))_0x406981[_0x82e2d9(0x3ab)]()[_0x82e2d9(0x47f)]();else{if(!_0x4ec396['isSceneBattle']())return;if(!_0x389f1c[_0x82e2d9(0x272)])return;_0x4fdc27[_0x82e2d9(0x15e)](_0x4af27a,_0x44f4d9);const _0xfb9375=_0x682a43[_0x82e2d9(0x90d)]();_0xfb9375[_0x82e2d9(0xc53)]=_0x3b6aff['Setting'];}}},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x31b)]=function(_0x5aba14){const _0x266f6f=_0x57e85a,_0x29a5ef=VisuMZ['BattleCore'][_0x266f6f(0x478)][_0x266f6f(0xcab)][_0x266f6f(0xbdf)],_0x5d6166=Math[_0x266f6f(0x92a)](Graphics[_0x266f6f(0x418)]/0x3),_0x4e4ecb=Math[_0x266f6f(0x92a)](Graphics['boxWidth']/$gameParty[_0x266f6f(0x57d)]()['length']),_0x2f81b5=Math[_0x266f6f(0xde7)](Math[_0x266f6f(0x16e)](_0x5d6166,_0x4e4ecb),_0x29a5ef),_0x5b0f70=this[_0x266f6f(0xae8)](VisuMZ[_0x266f6f(0x734)]['Settings'][_0x266f6f(0xcab)][_0x266f6f(0xddf)]),_0x391198=Math[_0x266f6f(0x7f8)]((Graphics[_0x266f6f(0x418)]-Graphics[_0x266f6f(0x8b9)])/0x2),_0x53b3bb=Graphics[_0x266f6f(0x418)]-_0x391198,_0x1c8ab4=(Math[_0x266f6f(0x92a)](_0x4e4ecb*_0x5aba14[_0x266f6f(0x8c8)]())+Math[_0x266f6f(0x92a)]((_0x4e4ecb-_0x2f81b5)/0x2))[_0x266f6f(0x1fc)](_0x391198,_0x53b3bb-_0x2f81b5),_0x162aa8=Math[_0x266f6f(0x92a)](SceneManager[_0x266f6f(0xd04)][_0x266f6f(0x912)]['y']-_0x5b0f70);this[_0x266f6f(0xc16)](_0x1c8ab4,_0x162aa8,_0x2f81b5,_0x5b0f70),this[_0x266f6f(0x9dd)](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x4ad)]=function(_0x4bf570){const _0x4dc67c=_0x57e85a,_0x26b48c=SceneManager[_0x4dc67c(0xd04)][_0x4dc67c(0x244)]();this[_0x4dc67c(0xc16)](_0x26b48c['x'],_0x26b48c['y'],_0x26b48c[_0x4dc67c(0x8b9)],_0x26b48c[_0x4dc67c(0x54b)]),this['createContents'](),this[_0x4dc67c(0x337)](0x0);},Window_ActorCommand['prototype'][_0x57e85a(0x984)]=function(){const _0x3d8c8a=_0x57e85a;if(this['_dimmerSprite']){const _0x41c6da=this[_0x3d8c8a(0x284)][_0x3d8c8a(0x632)],_0x2cb28e=this[_0x3d8c8a(0x8b9)]-0x8,_0x495efa=this[_0x3d8c8a(0x54b)],_0xa542d8=this[_0x3d8c8a(0x4b9)],_0x2547c0=ColorManager[_0x3d8c8a(0xba0)](),_0x17aa7c=ColorManager[_0x3d8c8a(0x9de)]();this[_0x3d8c8a(0x284)]['x']=0x4,_0x41c6da[_0x3d8c8a(0x923)](_0x2cb28e,_0x495efa),_0x41c6da['gradientFillRect'](0x0,0x0,_0x2cb28e,_0xa542d8,_0x17aa7c,_0x2547c0,!![]),_0x41c6da['fillRect'](0x0,_0xa542d8,_0x2cb28e,_0x495efa-_0xa542d8*0x2,_0x2547c0),_0x41c6da[_0x3d8c8a(0x2e8)](0x0,_0x495efa-_0xa542d8,_0x2cb28e,_0xa542d8,_0x2547c0,_0x17aa7c,!![]),this['_dimmerSprite'][_0x3d8c8a(0xe1d)](0x0,0x0,_0x2cb28e,_0x495efa);}},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x86b)]=function(){const _0x23c6cb=_0x57e85a;if(!this[_0x23c6cb(0x6c6)])return;const _0x2d57dc=VisuMZ['BattleCore'][_0x23c6cb(0x478)][_0x23c6cb(0x16c)],_0x41e8de=this[_0x23c6cb(0x20f)]();switch(_0x41e8de){case _0x23c6cb(0xa2b):this['setHelpWindowItem']($dataSkills[this[_0x23c6cb(0x6c6)][_0x23c6cb(0x704)]()]);break;case _0x23c6cb(0xd9a):this['setHelpWindowItem']($dataSkills[this[_0x23c6cb(0x6c6)][_0x23c6cb(0xc48)]()]);break;case _0x23c6cb(0x94f):const _0x125a9e=_0x2d57dc['HelpSkillType'],_0xa6f359=_0x125a9e[_0x23c6cb(0x554)]($dataSystem[_0x23c6cb(0x243)][this[_0x23c6cb(0xb94)]()]);this[_0x23c6cb(0xb41)][_0x23c6cb(0x9a7)](_0xa6f359);break;case _0x23c6cb(0x3a3):this[_0x23c6cb(0xa46)]($dataSkills[this[_0x23c6cb(0xb94)]()]);break;case _0x23c6cb(0x2df):this[_0x23c6cb(0xb41)][_0x23c6cb(0x9a7)](_0x2d57dc[_0x23c6cb(0xb26)]);break;case _0x23c6cb(0x6b7):this[_0x23c6cb(0xb41)][_0x23c6cb(0x9a7)](_0x2d57dc['HelpEscape']);break;case _0x23c6cb(0x635):this[_0x23c6cb(0xb41)][_0x23c6cb(0x9a7)](_0x2d57dc[_0x23c6cb(0x763)]);break;default:this['_helpWindow'][_0x23c6cb(0x9a7)]('');break;}},Window_ActorCommand['prototype']['selectLast']=function(){const _0x327901=_0x57e85a;this[_0x327901(0x5e3)](0x0);if(this[_0x327901(0x6c6)]&&ConfigManager[_0x327901(0xc5b)]){if(_0x327901(0xa9a)==='TWeHa'){const _0xfb416d=_0x4f0329[_0x327901(0x546)](this['_item']),_0x1b4edf=_0x2e77b9[_0x327901(0x684)][_0xfb416d];if(!_0x1b4edf)return this[_0x327901(0x66d)]();return _0x1b4edf['DamageDisplay'][_0x327901(0xa23)](this);}else{const _0x5c8f99=this[_0x327901(0x6c6)]['lastCommandSymbol']();this[_0x327901(0xe0d)](_0x5c8f99);if(_0x5c8f99===_0x327901(0x94f)){const _0x16eba6=this[_0x327901(0x6c6)]['lastBattleSkill']();if(_0x16eba6){const _0x384c21=this[_0x327901(0x559)](_0x327901(0x94f),_0x16eba6[_0x327901(0x6fc)]);this[_0x327901(0x6d3)](_0x384c21||0x0);}}else{if(_0x5c8f99==='singleSkill'){if('DzJaa'!=='DzJaa')_0x456d25['BattleCore'][_0x327901(0x2e9)][_0x327901(0xa23)](this);else{const _0x3f9bef=this[_0x327901(0x6c6)][_0x327901(0x384)]();if(_0x3f9bef){if(_0x327901(0x758)!==_0x327901(0xb66)){const _0x1826ae=this[_0x327901(0x559)]('singleSkill',_0x3f9bef['id']);this[_0x327901(0x6d3)](_0x1826ae||0x0);}else this[_0x327901(0x4c9)]('guard');}}}}}}},Window_ActorCommand[_0x57e85a(0x16f)][_0x57e85a(0x559)]=function(_0x115bcf,_0x473bff){const _0x33f17d=_0x57e85a;return this['_list'][_0x33f17d(0xacd)](_0x5ec97d=>_0x5ec97d[_0x33f17d(0x750)]===_0x115bcf&&_0x5ec97d[_0x33f17d(0x271)]===_0x473bff);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xa0c)]=Window_BattleStatus['prototype'][_0x57e85a(0x84c)],Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x84c)]=function(_0x4127e6){const _0x5af2df=_0x57e85a;VisuMZ[_0x5af2df(0x734)][_0x5af2df(0xa0c)]['call'](this,_0x4127e6),this[_0x5af2df(0x4a8)](),this['createAttachmentSprites']();},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x93c)]=function(){const _0x455ba6=_0x57e85a;if(this['_battleLayoutStyle'])return this[_0x455ba6(0xbfd)];return this[_0x455ba6(0xbfd)]=SceneManager['_scene'][_0x455ba6(0x93c)](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x4a8)]=function(){const _0x4ac49e=_0x57e85a;this['frameVisible']=this[_0x4ac49e(0x64d)]();const _0x388b87=VisuMZ[_0x4ac49e(0x734)][_0x4ac49e(0x478)]['BattleLayout'];_0x388b87[_0x4ac49e(0x4db)]&&(this[_0x4ac49e(0x6a4)]=0x0);},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x64d)]=function(){const _0x220082=_0x57e85a,_0x4e8396=VisuMZ[_0x220082(0x734)]['Settings'][_0x220082(0xcab)];if(_0x4e8396[_0x220082(0x63e)])return!![];const _0x6215d6=this[_0x220082(0x93c)]();switch(_0x6215d6){case _0x220082(0x7df):case _0x220082(0x515):return!![];break;case _0x220082(0xd1f):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x765)]=function(){const _0x42eaef=_0x57e85a;if(this[_0x42eaef(0x64d)]())return 0x0;else{if(_0x42eaef(0xabc)===_0x42eaef(0xb5a)){if(this[_0x42eaef(0x5a1)]===_0x42eaef(0x711)){if(_0x255a7f[_0x42eaef(0x30a)]())return![];}return _0x1c9635['BattleCore'][_0x42eaef(0x695)]['call'](this);}else return 0xa;}},Window_BattleStatus['prototype'][_0x57e85a(0x99d)]=function(){const _0xda1752=_0x57e85a,_0x1182bd=this['battleLayoutStyle']();switch(_0x1182bd){case _0xda1752(0x7df):return 0x1;break;case'xp':case'portrait':return $gameParty['battleMembers']()[_0xda1752(0xd36)];break;case _0xda1752(0xd1f):default:return $gameParty[_0xda1752(0x9f7)]();break;}},Window_BattleStatus['prototype'][_0x57e85a(0x7e0)]=function(){const _0x7a6bad=_0x57e85a,_0x420831=this[_0x7a6bad(0x93c)]();switch(_0x420831){case _0x7a6bad(0x7df):return Window_StatusBase['prototype'][_0x7a6bad(0x7e0)][_0x7a6bad(0xa23)](this);break;case _0x7a6bad(0xd1f):case'xp':case _0x7a6bad(0x801):default:return this[_0x7a6bad(0x419)];break;}},Window_BattleStatus['prototype'][_0x57e85a(0xde0)]=function(){const _0x3082e7=_0x57e85a,_0x357596=this[_0x3082e7(0x93c)]();switch(_0x357596){case _0x3082e7(0x7df):return Window_StatusBase[_0x3082e7(0x16f)][_0x3082e7(0xde0)][_0x3082e7(0xa23)](this);break;case _0x3082e7(0xd1f):case'xp':case _0x3082e7(0x801):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x57e85a(0x9af)]=function(){const _0x46ebb4=_0x57e85a;this[_0x46ebb4(0x64d)]()?_0x46ebb4(0x9a9)==='oeiia'?Window_StatusBase['prototype'][_0x46ebb4(0x9af)][_0x46ebb4(0xa23)](this):this[_0x46ebb4(0xcd9)](0x1):this[_0x46ebb4(0x4b9)]=0x8;},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x2d8)]=function(){const _0x30ba94=_0x57e85a,_0x4cd81d=VisuMZ['BattleCore'][_0x30ba94(0x478)][_0x30ba94(0xcab)];_0x4cd81d[_0x30ba94(0x63e)]?_0x30ba94(0xbab)!==_0x30ba94(0x6ce)?this['windowskin']=ImageManager[_0x30ba94(0x95e)](_0x4cd81d[_0x30ba94(0x63e)]):_0x122bf1=!_0x4da7c5:Window_StatusBase[_0x30ba94(0x16f)][_0x30ba94(0x2d8)][_0x30ba94(0xa23)](this);},Window_BattleStatus[_0x57e85a(0x16f)]['drawItemBackground']=function(_0x2509a2){const _0x177587=_0x57e85a,_0x322c63=VisuMZ[_0x177587(0x734)][_0x177587(0x478)][_0x177587(0xcab)];if(_0x322c63[_0x177587(0x2ad)])return;Window_StatusBase[_0x177587(0x16f)][_0x177587(0xa21)][_0x177587(0xa23)](this,_0x2509a2);},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0xd75)]=function(){this['_requestRefresh']=!![];},Window_BattleStatus['prototype'][_0x57e85a(0xa02)]=function(){const _0x4968c0=_0x57e85a;Window_StatusBase['prototype'][_0x4968c0(0xa02)][_0x4968c0(0xa23)](this),this[_0x4968c0(0x435)](),this[_0x4968c0(0x552)]();if(this[_0x4968c0(0x93c)]()===_0x4968c0(0x515))this[_0x4968c0(0x6e4)]();},Window_BattleStatus['prototype'][_0x57e85a(0x435)]=function(){const _0x3c577c=_0x57e85a;if($gameTemp[_0x3c577c(0x3e5)]())this['preparePartyRefresh'](),this[_0x3c577c(0x30d)]=![],$gameTemp[_0x3c577c(0x1a7)]();else{if(this[_0x3c577c(0x30d)]){if('KvYdv'!==_0x3c577c(0x42f))this[_0x3c577c(0x30d)]=![],this['refresh'](),this[_0x3c577c(0x6f1)]();else return 0x0;}}},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x216)]=function(){const _0x3a5e77=_0x57e85a;Window_StatusBase[_0x3a5e77(0x16f)][_0x3a5e77(0x216)][_0x3a5e77(0xa23)](this);if(!$gameSystem[_0x3a5e77(0xe14)]())this[_0x3a5e77(0xa6a)]();},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x639)]=function(){const _0x274b98=_0x57e85a;if(this[_0x274b98(0xd77)]===Window_BattleStatus)return;Window_StatusBase[_0x274b98(0x16f)][_0x274b98(0x639)][_0x274b98(0xa23)](this);},Window_BattleStatus['prototype'][_0x57e85a(0x975)]=function(_0x550bf2){const _0x389c3f=_0x57e85a,_0x56d6ae=this[_0x389c3f(0x93c)]();switch(_0x56d6ae){case'xp':case _0x389c3f(0x801):break;case _0x389c3f(0xd1f):case'list':case'border':default:return Window_StatusBase[_0x389c3f(0x16f)][_0x389c3f(0x975)][_0x389c3f(0xa23)](this,_0x550bf2);break;}},VisuMZ[_0x57e85a(0x734)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x2aa)],Window_BattleStatus['prototype'][_0x57e85a(0x2aa)]=function(_0x4805f8){const _0x16c825=_0x57e85a,_0x32fd75=this[_0x16c825(0x93c)]();switch(_0x32fd75){case'list':this['drawItemImageListStyle'](_0x4805f8);break;case'xp':this[_0x16c825(0x9c9)](_0x4805f8);break;case'portrait':this[_0x16c825(0x686)](_0x4805f8);break;case'default':case _0x16c825(0x515):default:VisuMZ[_0x16c825(0x734)][_0x16c825(0x6fa)][_0x16c825(0xa23)](this,_0x4805f8);break;}},Window_BattleStatus['prototype']['drawItemStatus']=function(_0x3c96fd){const _0x2cc37f=_0x57e85a,_0x53989b=this['battleLayoutStyle']();if(!$gameSystem[_0x2cc37f(0xe14)]())this[_0x2cc37f(0xddc)](_0x3c96fd);switch(_0x53989b){case _0x2cc37f(0x7df):this[_0x2cc37f(0x823)](_0x3c96fd);break;case'xp':case _0x2cc37f(0x801):case _0x2cc37f(0xd1f):case _0x2cc37f(0x515):default:this[_0x2cc37f(0xa33)](_0x3c96fd);break;}},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x797)]=function(){const _0x310101=_0x57e85a,_0x1eeea3=this[_0x310101(0x93c)]();if(['xp'][_0x310101(0x3af)](_0x1eeea3)&&!$gameSystem[_0x310101(0xe14)]()){this[_0x310101(0x181)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x310101(0x16f)][_0x310101(0x797)]['call'](this);},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0xddc)]=function(_0x435ba7){const _0x1e0168=_0x57e85a,_0x5a524f=this[_0x1e0168(0x2ee)](_0x435ba7)[_0x1e0168(0x3ab)]();if(!_0x5a524f)return;const _0x4d72a2=this[_0x1e0168(0x93c)](),_0x4ef8ae=this['itemRect'](_0x435ba7);let _0x1eb12e=Math[_0x1e0168(0x92a)](_0x4ef8ae['x']+_0x4ef8ae[_0x1e0168(0x8b9)]/0x2)+this[_0x1e0168(0x4b9)];[_0x1e0168(0x7df)][_0x1e0168(0x3af)](_0x4d72a2)&&(_0x1e0168(0x1e3)!==_0x1e0168(0x1e3)?this[_0x1e0168(0x194)]():(_0x1eb12e=_0x4ef8ae[_0x1e0168(0x8b9)]/$gameParty[_0x1e0168(0x57d)]()['length'],_0x1eb12e*=_0x435ba7,_0x1eb12e+=_0x4ef8ae['width']/$gameParty[_0x1e0168(0x57d)]()[_0x1e0168(0xd36)]/0x2));let _0x12c5a3=Math[_0x1e0168(0x92a)](this[_0x1e0168(0x66e)](_0x435ba7,_0x5a524f,_0x4ef8ae));_0x5a524f[_0x1e0168(0x1b1)](_0x1eb12e,_0x12c5a3),this['addChildAt'](_0x5a524f,0x1),_0x5a524f[_0x1e0168(0x216)](),this[_0x1e0168(0x188)](),this[_0x1e0168(0x6f1)]();},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x66e)]=function(_0x1e8807,_0x2d6c93,_0x149827){const _0x23b1d6=_0x57e85a,_0x3e8ef3=VisuMZ['BattleCore'][_0x23b1d6(0x478)][_0x23b1d6(0xcab)],_0xcb0d21=this[_0x23b1d6(0x93c)]();if(_0xcb0d21==='xp'){const _0x4cfecf=_0x3e8ef3[_0x23b1d6(0xcca)];switch(_0x4cfecf[_0x23b1d6(0x2bc)]()['trim']()){case _0x23b1d6(0xa78):return _0x149827[_0x23b1d6(0x54b)]-_0x2d6c93[_0x23b1d6(0x7a9)]['height']/0x4;break;case _0x23b1d6(0xc31):const _0x29b86e=_0x3e8ef3[_0x23b1d6(0xbd0)];return(_0x149827[_0x23b1d6(0x54b)]+(_0x2d6c93[_0x23b1d6(0x54b)]||_0x29b86e))/0x2;break;case _0x23b1d6(0x25c):return 0x0;case _0x23b1d6(0x7a3):default:return this[_0x23b1d6(0x715)](_0x149827);break;}}else{if(_0xcb0d21==='portrait'){}}return _0x2d6c93['height'];},Sprite_Name[_0x57e85a(0x16f)][_0x57e85a(0xbd2)]=function(){return 0x24;},Sprite_Name[_0x57e85a(0x16f)][_0x57e85a(0x1e1)]=function(){const _0x2be67b=_0x57e85a,_0x1b9213=this['name'](),_0x297785=this['bitmapWidth'](),_0x516222=this[_0x2be67b(0xbd2)]();this['setupFont'](),this[_0x2be67b(0x632)][_0x2be67b(0x896)](),this['bitmap']['drawTextTopAligned'](_0x1b9213,0x4,0x0,_0x297785,_0x516222,_0x2be67b(0x326));},Bitmap[_0x57e85a(0x16f)][_0x57e85a(0xd71)]=function(_0x50511d,_0x1095e3,_0x4eb2b6,_0x37e62f,_0x161ab8,_0x4f8e01){const _0x151852=_0x57e85a;TextManager['parseLocalizedText']&&(_0x50511d=TextManager[_0x151852(0xd74)](_0x50511d));const _0xf8757f=this['context'],_0x708adb=_0xf8757f[_0x151852(0xd98)];_0x37e62f=_0x37e62f||0xffffffff;let _0x267e62=_0x1095e3,_0x6d152e=Math[_0x151852(0x92a)](_0x4eb2b6+0x18/0x2+this[_0x151852(0x28a)]*0.35);_0x4f8e01===_0x151852(0xc31)&&(_0x267e62+=_0x37e62f/0x2),_0x4f8e01==='right'&&(_0x267e62+=_0x37e62f),_0xf8757f[_0x151852(0x619)](),_0xf8757f[_0x151852(0x3f2)]=this[_0x151852(0x1fd)](),_0xf8757f['textAlign']=_0x4f8e01,_0xf8757f[_0x151852(0x285)]='alphabetic',_0xf8757f['globalAlpha']=0x1,this[_0x151852(0x85a)](_0x50511d,_0x267e62,_0x6d152e,_0x37e62f),_0xf8757f[_0x151852(0xd98)]=_0x708adb,this[_0x151852(0x414)](_0x50511d,_0x267e62,_0x6d152e,_0x37e62f),_0xf8757f[_0x151852(0x66b)](),this['_baseTexture'][_0x151852(0xa02)]();},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x715)]=function(_0xd6ee4){const _0x5114f2=_0x57e85a;return this[_0x5114f2(0xa3e)](_0xd6ee4)-this[_0x5114f2(0x198)]();},Window_BattleStatus['prototype'][_0x57e85a(0x95a)]=function(_0x236428){const _0x43ef66=_0x57e85a;if(!VisuMZ[_0x43ef66(0x734)]['Settings'][_0x43ef66(0xcab)]['ShowFacesListStyle'])return;const _0x499ee8=this['actor'](_0x236428),_0x5c8bad=this[_0x43ef66(0x8e0)](_0x236428);_0x5c8bad[_0x43ef66(0x8b9)]=ImageManager['faceWidth'],_0x5c8bad[_0x43ef66(0x54b)]-=0x2,this['drawActorFace'](_0x499ee8,_0x5c8bad['x']+0x1,_0x5c8bad['y']+0x1,_0x5c8bad[_0x43ef66(0x8b9)],_0x5c8bad[_0x43ef66(0x54b)]);},Window_BattleStatus['prototype']['drawItemStatusListStyle']=function(_0x58f9ef){const _0x56a1bb=_0x57e85a,_0x4a2038=VisuMZ[_0x56a1bb(0x734)]['Settings'][_0x56a1bb(0xcab)],_0x3e5ee7=$dataSystem[_0x56a1bb(0x59a)]?0x4:0x3,_0x265ba3=_0x3e5ee7*0x80+(_0x3e5ee7-0x1)*0x8+0x4,_0x237acf=this['actor'](_0x58f9ef),_0x40bf14=this[_0x56a1bb(0x8e0)](_0x58f9ef);let _0x22c9e5=_0x40bf14['x']+this[_0x56a1bb(0x4b9)];_0x4a2038[_0x56a1bb(0xb05)]?'gvxVe'!=='rQVYj'?_0x22c9e5=_0x40bf14['x']+ImageManager['faceWidth']+0x8:(_0x5870c8&&_0x3d0043['isActor']()&&_0x14ebfd[_0x56a1bb(0x628)](),this[_0x56a1bb(0x8d9)]()):_0x22c9e5+=ImageManager['iconWidth'];const _0x2a22a8=Math[_0x56a1bb(0x92a)](Math[_0x56a1bb(0x16e)](_0x40bf14['x']+_0x40bf14['width']-_0x265ba3,_0x22c9e5)),_0x26910c=Math[_0x56a1bb(0x92a)](_0x40bf14['y']+(_0x40bf14[_0x56a1bb(0x54b)]-Sprite_Name[_0x56a1bb(0x16f)][_0x56a1bb(0xbd2)]())/0x2),_0x3cb0bf=Math['round'](_0x2a22a8-ImageManager['iconWidth']/0x2-0x4),_0x3dfca7=Math['round'](_0x40bf14['y']+(_0x40bf14[_0x56a1bb(0x54b)]-ImageManager[_0x56a1bb(0x15d)])/0x2+ImageManager['iconHeight']/0x2);let _0x2c6b15=_0x2a22a8+0x88;const _0x4e2942=_0x26910c;this[_0x56a1bb(0x4f3)](_0x237acf,_0x2a22a8-0x4+(_0x4a2038[_0x56a1bb(0x700)]||0x0),_0x26910c+(_0x4a2038[_0x56a1bb(0x1ac)]||0x0)),this['placeActorName'](_0x237acf,_0x2a22a8+(_0x4a2038[_0x56a1bb(0x255)]||0x0),_0x26910c+(_0x4a2038[_0x56a1bb(0x6a5)]||0x0)),this[_0x56a1bb(0xc99)](_0x237acf,_0x3cb0bf+(_0x4a2038[_0x56a1bb(0x1aa)]||0x0),_0x3dfca7+(_0x4a2038[_0x56a1bb(0x950)]||0x0)),this[_0x56a1bb(0xbff)](_0x237acf,'hp',_0x2c6b15+0x88*0x0+(_0x4a2038[_0x56a1bb(0x781)]||0x0),_0x4e2942+(_0x4a2038[_0x56a1bb(0xa16)]||0x0)),this['placeGauge'](_0x237acf,'mp',_0x2c6b15+0x88*0x1+(_0x4a2038[_0x56a1bb(0x343)]||0x0),_0x4e2942+(_0x4a2038[_0x56a1bb(0x61c)]||0x0)),$dataSystem[_0x56a1bb(0x59a)]&&this['placeGauge'](_0x237acf,'tp',_0x2c6b15+0x88*0x2+(_0x4a2038[_0x56a1bb(0x7c1)]||0x0),_0x4e2942+(_0x4a2038[_0x56a1bb(0x294)]||0x0));},Window_BattleStatus['prototype'][_0x57e85a(0x9c9)]=function(_0x5d4b7f){const _0xf9bb0e=_0x57e85a;if(!$gameSystem['isSideView']())return;VisuMZ[_0xf9bb0e(0x734)][_0xf9bb0e(0x6fa)][_0xf9bb0e(0xa23)](this,_0x5d4b7f);},Window_BattleStatus[_0x57e85a(0x16f)]['drawItemStatusXPStyle']=function(_0x123138){const _0x268024=_0x57e85a,_0x3b27f3=VisuMZ['BattleCore'][_0x268024(0x478)]['BattleLayout'],_0x5383df=this[_0x268024(0x2ee)](_0x123138),_0x6043b6=this['itemRect'](_0x123138),_0x2337ea=Math[_0x268024(0x92a)](_0x6043b6['x']+(_0x6043b6[_0x268024(0x8b9)]-0x80)/0x2),_0x47f061=this['nameY'](_0x6043b6);let _0x3ea282=_0x2337ea-ImageManager['iconWidth']/0x2-0x4,_0x5a8f47=_0x47f061+ImageManager['iconHeight']/0x2;_0x3ea282-ImageManager[_0x268024(0xc15)]/0x2<_0x6043b6['x']&&(_0x3ea282=_0x2337ea+ImageManager[_0x268024(0xc15)]/0x2-0x4,_0x5a8f47=_0x47f061-ImageManager[_0x268024(0x15d)]/0x2);const _0x302389=_0x2337ea,_0x5a78b4=this[_0x268024(0xa3e)](_0x6043b6);this[_0x268024(0x4f3)](_0x5383df,_0x2337ea+(_0x3b27f3[_0x268024(0x700)]||0x0),_0x47f061+(_0x3b27f3[_0x268024(0x1ac)]||0x0)),this[_0x268024(0xbd7)](_0x5383df,_0x2337ea+(_0x3b27f3[_0x268024(0x255)]||0x0),_0x47f061+(_0x3b27f3[_0x268024(0x6a5)]||0x0)),this[_0x268024(0xc99)](_0x5383df,_0x3ea282+(_0x3b27f3[_0x268024(0x1aa)]||0x0),_0x5a8f47+(_0x3b27f3['StateIconOffsetY']||0x0)),this[_0x268024(0xbff)](_0x5383df,'hp',_0x302389+(_0x3b27f3[_0x268024(0x781)]||0x0),_0x5a78b4+(_0x3b27f3['HpGaugeOffsetY']||0x0)),this['placeGauge'](_0x5383df,'mp',_0x302389+(_0x3b27f3['MpGaugeOffsetX']||0x0),_0x5a78b4+this['gaugeLineHeight']()+(_0x3b27f3[_0x268024(0x61c)]||0x0)),$dataSystem[_0x268024(0x59a)]&&this[_0x268024(0xbff)](_0x5383df,'tp',_0x302389+(_0x3b27f3[_0x268024(0x7c1)]||0x0),_0x5a78b4+this[_0x268024(0x198)]()*0x2+(_0x3b27f3[_0x268024(0x294)]||0x0));},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x881)]=function(_0x10e952){const _0x42e4c1=_0x57e85a;if(!VisuMZ[_0x42e4c1(0x734)][_0x42e4c1(0x478)][_0x42e4c1(0xcab)][_0x42e4c1(0x3e3)])return![];if(_0x10e952['getBattlePortrait']())return!![];return Imported[_0x42e4c1(0xbe2)]&&_0x10e952[_0x42e4c1(0xb8d)]();},Game_Actor[_0x57e85a(0x16f)][_0x57e85a(0x176)]=function(){const _0x337afd=_0x57e85a;if(this[_0x337afd(0x2ee)]()[_0x337afd(0x40f)][_0x337afd(0x392)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x337afd(0x2ee)]()[_0x337afd(0x40f)][_0x337afd(0x392)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x337afd(0xa74)!=='gdkOY')return Number(RegExp['$1']);else{_0x46e0c4[_0x337afd(0x78f)](_0x19e9b0);if(_0x13f543)_0x3137ef[_0x337afd(0xb8a)]();}}}return 0x0;},Game_Actor['prototype'][_0x57e85a(0x41e)]=function(){const _0x100e6f=_0x57e85a;if(this[_0x100e6f(0x2ee)]()[_0x100e6f(0x40f)][_0x100e6f(0x392)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x100e6f(0x2ee)]()[_0x100e6f(0x40f)][_0x100e6f(0x392)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x100e6f(0x854)===_0x100e6f(0x854))return Number(RegExp['$2']);else this[_0x100e6f(0xa44)]();}}return 0x0;},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x686)]=function(_0x290d11){const _0x34f450=_0x57e85a,_0x55d122=this[_0x34f450(0x2ee)](_0x290d11);if(this[_0x34f450(0x881)](_0x55d122)){const _0x2c7443=_0x34f450(0xb3b)['format'](_0x55d122[_0x34f450(0xa06)]()),_0x19ecf1=this[_0x34f450(0x26e)](_0x2c7443,Sprite),_0x513446=_0x55d122['getBattlePortraitFilename']();if(_0x513446!==''){if(_0x34f450(0x6ee)==='rovVm')_0x19ecf1[_0x34f450(0x632)]=ImageManager['loadPicture'](_0x513446);else{const _0x253345=this[_0x34f450(0x6c6)][_0x34f450(0x384)]();if(_0x253345){const _0x217f52=this[_0x34f450(0x559)](_0x34f450(0x3a3),_0x253345['id']);this[_0x34f450(0x6d3)](_0x217f52||0x0);}}}else _0x19ecf1['bitmap']=ImageManager[_0x34f450(0x23d)];const _0x2885e9=this['itemRect'](_0x290d11);_0x19ecf1[_0x34f450(0x70e)]['x']=0.5,_0x19ecf1[_0x34f450(0x70e)]['y']=0x1;let _0x464d3e=Math[_0x34f450(0x92a)](_0x2885e9['x']+_0x2885e9[_0x34f450(0x8b9)]/0x2)+this['padding'];_0x464d3e+=_0x55d122[_0x34f450(0x176)]();let _0x99f15b=Math['round'](this['height']);_0x99f15b+=_0x55d122[_0x34f450(0x41e)](),_0x19ecf1[_0x34f450(0xc16)](_0x464d3e,_0x99f15b);const _0x22bc5e=VisuMZ[_0x34f450(0x734)][_0x34f450(0x478)]['BattleLayout'][_0x34f450(0x5db)];_0x19ecf1['scale']['x']=_0x22bc5e,_0x19ecf1[_0x34f450(0xa63)]['y']=_0x22bc5e,_0x19ecf1[_0x34f450(0x216)]();}else{const _0xe2aa1e=this[_0x34f450(0x16a)](_0x290d11);this['drawActorFace'](_0x55d122,_0xe2aa1e['x'],_0xe2aa1e['y'],_0xe2aa1e[_0x34f450(0x8b9)],_0xe2aa1e[_0x34f450(0x54b)]);}},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x26e)]=function(_0x5cf85b,_0x2f6553){const _0x41a2e5=_0x57e85a,_0x13bb3c=this[_0x41a2e5(0x324)];if(_0x13bb3c[_0x5cf85b])return _0x13bb3c[_0x5cf85b];else{const _0x166410=new _0x2f6553();return _0x13bb3c[_0x5cf85b]=_0x166410,this[_0x41a2e5(0xd19)](_0x166410),this[_0x41a2e5(0xd19)](this[_0x41a2e5(0x576)]),_0x166410;}},Window_BattleStatus[_0x57e85a(0x16f)]['_createClientArea']=function(){const _0x4112cd=_0x57e85a;this[_0x4112cd(0x641)](),this[_0x4112cd(0xb37)](),Window_StatusBase[_0x4112cd(0x16f)][_0x4112cd(0x55b)][_0x4112cd(0xa23)](this),this[_0x4112cd(0x5d9)]();},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x641)]=function(){const _0x1d3470=_0x57e85a;this['_cursorArea']=new Sprite(),this[_0x1d3470(0x576)][_0x1d3470(0x283)]=[new PIXI['filters'][(_0x1d3470(0x4fe))]()],this[_0x1d3470(0x576)][_0x1d3470(0x398)]=new Rectangle(),this['_cursorArea'][_0x1d3470(0xc16)](this[_0x1d3470(0x1f0)],this[_0x1d3470(0x1f0)]),this[_0x1d3470(0x67f)](this[_0x1d3470(0x576)]);},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0xb37)]=function(){const _0x3154d9=_0x57e85a;this['_effectsContainer']=new Sprite(),this['addChild'](this[_0x3154d9(0x5a4)]);},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x188)]=function(){const _0x1b3dab=_0x57e85a;this[_0x1b3dab(0x5a4)]&&this['addChild'](this[_0x1b3dab(0x5a4)]);},Window_BattleStatus[_0x57e85a(0x16f)]['_createDamageContainer']=function(){const _0x445074=_0x57e85a;this[_0x445074(0x62b)]=new Sprite(),this[_0x445074(0x67f)](this[_0x445074(0x62b)]);},Window_BattleStatus[_0x57e85a(0x16f)]['_createCursorSprite']=function(){const _0x5c6f63=_0x57e85a;this[_0x5c6f63(0x221)]=new Sprite();for(let _0x17946c=0x0;_0x17946c<0x9;_0x17946c++){this[_0x5c6f63(0x221)][_0x5c6f63(0x67f)](new Sprite());}this['_cursorArea']['addChild'](this[_0x5c6f63(0x221)]);},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x8f3)]=function(){const _0x5bc2ab=_0x57e85a;Window_StatusBase[_0x5bc2ab(0x16f)][_0x5bc2ab(0x8f3)][_0x5bc2ab(0xa23)](this),this[_0x5bc2ab(0x245)]();},Window_BattleStatus[_0x57e85a(0x16f)]['_updateCursorArea']=function(){const _0x552a9a=_0x57e85a,_0x39a150=this[_0x552a9a(0x1f0)];this[_0x552a9a(0x576)]['move'](_0x39a150,_0x39a150),this['_cursorArea']['x']=_0x39a150-this[_0x552a9a(0x19a)]['x'],this[_0x552a9a(0x576)]['y']=_0x39a150-this[_0x552a9a(0x19a)]['y'],this[_0x552a9a(0x9f5)]>0x0&&this[_0x552a9a(0x419)]>0x0?'tbpxX'!==_0x552a9a(0xcfd)?_0x2483de=_0x5e9978:this[_0x552a9a(0x576)][_0x552a9a(0x5b6)]=this[_0x552a9a(0x1d2)]():this[_0x552a9a(0x576)]['visible']=![];},Window_BattleStatus['prototype']['_updateFilterArea']=function(){const _0x592df4=_0x57e85a;Window_StatusBase[_0x592df4(0x16f)][_0x592df4(0x394)]['call'](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x2af)]=function(){const _0x236b08=_0x57e85a,_0x149a53=this[_0x236b08(0x576)][_0x236b08(0x877)][_0x236b08(0x8bb)](new Point(0x0,0x0)),_0x5682de=this[_0x236b08(0x576)][_0x236b08(0x398)];_0x5682de['x']=_0x149a53['x']+this['origin']['x'],_0x5682de['y']=_0x149a53['y']+this['origin']['y'],_0x5682de['width']=this[_0x236b08(0x9f5)],_0x5682de[_0x236b08(0x54b)]=this[_0x236b08(0x419)];},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x7a2)]=function(_0x50b212){const _0x44a881=_0x57e85a;if(this[_0x44a881(0x93c)]()!==_0x44a881(0x801))return;this['drawItemImagePortraitStyle'](_0x50b212[_0x44a881(0x8c8)]());},Window_BattleStatus['prototype'][_0x57e85a(0x631)]=function(_0x285cc0,_0x56d42a){const _0xa46a56=_0x57e85a;if(!this['_damageContainer'])return;if(!_0x285cc0)return;if(!_0x56d42a)return;const _0x509f81=this[_0xa46a56(0x8e0)](_0x56d42a['index']());_0x509f81['x']+=_0x509f81['width']/0x2+this[_0xa46a56(0x4b9)],_0x285cc0['x']=_0x509f81['x'],_0x285cc0['y']=_0x509f81['y'],this[_0xa46a56(0x62b)][_0xa46a56(0x67f)](_0x285cc0);},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0xc55)]=function(_0x1628fc){const _0x1f1682=_0x57e85a;if(!this[_0x1f1682(0x62b)])return;if(!_0x1628fc)return;this[_0x1f1682(0x62b)]['removeChild'](_0x1628fc);},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x6e4)]=function(){const _0x33399d=_0x57e85a;if(!this[_0x33399d(0xd35)]())return;if(!this[_0x33399d(0xa1e)])this[_0x33399d(0x2f0)]();this['prepareBorderActor'](),this[_0x33399d(0xdfd)]();},Window_BattleStatus[_0x57e85a(0x16f)]['isBorderStylePortraitShown']=function(){const _0xfc8ca=_0x57e85a;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager['isSceneBattle']())return![];return VisuMZ['BattleCore']['Settings'][_0xfc8ca(0xcab)][_0xfc8ca(0x718)];},Window_BattleStatus['prototype'][_0x57e85a(0x2f0)]=function(){const _0x553b97=_0x57e85a;this[_0x553b97(0xa1e)]=new Sprite();const _0x5418a6=SceneManager[_0x553b97(0xd04)],_0x1c3287=_0x5418a6[_0x553b97(0xe22)][_0x553b97(0x9b6)](_0x5418a6[_0x553b97(0xd6e)]);_0x5418a6[_0x553b97(0x660)](this[_0x553b97(0xa1e)],_0x1c3287),this[_0x553b97(0xa1e)][_0x553b97(0x70e)]['x']=0.5,this[_0x553b97(0xa1e)][_0x553b97(0x70e)]['y']=0x1;const _0xec5076=VisuMZ[_0x553b97(0x734)]['Settings'][_0x553b97(0xcab)]['PortraitScaleBorderStyle'];this[_0x553b97(0xa1e)]['scale']['x']=_0xec5076,this[_0x553b97(0xa1e)]['scale']['y']=_0xec5076,this['_borderPortraitSprite']['y']=this['y']+this[_0x553b97(0x54b)],this['_borderPortraitDuration']=0x0;},Window_BattleStatus['prototype'][_0x57e85a(0x336)]=function(){const _0x290713=_0x57e85a;return BattleManager[_0x290713(0x5dd)]();},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x2e6)]=function(){const _0x56d03d=_0x57e85a;this[_0x56d03d(0xa1e)][_0x56d03d(0x5b6)]=this['isBorderPortraitSpriteVisible']();const _0xb9c3a2=BattleManager[_0x56d03d(0x2ee)](),_0x2e47aa=_0xb9c3a2?_0xb9c3a2[_0x56d03d(0x8eb)]()||'':'';if(_0xb9c3a2===this[_0x56d03d(0xa1e)]['actor']&&_0x2e47aa===this[_0x56d03d(0xa1e)][_0x56d03d(0xc85)])return;this[_0x56d03d(0xa1e)]['actor']=_0xb9c3a2||this[_0x56d03d(0xa1e)][_0x56d03d(0x2ee)],this[_0x56d03d(0xa1e)][_0x56d03d(0xc85)]=_0x2e47aa;if(!_0xb9c3a2)return;else{if(_0x2e47aa===''){this[_0x56d03d(0xa1e)][_0x56d03d(0x632)]=ImageManager[_0x56d03d(0x23d)],this[_0x56d03d(0xa1e)][_0x56d03d(0xc85)]='';return;}else{if(_0x56d03d(0xcc1)!==_0x56d03d(0x320)){const _0x3f3d5f=ImageManager[_0x56d03d(0xa97)](_0x2e47aa);this[_0x56d03d(0xa1e)]['opacity']=0x0,_0x3f3d5f[_0x56d03d(0x53d)](this[_0x56d03d(0x613)][_0x56d03d(0xc81)](this,_0x3f3d5f));}else{let _0xb9ed3a=_0x414f2a[_0x56d03d(0x734)][_0x56d03d(0x4ca)][_0x56d03d(0xa23)](this,_0x55aab9,_0xe0aa45);return this[_0x56d03d(0x8a3)](_0xb9ed3a);}}}},Window_BattleStatus['prototype'][_0x57e85a(0x613)]=function(_0x2b5598){const _0x49bcf7=_0x57e85a;this['_borderPortraitDuration']=0x14,this[_0x49bcf7(0xa1e)][_0x49bcf7(0x632)]=_0x2b5598;if(SceneManager[_0x49bcf7(0xd04)][_0x49bcf7(0x184)]()){if(_0x49bcf7(0x27a)!=='RUvyZ')return 0x0;else this[_0x49bcf7(0xa1e)]['x']=0x0,this[_0x49bcf7(0x21d)]=Math['ceil'](_0x2b5598[_0x49bcf7(0x8b9)]/0x2);}else this[_0x49bcf7(0xa1e)]['x']=this[_0x49bcf7(0x8b9)],this['_borderPortraitTargetX']=this['width']*0x3/0x4;this[_0x49bcf7(0xa1e)]['opacity']=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x49bcf7(0x54b)];const _0x4f46e1=BattleManager['actor']();_0x4f46e1&&(this[_0x49bcf7(0x21d)]+=_0x4f46e1[_0x49bcf7(0x176)](),this[_0x49bcf7(0xa1e)]['y']+=_0x4f46e1[_0x49bcf7(0x41e)]());},Window_BattleStatus[_0x57e85a(0x16f)]['updateBorderSprite']=function(){const _0x2811dd=_0x57e85a;if(this[_0x2811dd(0x5df)]>0x0){const _0x15911f=this[_0x2811dd(0x5df)],_0x3c8e0e=this[_0x2811dd(0xa1e)];_0x3c8e0e['x']=(_0x3c8e0e['x']*(_0x15911f-0x1)+this[_0x2811dd(0x21d)])/_0x15911f,_0x3c8e0e[_0x2811dd(0x6a4)]=(_0x3c8e0e[_0x2811dd(0x6a4)]*(_0x15911f-0x1)+0xff)/_0x15911f,this[_0x2811dd(0x5df)]--;}},Window_BattleStatus[_0x57e85a(0x16f)]['updateEffectContainers']=function(){const _0x3cbf8d=_0x57e85a;return;this[_0x3cbf8d(0x5a4)]&&(this[_0x3cbf8d(0x5a4)]['x']=this['x'],this[_0x3cbf8d(0x5a4)]['y']=this['y']),this[_0x3cbf8d(0x62b)]&&(_0x3cbf8d(0xbe9)==='XRwpk'?this[_0x3cbf8d(0xcae)]():(this[_0x3cbf8d(0x62b)]['x']=this['x'],this[_0x3cbf8d(0x62b)]['y']=this['y']));},Window_BattleStatus['prototype'][_0x57e85a(0xa43)]=function(){const _0x327c3=_0x57e85a,_0x57eab1=VisuMZ['BattleCore'][_0x327c3(0x478)][_0x327c3(0xcab)];if(_0x57eab1[_0x327c3(0xda5)]){const _0x6abc1c=new Sprite();_0x6abc1c[_0x327c3(0x632)]=ImageManager[_0x327c3(0x95e)](_0x57eab1[_0x327c3(0xda5)]),_0x6abc1c['x']=_0x57eab1['StatusWindowAttachmentBackOffsetX']||0x0,_0x6abc1c['y']=_0x57eab1[_0x327c3(0xc7e)]||0x0,this['addChildToBack'](_0x6abc1c),this[_0x327c3(0x246)]=_0x6abc1c;}if(_0x57eab1[_0x327c3(0xc4f)]){const _0x587fc3=new Sprite();_0x587fc3[_0x327c3(0x632)]=ImageManager[_0x327c3(0x95e)](_0x57eab1[_0x327c3(0xc4f)]),_0x587fc3['x']=_0x57eab1['StatusWindowAttachmentFrontOffsetX']||0x0,_0x587fc3['y']=_0x57eab1[_0x327c3(0x4e0)]||0x0,this[_0x327c3(0x67f)](_0x587fc3),this[_0x327c3(0xd66)]=_0x587fc3;}},Window_BattleStatus[_0x57e85a(0x16f)][_0x57e85a(0x6f1)]=function(){const _0x5d8a33=_0x57e85a;this[_0x5d8a33(0xd66)]&&this[_0x5d8a33(0x67f)](this['_frontAttachmentSprite']);if(this['_backAttachmentSprite']){if('RhyFX'===_0x5d8a33(0x286))this[_0x5d8a33(0xd19)](this[_0x5d8a33(0x246)]);else return _0xe64290[_0x5d8a33(0x376)]?_0x216d96['getInputButtonString']('cancel'):_0x42fbc3['BattleCore']['Settings'][_0x5d8a33(0x447)]['AutoBattleCancel'];}},Window_BattleActor[_0x57e85a(0x16f)][_0x57e85a(0x1d7)]=function(){const _0x3b6784=_0x57e85a;return this[_0x3b6784(0xa62)]();},Window_BattleActor['prototype'][_0x57e85a(0xa62)]=function(){const _0x3390be=_0x57e85a,_0x21214a=BattleManager['inputtingAction']();if(!_0x21214a)return!![];if(!_0x21214a[_0x3390be(0x2df)]())return!![];const _0x12f294=this[_0x3390be(0x2ee)](this[_0x3390be(0x8c8)]()),_0x3c15a9=_0x21214a[_0x3390be(0x2df)]()['note'];if(_0x21214a[_0x3390be(0x8d5)]()){if(_0x12f294===BattleManager['actor']())return![];}if(_0x21214a[_0x3390be(0xbbf)]()){if(!_0x12f294[_0x3390be(0xd6d)]())return![];}if(_0x21214a[_0x3390be(0xd3b)]()){if('tCueQ'!=='tCueQ'){if(!this[_0x3390be(0x67c)]())return;if(!this[_0x3390be(0x937)])return;if(this[_0x3390be(0xbc8)]===_0x1911f7)return;this['_targetAngle']=_0x5da942,this[_0x3390be(0xc65)]=_0x5ddb7c,this[_0x3390be(0xa9e)]=_0x335de7,this[_0x3390be(0x564)]=_0x11eaaa||'Linear',this[_0x3390be(0x19f)]=_0x132c0c,this[_0x3390be(0x19f)]===_0x5e285e&&(this[_0x3390be(0x19f)]=!![]),_0x365e44<=0x0&&(this['_currentAngle']=_0x2ecf86,this[_0x3390be(0x19f)]&&(this[_0x3390be(0xbc8)]=0x0,this[_0x3390be(0x83d)]=0x0));}else{if(!_0x12f294[_0x3390be(0x2e0)]())return![];}}return!![];},Window_BattleActor[_0x57e85a(0x16f)][_0x57e85a(0x24c)]=function(_0x47b4f7){const _0xd3f8f4=_0x57e85a;this[_0xd3f8f4(0x2fa)]=_0x47b4f7;},VisuMZ['BattleCore'][_0x57e85a(0x90b)]=Window_BattleActor[_0x57e85a(0x16f)]['processTouch'],Window_BattleActor[_0x57e85a(0x16f)][_0x57e85a(0x5cc)]=function(){const _0x81564d=_0x57e85a;Window_BattleStatus[_0x81564d(0x16f)]['processTouch'][_0x81564d(0xa23)](this);if(this[_0x81564d(0x2fa)]){if(_0x81564d(0xd37)!=='FSKTa'){if(!_0x6e5bab['BattleCore']['Settings']['BattleLayout'][_0x81564d(0x3e3)])return![];if(_0x4a9e72['getBattlePortrait']())return!![];return _0x4d0f74[_0x81564d(0xbe2)]&&_0x5f34be[_0x81564d(0xb8d)]();}else this[_0x81564d(0x2bf)]();}else{if(_0x81564d(0x537)!==_0x81564d(0x41c))VisuMZ[_0x81564d(0x734)][_0x81564d(0x90b)][_0x81564d(0xa23)](this);else return _0x59df8e[_0x81564d(0x8a1)]()[_0x81564d(0x1db)](_0x2ce24e=>_0x2ce24e!==_0x5d53eb);}},Window_BattleActor['prototype'][_0x57e85a(0x2bf)]=function(){const _0xd2ac25=_0x57e85a,_0x20ee9c=SceneManager[_0xd2ac25(0xd04)][_0xd2ac25(0x973)];if(!_0x20ee9c)return;this[_0xd2ac25(0x89f)]=![];const _0x35f2c9=this[_0xd2ac25(0xb67)]();if(_0x35f2c9>=0x0){this['select'](_0x35f2c9);if(TouchInput[_0xd2ac25(0x62e)]()){const _0x3f42e3=$gameParty[_0xd2ac25(0x828)]()[_0x35f2c9],_0x51fd07=_0x20ee9c[_0xd2ac25(0xc42)][_0xd2ac25(0x9b6)](_0x3f42e3);if(_0x51fd07>=0x0){if(_0xd2ac25(0xc93)===_0xd2ac25(0xc93))_0x20ee9c[_0xd2ac25(0x6d3)](_0x51fd07),_0x20ee9c[_0xd2ac25(0x73f)]();else{return;this['_effectsContainer']&&(this['_effectsContainer']['x']=this['x'],this[_0xd2ac25(0x5a4)]['y']=this['y']),this[_0xd2ac25(0x62b)]&&(this[_0xd2ac25(0x62b)]['x']=this['x'],this[_0xd2ac25(0x62b)]['y']=this['y']);}}}}},Window_BattleActor[_0x57e85a(0x16f)][_0x57e85a(0x46d)]=function(){const _0x56fafb=_0x57e85a;this[_0x56fafb(0x2fa)]&&(_0x56fafb(0xbfe)!==_0x56fafb(0xbfe)?this[_0x56fafb(0x5fa)]('clearActiveWeaponSet',_0x344c31):(this[_0x56fafb(0x85c)]++,this[_0x56fafb(0x75e)]=!![]));const _0x3e7710=Window_BattleStatus[_0x56fafb(0x16f)][_0x56fafb(0x46d)][_0x56fafb(0xa23)](this);return this[_0x56fafb(0x2fa)]&&(this[_0x56fafb(0x75e)]=![]),_0x3e7710;},VisuMZ['BattleCore']['Window_BattleActor_show']=Window_BattleActor[_0x57e85a(0x16f)]['show'],Window_BattleActor['prototype'][_0x57e85a(0x216)]=function(){const _0x49b382=_0x57e85a;VisuMZ[_0x49b382(0x734)]['Window_BattleActor_show']['call'](this);const _0x5bc8fc=BattleManager['inputtingAction']();if(_0x5bc8fc){if(_0x49b382(0xd3a)==='fgGiE')return this[_0x49b382(0xd09)]=this['_lineHeight']||_0x1e677b[_0x49b382(0x16f)][_0x49b382(0x4ab)]()||0x24,this['_lineHeight']*0x4;else{const _0x1e8424=$gameParty[_0x49b382(0x8a1)]();if(_0x5bc8fc[_0x49b382(0x7d2)]()&&_0x1e8424['length']>0x1){if(_0x49b382(0x8ad)!=='fzTvf')this[_0x49b382(0xdf7)](_0x49b382(0x7ae),this['selectAllActors']['bind'](this));else{if(this[_0x49b382(0x5b6)]&&_0x4b5b06[_0x49b382(0x62e)]()){const _0x159cd4=this[_0x49b382(0xb67)]();if(_0x159cd4>=0x0){const _0x49c2a2=this[_0x49b382(0x1c0)]()?_0x49b382(0x7ae):_0x49b382(0x8be);_0x4c540a[_0x49b382(0x2c6)](_0x49c2a2);}}}}}}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x77f)]=Window_BattleActor[_0x57e85a(0x16f)][_0x57e85a(0x639)],Window_BattleActor['prototype'][_0x57e85a(0x639)]=function(){const _0x5add36=_0x57e85a;VisuMZ[_0x5add36(0x734)][_0x5add36(0x77f)][_0x5add36(0xa23)](this),delete this[_0x5add36(0x872)][_0x5add36(0x8be)],delete this[_0x5add36(0x872)]['pagedown'];},Window_BattleActor[_0x57e85a(0x16f)][_0x57e85a(0x3f6)]=function(){const _0x1a9115=_0x57e85a,_0x21e0aa=BattleManager[_0x1a9115(0xdab)]();if(_0x21e0aa)_0x21e0aa['setTargetBattlerKey'](_0x1a9115(0x940));this['processOk']();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x837)]=Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0x84c)],Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0x84c)]=function(_0x58daac){const _0x294170=_0x57e85a;this[_0x294170(0x688)]=null,VisuMZ[_0x294170(0x734)][_0x294170(0x837)][_0x294170(0xa23)](this,_0x58daac);if(Imported[_0x294170(0x670)]){if(VisuMZ['AggroControlSystem'][_0x294170(0x88f)]<1.12){let _0x481530='';_0x481530+=_0x294170(0x8a5),_0x481530+=_0x294170(0x354),_0x481530+=_0x294170(0x27f),alert(_0x481530),SceneManager[_0x294170(0x4f1)]();}}},Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0x99d)]=function(){const _0xb04c11=_0x57e85a;return this[_0xb04c11(0xdf8)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x222)]=Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0x216)],Window_BattleEnemy['prototype'][_0x57e85a(0x216)]=function(){const _0x5b458a=_0x57e85a;VisuMZ[_0x5b458a(0x734)]['Window_BattleEnemy_show'][_0x5b458a(0xa23)](this),this['y']=Graphics[_0x5b458a(0x54b)]*0xa;if(this[_0x5b458a(0xc58)]()){if(_0x5b458a(0xc72)===_0x5b458a(0x744)){const _0x34e3d3=_0x5d3352[_0x5b458a(0x312)](_0x53b159);_0x34e3d3[_0x5b458a(0x53d)](this[_0x5b458a(0xbfb)][_0x5b458a(0xc81)](this,_0x34e3d3));}else this[_0x5b458a(0x36b)]();}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xbea)]=Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0x639)],Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0x639)]=function(){const _0x336ecf=_0x57e85a;VisuMZ['BattleCore'][_0x336ecf(0xbea)][_0x336ecf(0xa23)](this),$gameParty[_0x336ecf(0x6d3)](null),delete this[_0x336ecf(0x872)][_0x336ecf(0x8be)],delete this['_handlers'][_0x336ecf(0x7ae)];},Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0xbcb)]=function(){const _0x1565c7=_0x57e85a;let _0x55afe8=$gameTroop[_0x1565c7(0x8a1)]();const _0x1b82e9=BattleManager[_0x1565c7(0xdab)]();if(_0x1b82e9){if(_0x1565c7(0x281)===_0x1565c7(0x5fc)){if(_0x21c673[_0x1565c7(0xd26)]())this[_0x1565c7(0x41a)]();else _0x528568[_0x1565c7(0xad6)]()&&_0x372418['BattleCore'][_0x1565c7(0x2e9)][_0x1565c7(0xa23)](this);}else{if(_0x1b82e9[_0x1565c7(0x7d2)]()&&_0x55afe8[_0x1565c7(0xd36)]>0x1){if(_0x1565c7(0x2b5)===_0x1565c7(0xc9e)){const _0x4ce2e5=this[_0x1565c7(0x6ac)](),_0x18df25=_0x20cdf3[_0x1565c7(0x734)][_0x1565c7(0x478)]['PartyCmd'][_0x1565c7(0xa76)],_0x54a659=_0x4ce2e5==='text'?_0x1ef381[_0x1565c7(0x8d8)]:_0x1565c7(0x53c)['format'](_0x18df25,_0x1d46ec[_0x1565c7(0x8d8)]),_0x2bba2d=this[_0x1565c7(0xd60)]();this[_0x1565c7(0x761)](_0x54a659,'fight',_0x2bba2d);}else this[_0x1565c7(0xdf7)](_0x1565c7(0x8be),this[_0x1565c7(0x657)][_0x1565c7(0xc81)](this));}if(_0x1b82e9['isForAnyone']()){if(_0x1565c7(0x9a6)==='SIeqn'){const _0xb8bd81=$gameParty['aliveMembers']();_0x55afe8=_0x55afe8[_0x1565c7(0x60f)](_0xb8bd81),_0x1b82e9[_0x1565c7(0x7d2)]()&&_0xb8bd81[_0x1565c7(0xd36)]>0x1&&this[_0x1565c7(0xdf7)](_0x1565c7(0x7ae),this[_0x1565c7(0x3f6)][_0x1565c7(0xc81)](this));}else _0x1389e0+=(_0x33b883[_0x1565c7(0x8b9)]-_0x2fdbe6)/0x2;}}}return _0x55afe8;},Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0xa6a)]=function(){const _0x48b45c=_0x57e85a;this[_0x48b45c(0xc42)]=this[_0x48b45c(0xbcb)](),this['sortEnemies'](),Window_Selectable['prototype']['refresh']['call'](this);},Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0x80f)]=function(){const _0x1e0abf=_0x57e85a;this[_0x1e0abf(0xc42)][_0x1e0abf(0x494)]((_0x4c2348,_0x2cdbb2)=>{const _0x1d3648=_0x1e0abf;if(_0x4c2348['isActor']()!==_0x2cdbb2['isActor']()){if(_0x1d3648(0xc0e)===_0x1d3648(0xc0e)){if(_0x4c2348['isEnemy']())return-0x1;if(_0x2cdbb2[_0x1d3648(0xd89)]())return 0x1;}else _0x55e242[_0x1d3648(0x986)]([this],_0x3b9d75,!!_0xc3a116);}if(_0x4c2348[_0x1d3648(0x7d1)]()&&_0x2cdbb2[_0x1d3648(0x7d1)]())return _0x4c2348['index']()-_0x2cdbb2[_0x1d3648(0x8c8)]();return _0x4c2348[_0x1d3648(0x3ab)]()[_0x1d3648(0x4aa)]===_0x2cdbb2[_0x1d3648(0x3ab)]()['_baseX']?_0x4c2348['battler']()['_baseY']-_0x2cdbb2[_0x1d3648(0x3ab)]()[_0x1d3648(0x20d)]:_0x4c2348[_0x1d3648(0x3ab)]()['_baseX']-_0x2cdbb2[_0x1d3648(0x3ab)]()[_0x1d3648(0x4aa)];}),SceneManager[_0x1e0abf(0xc66)]()&&this['_enemies'][_0x1e0abf(0x648)]();},Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0xc6e)]=function(){const _0xa87c10=_0x57e85a,_0x2e275e=VisuMZ['BattleCore'][_0xa87c10(0x478)]['Enemy'];_0x2e275e[_0xa87c10(0x853)]?this[_0xa87c10(0xcf6)]():this[_0xa87c10(0x58a)]();},Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0xcf6)]=function(){const _0x4d039e=_0x57e85a,_0x22e541=BattleManager[_0x4d039e(0xdab)]();if(_0x22e541&&_0x22e541['isForAnyone']()){if(_0x22e541[_0x4d039e(0x5f3)]()){if(this[_0x4d039e(0x4dd)]&&this[_0x4d039e(0xc42)][_0x4d039e(0x3af)](this['_lastActor'])){const _0x36d806=this[_0x4d039e(0xc42)][_0x4d039e(0x9b6)](this['_lastActor']);return this[_0x4d039e(0x5e3)](_0x36d806);}else{if(_0x4d039e(0x76c)==='Uckgx')this[_0x4d039e(0xb2b)]=_0x4d039e(0x801);else return this['autoSelectPriority']();}}}if(this['_lastEnemy']&&this[_0x4d039e(0xc42)][_0x4d039e(0x3af)](this[_0x4d039e(0x688)])){const _0x51c96b=this[_0x4d039e(0xc42)][_0x4d039e(0x9b6)](this['_lastEnemy']);this[_0x4d039e(0x5e3)](_0x51c96b);}else this[_0x4d039e(0x58a)]();},Window_BattleEnemy['prototype'][_0x57e85a(0x58a)]=function(){const _0x310318=_0x57e85a,_0x37cb29=BattleManager[_0x310318(0xdab)]();if(_0x37cb29&&_0x37cb29['isForAnyone']()){if(_0x310318(0x615)===_0x310318(0x615)){const _0x27bba5=$gameParty[_0x310318(0x8a1)]()[0x0];let _0x491203=this[_0x310318(0xc42)]['indexOf'](_0x27bba5);const _0x2be6e6=_0x37cb29[_0x310318(0x2df)]()[_0x310318(0x219)];if(_0x2be6e6[_0x310318(0x392)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x310318(0x5e3)](_0x491203);return;}else{if(_0x2be6e6[_0x310318(0x392)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){if(_0x310318(0xcc3)===_0x310318(0x638))this[_0x310318(0xace)]=_0x3e5511(_0x23954c['$1']);else{this[_0x310318(0x5e3)](_0x491203-0x1);return;}}}}else return _0x3efd04['_scene']['battleLayoutStyle']()==='border'?_0xf41793[_0x310318(0x734)]['Settings'][_0x310318(0xcab)][_0x310318(0x5c5)]:_0x24a385[_0x310318(0x734)][_0x310318(0x478)][_0x310318(0xcab)][_0x310318(0x529)];}const _0x163935=VisuMZ[_0x310318(0x734)][_0x310318(0x478)][_0x310318(0xb30)];let _0x18ec73=![];if($gameSystem[_0x310318(0xe14)]()){if(_0x310318(0xae1)!=='tcapf'){if(this['shouldDisperseDamage']()){let _0x2e31e3=_0x228ba1[_0x310318(0x73c)];_0x2b4e67/=_0x2e31e3[_0x310318(0xd36)],this['isAttack']()&&(_0x5ac8a8*=this['subject']()[_0x310318(0x6ab)]()+0x1),_0x8420d7=_0x4b99ac>0x0?_0x5bacb5[_0x310318(0x8a8)](_0x17c6fe):_0x163a28['floor'](_0x401950);}return _0x5aa77d;}else _0x18ec73=_0x163935[_0x310318(0x297)];}else _0x18ec73=_0x163935[_0x310318(0xb82)];this['forceSelect'](_0x18ec73?this[_0x310318(0xdf8)]()-0x1:0x0);},Window_BattleEnemy['prototype']['callOkHandler']=function(){const _0x504b9a=_0x57e85a;Window_Selectable[_0x504b9a(0x16f)][_0x504b9a(0x213)][_0x504b9a(0xa23)](this);if(this['enemy']()[_0x504b9a(0xd89)]())this[_0x504b9a(0x688)]=this[_0x504b9a(0x3f1)]();if(this[_0x504b9a(0x3f1)]()[_0x504b9a(0x7d1)]())this['_lastActor']=this[_0x504b9a(0x3f1)]();},Window_BattleEnemy['prototype'][_0x57e85a(0x6d3)]=function(_0x598173){const _0x41301d=_0x57e85a;Window_Selectable[_0x41301d(0x16f)][_0x41301d(0x6d3)][_0x41301d(0xa23)](this,_0x598173),$gameTroop['select'](this['enemy']()),$gameParty[_0x41301d(0x6d3)](this[_0x41301d(0x3f1)]());if(!this[_0x41301d(0x3f1)]())return;if(this[_0x41301d(0xc58)]()){const _0x4e2933=SceneManager[_0x41301d(0xd04)][_0x41301d(0x895)];this[_0x41301d(0x3f1)]()[_0x41301d(0x7d1)]()?_0x4e2933[_0x41301d(0x6d3)](this[_0x41301d(0x3f1)]()['index']()):_0x4e2933[_0x41301d(0xdb0)]();}},Window_BattleEnemy['prototype'][_0x57e85a(0xc58)]=function(){const _0x289b88=_0x57e85a;if(!this[_0x289b88(0x5b6)])return![];if($gameSystem[_0x289b88(0xe14)]())return![];const _0x589e10=SceneManager[_0x289b88(0xd04)][_0x289b88(0x93c)](),_0x1af930=['default',_0x289b88(0x7df),'xp','portrait','border'];return _0x1af930[_0x289b88(0x3af)](_0x589e10);},Window_BattleEnemy[_0x57e85a(0x16f)]['openBattleActorWindow']=function(){const _0x3a725a=_0x57e85a,_0x421244=SceneManager[_0x3a725a(0xd04)]['_actorWindow'];_0x421244['show'](),_0x421244[_0x3a725a(0x24c)](!![]),_0x421244['refresh'](),_0x421244[_0x3a725a(0xdb0)]();const _0x1fc4f7=SceneManager['_scene'][_0x3a725a(0x93c)](),_0x323be7=['xp',_0x3a725a(0x801),'border'];if(_0x323be7[_0x3a725a(0x3af)](_0x1fc4f7)){const _0xb3506=SceneManager['_scene'][_0x3a725a(0x912)];_0xb3506['scale']['y']=0x0;}},Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0xcb0)]=function(){const _0x99e43e=_0x57e85a,_0xeebea5=SceneManager[_0x99e43e(0xd04)][_0x99e43e(0x895)];_0xeebea5[_0x99e43e(0x639)](),_0xeebea5[_0x99e43e(0x24c)](![]),_0xeebea5[_0x99e43e(0xdb0)]();const _0x3c6a17=SceneManager[_0x99e43e(0xd04)]['_statusWindow'];_0x3c6a17[_0x99e43e(0xa63)]['y']=0x1;},Window_BattleEnemy[_0x57e85a(0x16f)]['selectAllEnemies']=function(){const _0x38072d=_0x57e85a,_0x331855=BattleManager[_0x38072d(0xdab)]();if(_0x331855)_0x331855[_0x38072d(0xe27)](_0x38072d(0xbb5));this[_0x38072d(0x73f)]();},Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0x3f6)]=function(){const _0x37f0a8=_0x57e85a,_0x42a16e=BattleManager[_0x37f0a8(0xdab)]();if(_0x42a16e)_0x42a16e['setTargetBattlerKey'](_0x37f0a8(0x940));this['processOk']();},Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0x1d7)]=function(){const _0x308b01=_0x57e85a;return this[_0x308b01(0xa62)]();},Window_BattleEnemy[_0x57e85a(0x16f)][_0x57e85a(0xa62)]=function(){const _0x42511b=_0x57e85a,_0x29e26a=BattleManager['inputtingAction']();if(!_0x29e26a)return!![];if(!_0x29e26a[_0x42511b(0x2df)]())return!![];const _0x1f5746=this[_0x42511b(0x3f1)](),_0x5339fb=_0x29e26a[_0x42511b(0x2df)]()[_0x42511b(0x40f)];if(_0x29e26a[_0x42511b(0x8d5)]()){if(_0x1f5746===BattleManager[_0x42511b(0x2ee)]())return![];}return!![];},Window_BattleItem[_0x57e85a(0x16f)][_0x57e85a(0x3af)]=function(_0x4ff599){const _0x18440a=_0x57e85a;if(!_0x4ff599)return![];return _0x4ff599[_0x18440a(0x3bf)]===0x0||_0x4ff599[_0x18440a(0x3bf)]===0x1;};function Window_AutoBattleCancel(){const _0x560893=_0x57e85a;this[_0x560893(0x84c)](...arguments);}Window_AutoBattleCancel[_0x57e85a(0x16f)]=Object[_0x57e85a(0xbae)](Window_Base[_0x57e85a(0x16f)]),Window_AutoBattleCancel[_0x57e85a(0x16f)][_0x57e85a(0xd77)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x57e85a(0x16f)][_0x57e85a(0x84c)]=function(_0x52807a){const _0x469541=_0x57e85a;Window_Base[_0x469541(0x16f)]['initialize'][_0x469541(0xa23)](this,_0x52807a),this[_0x469541(0x337)](this[_0x469541(0x788)]()),this['refresh']();},Window_AutoBattleCancel[_0x57e85a(0x16f)][_0x57e85a(0x788)]=function(){const _0x1c83e7=_0x57e85a;return VisuMZ[_0x1c83e7(0x734)][_0x1c83e7(0x478)][_0x1c83e7(0x447)][_0x1c83e7(0x522)];},Window_AutoBattleCancel['prototype'][_0x57e85a(0xa6a)]=function(){const _0x5d9a30=_0x57e85a;this[_0x5d9a30(0x887)][_0x5d9a30(0x896)]();const _0x560cbe=VisuMZ['BattleCore']['Settings']['AutoBattle'][_0x5d9a30(0x548)],_0x3ac6f7=_0x560cbe[_0x5d9a30(0x554)](this[_0x5d9a30(0xdf9)](),this['cancelButtonText']()),_0x188799=this[_0x5d9a30(0x754)](_0x3ac6f7)[_0x5d9a30(0x8b9)],_0x3a886b=Math[_0x5d9a30(0x7f8)]((this[_0x5d9a30(0x9f5)]-_0x188799)/0x2);this[_0x5d9a30(0xa50)](_0x3ac6f7,_0x3a886b,0x0,_0x188799);},Window_AutoBattleCancel['prototype'][_0x57e85a(0xdf9)]=function(){const _0x2a3f86=_0x57e85a;if(Imported[_0x2a3f86(0x376)])return TextManager[_0x2a3f86(0x7d0)]('ok');else{if(_0x2a3f86(0x994)===_0x2a3f86(0x994))return VisuMZ[_0x2a3f86(0x734)][_0x2a3f86(0x478)]['AutoBattle'][_0x2a3f86(0x1d9)];else _0x301cb0[_0x2a3f86(0x734)][_0x2a3f86(0xbb4)][_0x2a3f86(0xa23)](this,_0x52ce9);}},Window_AutoBattleCancel[_0x57e85a(0x16f)][_0x57e85a(0x2f8)]=function(){const _0x49fb68=_0x57e85a;return Imported[_0x49fb68(0x376)]?TextManager[_0x49fb68(0x7d0)](_0x49fb68(0x2ac)):VisuMZ[_0x49fb68(0x734)][_0x49fb68(0x478)][_0x49fb68(0x447)]['AutoBattleCancel'];},Window_AutoBattleCancel[_0x57e85a(0x16f)][_0x57e85a(0xa02)]=function(){const _0x46c764=_0x57e85a;Window_Base['prototype']['update'][_0x46c764(0xa23)](this),this['updateVisibility'](),this[_0x46c764(0x9c2)]();},Window_AutoBattleCancel[_0x57e85a(0x16f)][_0x57e85a(0x3d2)]=function(){const _0xd575b1=_0x57e85a;this[_0xd575b1(0x5b6)]=BattleManager[_0xd575b1(0x449)];},Window_AutoBattleCancel[_0x57e85a(0x16f)][_0x57e85a(0x9c2)]=function(){const _0x1e132c=_0x57e85a;if(!BattleManager[_0x1e132c(0x449)])return;(Input['isTriggered']('ok')||Input['isTriggered'](_0x1e132c(0x2ac))||TouchInput['isClicked']()||TouchInput[_0x1e132c(0xb78)]())&&(SoundManager[_0x1e132c(0xac5)](),BattleManager['_autoBattle']=![],Input[_0x1e132c(0x896)](),TouchInput[_0x1e132c(0x896)]());};function _0x89d4(_0x41a426,_0x4c6d9d){const _0x5ad35e=_0x5ad3();return _0x89d4=function(_0x89d40e,_0x12c8f0){_0x89d40e=_0x89d40e-0x15d;let _0x1c56d3=_0x5ad35e[_0x89d40e];return _0x1c56d3;},_0x89d4(_0x41a426,_0x4c6d9d);}function Window_EnemyName(){const _0x4d6b3e=_0x57e85a;this[_0x4d6b3e(0x84c)](...arguments);}function _0x5ad3(){const _0xde1512=['isSkipPartyCommandWindow','hevYS','isStatusAffected','preparePartyRefresh','floatBattler','ShowMpDmg','WaitForSpin','Game_Battler_forceAction','xBStW','HFvGX','getBattlePortrait','ActSeq_Projectile_Icon','dIdms','processPostBattleCommonEvents','TXMMh','LqDuk','updateAngleCalculations','YfZwq','clNyn','Exploited','ElementStatusCore','ActSeq_Camera_Offset','Qhahw','CreateCutinSettings','LlsHN','isHidden','mmp','autoSelectLastSelected','ActSeq_Grid_PushFromTargetNode','AttackAnimation','invokeMagicReflection','PZWps','ActSeq_BattleLog_PushBaseLine','DisplayAction','tbpxX','LIGHT\x20BULB','RUJvH','targetsForOpponents','setCommonEvent','PostStartActionJS','Window_BattleLog_pushBaseLine','_scene','opponentsUnit','isPhysical','kBvCU','IYMcH','_lineHeight','HjEUJ','onActorCancel','Game_Action_testApply','collapse','isNextSceneBattleTransitionable','actorCommandCancelTPB','createDamageSprite','StartTurnWait','eXLGF','Override','ZktFr','clearBattleCoreData','_targetOffsetX','eZAik','createBattleUIOffsetY','addChildToBack','SKGsz','startMove','upwka','waitForMovement','registerDefeatedEnemy','default','parallaxHue','aiVaM','requestFauxAnimation','arPenFlat','startIcon','custom','isDTB','finishActionSet','snapForBackground','battleStatusSprite','TqsfY','destroy','ActSeq_Set_FinishAction','AdjustRect','terminate','ENEMY_OFFSET_Y','ATK','clearBattleBalloons','NUM','makeActionList','attackAnimationIdSlot','isBorderStylePortraitShown','length','FSKTa','Game_Action_isForAll','isAnyoneGrowing','LQeFA','isForAliveFriend','ActSeq_Movement_HomeMoveToJsPoint','DefaultHardCap','Game_System_initialize','setBattlerFacePoint','281711kRbjYV','setupTextPopup','makeTargetSprites','changeInputWindow','updateShadowBattleCore','LFcSE','backColor','ActSeq_Mechanics_StbRemoveExcessActions','command339','xmvek','addFightCommand','updateFlip','gOggx','wNdUK','unshift','onBattleStartBattleCore','yolIR','Sprite_Battler_setHome','WaitForAnimation','ActSeq_BattleLog_AddText','_list','iWGmX','battleCoreResumeLaunchBattle','value2','processForcedAction','battleOpacity','LIgMj','WaitForZoom','Iokoz','setupWeaponAnimation','ActSeq_Horror_TVCreate','options','isFightCommandEnabled','swapEnemyIDs','ActSeq_Motion_RefreshMotion','gaugeX','JS\x20%1END\x20ACTION','Spriteset_Battle_updateActors','_frontAttachmentSprite','initBattlePortrait','USER-DEFINED\x205','pLWPv','Sprite_Enemy_update','isForFriend','DrqWK','isDead','_windowLayer','SvWeaponMass-%1-%2','createActors','drawTextTopAligned','updateWeather','ActSeq_Mechanics_CustomDmgFormula','parseLocalizedText','requestRefresh','anchorX','constructor','wWBOQ','substitute','wvKcK','Scene_Map_initialize','isArray','getAttackMotionSlot','_flipScaleX','_performActionEnd','rlgHV','createStateSprite','ActSeq_Mechanics_PtbConvert','OIdYM','AnchorX','COMBAT\x20LOG','VisuMZ_3_ActSeqImpact','_tempBattler','_branch','isEnemy','_tpbNeedsPartyCommand','chantStyle','Sprite_Actor_setActorHome','_shake','Game_Battler_performEvasion','ActSeq_BattleVoice_PlaySpecialLine','growBattler','gOcQs','HcmEZ','_actionBattlers','Users','sleep','_battleCoreBattleResumeAfter','isGrowing','globalAlpha','ssiGL','guard','zDFvE','KHSed','playBattleVoice','sideview_ui','setSTBExploited','XcXrZ','ActSeq_Animation_ChangeBattlePortrait','_motionSpeed','tVxhs','isPreviousSceneBattleTransitionable','StatusWindowAttachmentBack','Window_BattleLog_performCounter','MDF','clone','_offsetX','createEffectActionSet','inputtingAction','XMnIc','jIWQN','ActSeqImpact','BravePoints','deselect','performTpbActiveCheckSwitch','Game_Action_isForAliveFriend','itemTargetCandidates','focus','getItemDamageAmountLabelOriginal','KSyZr','battleCommands','isCharging','onEncounter','startAttackWeaponAnimation','aINyo','BattleEndEvent','updateScale','isSkewing','hKmxA','command301','TP_Flat','ActSeq_Mechanics_ActionEffect','tAIxo','setupHpGaugeSprite','smooth','PostStartTurnJS','paySkillCost','addBattleCoreAutoBattleStyleCommand','shouldDisperseDamage','NameAttachStateIcon','startEnemySelection','EnemyOffsetX','updateHpGaugePosition','_battlerKeyCache','oyxiV','Inieu','loadBitmap','addAnimationSpriteToContainer','ShowCritical','CreateActionSequenceTargets','SkillsStatesCore','createDistortionSprite','isTickBased','#ffffff','randomInt','JFZtL','SvWeaponSolo-%1-%2','centerFrontViewSprite','BattleManager_processDefeat','bEHRq','XPActorCommandLines','rowSpacing','uuikq','_offsetY','LHSRm','drawText','ActSeq_Movement_Float','ActSeq_Movement_WaitForJump','max','oBwog','_enemyID','EnableDamageCap','getFullActionsPTB','playOnceParallelTroopPage','isForOneBattleCore','createEnemyNameContainer','fcANd','_fauxAnimationSprites','nWJSL','QnBSr','processRandomizedData','alive\x20opponents\x20not\x20target','trim','updateEventMain','setHandler','maxItems','okButtonText','GIjei','RHehg','PAfqH','updateBorderSprite','updatePositionBattleCore','frameDelay','removeState','textColor','isCustomBattleScope','isSpriteVS8dir','oLmXT','VisuMZ_2_BattleSystemPTB','abs','ActSeq_Angle_WaitForAngle','Sprite_Damage_createChildSprite','arPenRate','svBattlerName','isEscapeCommandEnabled','PreEndTurnJS','selectSymbol','DualWield','Game_Interpreter_command301','_enemyMultiTargetWindow','klpYG','skillWindowRect','_text','isSideView','customDamageFormula','ZRGlM','callOptions','yFDzK','IFRvJ','getNextDamagePopup','_totalValue','trueRandomTarget','setFrame','slices','isNegativeLifeSteal','abnormal','dmqql','children','Game_Action_makeTargets','processExtendTroopMembers','SQKSK','xNaoq','setTargetBattlerKey','isChangingOpacity','ActSeq_Motion_MotionType','skillItemWindowRectMiddle','Enable','iconHeight','ConvertParams','DefaultSoftScaler','commandNameWindowCenter','sOoWg','target','Game_Map_setupBattleback','zkVan','clearResult','VEILC','ActSeq_Movement_FaceJsPoint','PreEndActionJS','waitForEffect','faceRect','PreDamageAsUserJS','ActorCmd','destroyDamageSprite','min','prototype','Game_Battler_performDamage','DefaultSoftCap','sQmXV','alive\x20friends\x20not\x20target','MotionType','ConvertCount','getBattlePortraitOffsetX','createMiss','addGuardCommand','moveToStartPositionBattleCore','Game_Action_executeHpDamage','traitSet','isBattleSys','power','FlashDuration','Gsdag','saAAM','setCursorRect','setItem','Sprite_Battler_damageOffsetY','isRightInputMode','uxqXF','VrZbM','ActSeq_Impact_Oversaturate','updateEffectsContainer','compareBattlerSprites','multiTargetWindowRect','CalcEscapeRatioJS','gXAxK','pwHwT','performMoveToTargets','MultiTarget','Mute','visualHpGauge','BattlebackScale','_active','initElementStatusCore','_activeWeaponSlot','SYDKu','kKbrC','gaugeLineHeight','ActSeq_BattleLog_WaitForBattleLog','origin','ActSeq_Movement_MoveToJsPoint','setLastPluginCommandInterpreter','CmdIconItem','_regionBattleback2','_angleRevertOnFinish','inBpf','StartTurnMsg','Scene_Map_updateCallMenu','FullActions','guardMpLifeSteal','Window_PartyCommand_initialize','Scene_Map_launchBattle','clearBattleRefreshRequest','command301_PreBattleEvent','createWeather','StateIconOffsetX','performFlinch','TpbGaugeOffsetY','isSkillItemWindowsMiddle','MKXyM','alive\x20friends','windowAreaHeight','setHome','pushBaseLine','startTpbTurn','BattleGridSystem','removeAnimationFromContainer','disarmHpLifeSteal','startMotion','onDisabledPartyCommandSelection','removeOnceParallelInterpreter','frontview_ui','requestBalloon','XLlJV','battleback1Name','byRRI','applyVariance','forActor','GBYNO','collapseType','updateOpacity','ActionItemMsg','Spriteset_Battle_createLowerLayer','imIke','createCommandNameWindow','toString','performActionEnd','equipSlots','magicReflection','processTurn','onEncounterBattleCore','qhWtq','AS\x20TARGET','ActSeq_Movement_HomeMoveBy','jsOneForOne','isOpen','ovPXY','actions','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','_selectionEffectCount','isCurrentItemEnabled','%1RegenerateJS','AutoBattleOK','_commonEventQueue','filter','rvdwO','aAMvW','OKkXS','isOptionsCommandAdded','diNEu','redraw','Game_Action_setAttack','CbpAK','jsScaleUp','MotionFrameWait','Sprite_Enemy_initVisibility','BwHEe','Scene_Battle_logWindowRect','string','oMtiP','vVcpi','Game_Battler_onBattleEnd','WindowWidth','parse','GroupDigits','_padding','iYFce','isBreakStunned','tdnfP','Scene_Options','_autoBattleWindow','DHKki','Height','updateAttachedSprites','setWaitMode','RCouD','isTurnBased','clamp','_makeFontNameText','getTraitSetKeys','victory','iterateBattler','_battlerHue','removeChildFromUiContainer','SkewY','addItemCommand','PerformAction','createSeparateDamagePopups','jXIlW','Sprite_Battler_isMoving','TVpiD','_homeEasing','BattleManager_startAction','addWindow','_baseY','isSelected','currentSymbol','resetFontSettings','BattleManager_selectNextCommand','checkAutoCustomActionSequenceNotetagEffect','callOkHandler','updateBattlebackBitmap2','Game_BattlerBase_die','show','battlerSmoothImage','AutoBattleRect','scope','cExHd','expTotal','zpNZi','_borderPortraitTargetX','PreApplyAsTargetJS','addNewState','%1Damage%2JS','_cursorSprite','Window_BattleEnemy_show','dNDAB','eraseState','getBattlerKeyTargetReplacement','waitForOpacity','stop','HelpEscape','_commandNameWindow','_character','swing','Opacity','ActSeq_Mechanics_BreakShieldChange','KtXDm','Game_Battler_regenerateAll','DKdHA','AllowCollapse','sTmvx','CvfcL','spriteId','PostStartBattleJS','rec','Parse_Notetags_Action','updateOnceParallelInterpreters','_battlerName','Linear','ARzTw','BattleVictoryJS','_emptyBitmap','ODHTd','playEnemyAttack','revealNewWeaknesses','slice','battleZoom','skillTypes','partyCommandWindowRectBorderStyle','_updateCursorArea','_backAttachmentSprite','damageFlat','Scene_Battle_itemWindowRect','PopupShiftX','adjustPosition_ScaleUp','type','setEnemyWindowMode','ConfigManager_applyData','Sprite_Battler_damageOffsetX','DFftG','iKTlb','recoverAll','NewPopupBottom','gstnx','magicSkills','NameOffsetX','FuDfA','targetsForFriends','Post','yxEXU','all\x20targets','ActSeq_Motion_ClearFreezeFrame','top','CheckActSeqProjectileVersion','_onceParallelInterpreters','ActSeq_Impact_ZoomBlurPoint','map','CevYJ','RQkFF','startFloat','pGkOR','updateFrame','NHXVG','UZJxu','Game_Temp_requestBalloon','ShowReflect','requestMotionRefresh','parallaxHueEnemyModifier','addSingleSkillCommands','_frame','createInnerPortrait','VisualCutinEffect','RequiresDefeat','ext','VisuMZ_3_ActSeqCamera','aTOMP','Scene_Battle_commandFight','HcjOn','commandName','HSaOX','hCSOR','updateStyleOpacity','RUvyZ','ActSeq_Mechanics_FtbAction','_statusType','IconStypeMagic','IssvU','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','selectNextActor','hhjnn','MlTNd','filters','_dimmerSprite','textBaseline','RhyFX','isBattlerGrounded','process_VisuMZ_BattleCore_Action_Notetags','AEYsf','fontSize','isDrain','isDisarmLifeSteal','setSkill','guRQG','ActSeq_Mechanics_AddState','QSDrb','removeAnimation','Eorhs','UgfOQ','TpGaugeOffsetY','drawEnemyName','isQueueOptionsMenu','SideviewSelect','setupMotionBlurImpactFilter','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','displayChangedBuffs','Sprite_Actor_setBattler','isOpponent','mlQJF','_executeHpDamage','notFocusValid','createAttachedSprites','aDjYI','pha','wmFCw','animationNextDelay','weatherPower','executeDamage','Game_Action_apply','Sprite_Animation_targetSpritePosition','NFyTj','drawItemImage','battleBalloon','cancel','StatusWindowSelectableBackHide','ReflectAnimation','_updateCursorFilterArea','getSkillTypes','applyCritical','pages','putActiveBattlerOnTop','shouldHideBattleEndPopups','XRHcI','RaXQe','WIDTH','BattleStartEvent','result','262028MaJrsC','SLEEP','toLowerCase','ResetOffset','critical','processEnemyModeTouchBattleCore','performActionEndMembers','makeData','OVCCx','displayMpDamage','currentValue','kIifJ','virtualClick','mWTzR','numRepeats','YVnuJ','ForceExploiter','addShowHpGaugeCommand','changeBattlebacks','speed','showNormalAnimation','Game_BattlerBase_canAttack','waitForNewLine','JS\x20%1END\x20TURN','MessageWait','inputting','SouzJ','ActSeq_Horror_GlitchCreate','ActSeq_Grid_AnimationJsAtNode','States','loadWindowskin','startJump','_svBattlerData','FSFMk','qftiF','requestPointAnimation','TUryW','item','isAlive','clearElementChanges','popBaseLine','FlinchDistanceX','checkBattleEnd','battleSpin','prepareBorderActor','zJHkL','gradientFillRect','Scene_Battle_startPartyCommandSelection','setActorHome','stateMotionIndex','GetActionSequenceSpecialTarget','_back1Sprite','actor','_growEasing','createBorderStylePortraitSprite','compatibilityVisible','die','createMultiTargetWindow','NkDCz','createUIContainer','prepareCustomActionSequence','hdUYi','cancelButtonText','AbHad','_enemyWindowMode','updateStaticSvBattlerFrames','TpbActiveChangeEnabled','GuardFormulaJS','PopupDuration','launchBattle','ActSeq_Horror_NoiseRemove','PostEndActionJS','logActionList','Game_Action_isForOne','battleInjectPrep','ActSeq_Grid_ClearPassiveStatesFromNode','onActorOk','toUpperCase','HLScs','ActionAnimation','isCommonEventReserved','nBYMF','SmoothImage','_requestRefresh','_cacheTextWidth','rYxyI','startAction','gvRAV','loadEnemy','regionId','ActSeq_Cutin_WaitForExit','ActSeq_Mechanics_OtbOrder','dead\x20enemies','SwitchMissEvade','rBCrw','vrEYt','NOXrn','resizeWindowXPStyle','process_VisuMZ_BattleCore_CreateRegExp','battleFloat','_regionBattleback1','ActSeq_Set_TargetActionSet','wUMbg','setupActionSet','DdRKR','AttachStateOffsetY','_additionalSprites','BreakShields','left','Scene_Battle_windowAreaHeight','Game_Action_isForOpponent','setBattlerMotionTrailData','clearOnceParallelInterpreters','setBattleSkew','statusWindowRectXPStyle','qBnNW','ActSeq_Cutin_AddVisualCutinEffect','uzLYB','Window_Options_statusText','cDUVL','FlinchDuration','ewrUI','isImmortal','attackStatesRate','isBorderPortraitSpriteVisible','setBackgroundType','isTpbReady','QUESTION','AddOption','fRAed','_motion','Direction','_lastRegenFrameCount','drawGauge','ActSeq_Camera_FocusPoint','meFAI','alterActionCostPTB','MpGaugeOffsetX','JejLY','AniDuration','_growWholeDuration','hoSZW','fUBrT','statusWindowRectBorderStyle','Sprite_Battler_initMembers','UUpuY','useDigitGrouping','iKuhY','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','makeActionOrders','canEscape','Window_BattleLog_performEvasion','skills','YdmJm','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','TextColor','damage','createMultiTargetWindows','inBattle','rglGN','FollowTurn','dead\x20battlers','hasSkill','hWFrs','hRIlm','ZeUfw','xjuMB','StatusWindowAttachmentFrontOffsetX','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','DYsZN','BattleManager_inputtingAction','iBoao','ActionCount','VisuMZ_3_BoostAction','PostDamage%1JS','msGhr','createMainSprite','openBattleActorWindow','Scene_Battle_createCancelButton','VariableID','rcjLf','maxCommands','contains','alive\x20enemies','ZAeQC','time','ACXSL','Game_Interpreter_command283','VisuMZ_0_CoreEngine','canAddSkillCommand','WaitForAngle','turnOrderChangeOTB','ActSeq_Impact_Desaturate','needsActorInputCancel','invokeAction','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','okTargetSelectionVisibility','WaitForOpacity','ActSeq_Mechanics_EmulateAttackEffect','ActSeq_Mechanics_AtbGauge','QjuWt','moveBattlerHomeDistance','lastBattleSkill','requestBattleBalloon','createActorCommandWindow','yLmJn','Game_Enemy_transform','setupChild','autoBattleAtStart','applySoftDamageCap','xmEvw','AllEnemiesText','isETB','onBattleStartOnceParallels','removedBuffs','changeCtbCastTime','match','IUmRG','_updateFilterArea','_appeared','itemHit','CheckSkillCommandShowSwitches','filterArea','DigitGroupingDamageSprites','extendTroopMembers','ConvertActionSequenceTarget','hue','applyGlobal','EscapeFail','HgEMP','getAttackWeaponAnimationId','ActSeq_Motion_PerformAction','SkipPartyCmd','singleSkill','Intensity','%1EndTurnJS','value','63Zuhqbw','ActSeq_Grid_PullToTargetNode','_tempActor','MmUDA','battler','TPjoA','jVEwy','QiCck','includes','VisuMZ_2_DragonbonesUnion','command3011','DamageFlat','JS\x20BATTLE\x20VICTORY','Slot','getEnemyIdWithName','_injectAnimationSprite','setBattleCameraOffset','battleStatusWindowAnimationContainer','battleGrow','MP_Rate','applyEasing','onEscapeSuccess','WaitForCamera','_target','occasion','Sprite_AnimationMV_updatePosition','displayCritical','cuEuJ','removeBuffsAuto','CheckMapBattleEventValid','Scene_Battle_helpWindowRect','BattleCmdList','BattleManager_cancelActorInput','parseForcedGameTroopSettingsBattleCore','Sprite_Battleback_adjustPosition','displayEvasion','itemEffectAddNormalState','CoreEngine','mwTXJ','Game_Action_executeDamage','ActSeq_Skew_Reset','cQdCa','allowRandomSpeed','updateVisibility','code','canGuard','ActSeq_Cutin_EndVisualCutinEffectAll','vSAYz','yejol','ActSeq_Camera_Clamp','Scene_Battle_selectNextCommand','doesPageHaveOnceParallelStart','visibilityState','makeActionListAutoAttack','SILENCE','updateStatusWindowPosition','Game_BattlerBase_isStateResist','dQcjr','setupShockwaveImpactFilter','Parse_Notetags_TraitObjects','ShowPortraits','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','isBattleRefreshRequested','alterChange','_targetSkewY','vkUZm','onAllActionsEnd','_stateIconSprite','czHZz','ActSeq_Mechanics_CtbOrder','performMoveToPoint','needsSelectionBattleCore','allBattleMembers','endIcon','enemy','font','UtpVj','getColor','GetActionSequenceSpecialTargetWithFlags','selectAllActors','mjRbn','ParseAllNotetags','updateCallMenu','AutoNotetag','performMagicEvasion','COBWEB','addText','cutinEnter','CriticalHitFlat','displayBattleCoreTransitionErrorMsg','damageRate','QHKPW','softDamageCap','RHgsw','startHomeMove','uiInputPosition','ActSeq_Movement_BattleStep','ItemID','setBattlerFlip','ulgSW','FGMUC','ParseActorNotetags','VisuMZ_3_WeaknessDisplay','createDigits','note','Scene_Battle_onEnemyCancel','TAuzU','Window_BattleLog_performReflection','_lastHpDamage','_drawTextBody','canAttack','thrust','_battleCoreNoElement','boxWidth','innerHeight','selectNextCommand','bjBgj','fzVgh','partyCommandWindowRect','getBattlePortraitOffsetY','JaryY','ParseArmorNotetags','CrfDP','ELzVB','MUSIC','PostRegenerateJS','CJtDc','iYtom','TargetLocation','reserveCommonEvent','_floatEasing','yaGTM','setupOversaturateImpactFilter','DbVLM','canUse','_escapeRatio','sEdGK','battleMove','_lastPluginCommandInterpreter','yRncG','ActSeq_Animation_ShowAnimationJS','vuAiy','updateRefresh','itemEffectAddAttackState','FUNC','UHzwV','Game_Action_isForRandom','DestinationJS','ParseItemNotetags','log','StatusWindowAttachmentBackOffsetX','ActSeq_Movement_FaceTarget','gAMbt','<CENTER>%1','ActSeq_Horror_GlitchRemove','getStypeIdWithName','ActSeq_Mechanics_AddBuffDebuff','TextAlign','startShakeFlinch','Reibk','AutoBattle','isConfused','_autoBattle','CombatLogIcon','dwfuR','MP_Flat','battleSys','setMoveEasingType','HEART','meetsUsableItemConditions','IpGGW','Game_BattlerBase_initMembers','JS\x20BATTLE\x20DEFEAT','...','weatherType','mYbXl','checkTpbInputOpen','CheckVisibleSkillNotetags','stateRate','WaitForMovement','linkSprite','HITTYPE_CERTAIN','HtxAf','updateLink','gXvXB','ActSeq_Mechanics_StateTurnsChangeBy','BattleManager_updatePhase','Window_BattleLog_refresh','BeVPR','mazCD','VisuMZ_2_BattleSystemSTB','anchorY','CastCertain','_weaponImageId','createStateIconSprite','evaded','_flashDuration','createJS','_makeCursorAlpha','uAmub','createShadowSprite','VisuMZ_2_BattleSystemATB','isAutoBattle','NGPkw','mainSprite','isCustomActionSequence','isSTB','ActSeq_Mechanics_StbExtraAction','_jumpHeight','Settings','battleAnimation','Sprite_Actor_initMembers','itemEffectRecoverMp','random','ActSeq_Movement_MoveBy','WEAPON\x20SWAP','stepForward','_endingBattle','skew','Sprite_Battler_updateMain','Game_Action_evalDamageFormula','command119','ActSeq_Weapon_NextActiveWeapon','arRedFlat','ScaleX','isPreviousScene','isBattleCoreTargetScope','USER-DEFINED\x202','vKZKN','isPlaytest','updateBattlebackBitmap1','Window_ItemList_maxCols','helpWindowRectBorderStyle','ARRAYJSON','moveBattlerHomeToPoint','ActSeq_Element_ForceElements','setSubject','sort','EVAL','setBattleImpactTimeScale','isForRandomBattleCore','hitFlat','Game_Battler_onTurnEnd','CmdIconEscape','Victory','isSkill','setupBattleback','getSkillIdWithName','ActSeq_Motion_WaitMotionFrame','svShadow','JPBpz','setAttack','ALL_ENEMIES','cancelLifeSteal','_performDamageMotion','setupBlueRedInvertImpactFilter','ORhUL','initBattleCore','HtyTW','_baseX','lineHeight','RVjUI','resizeWindowBorderStyle','StyleName','nTgZW','message4','_indent','isSceneBattle','sAanQ','EnemyOffsetY','missle','startGrow','oscRv','IVTko','padding','isLearnedSkill','ActSeq_Impact_TimeScale','moveBattlerDistance','smoothness','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','hANvQ','Sprite_Actor_updateFrame','isBypassDamageCap','ShowMissEvasion','BARE\x20HANDS','Game_Action_itemHit','PreDamage%1JS','executeHpDamage','VisuMZ_4_CombatLog','onRegeneratePlayStateAnimation','requestMotion','Game_Action_makeDamageValueDisperse','portraitIndex','chant','buffRemove','oInTl','PreApplyJS','FNbqe','Game_Action_itemEffectAddAttackState','PostDamageAsTargetJS','setStateTurns','ZZZ','ActSeq_Mechanics_RemoveState','shift','isGuardWaiting','vzufI','Scene_Battle_updateStatusWindowPosition','displayChangedStates','StatusWindowSkinHide','ANNOYED','_lastActor','eMkVq','svBattlerAnchorX','StatusWindowAttachmentFrontOffsetY','XvJUe','cancelActorInput','QAXRC','ActSeq_Grid_AddTriggerToNode','position','_multipliers','_targetGrowX','performSubstitute','ZtrFN','GKfWV','hrSeX','makeTargets','zQYfu','Scene_Battle_update','jsScaleToFit','LhGIv','exit','alterType','placeTimeGauge','quTvt','qGUQq','makeCommandList','FaceAway','UNilT','BattleSystemCTB','_wtypeIDs','isDisplayEmergedEnemies','ActiveTpbOptionsMessage','IxEBq','AlphaFilter','setBattleCameraTargets','ActSeq_Cutin_WaitForEntrance','PostApplyAsTargetJS','CreateCommonEventKeys','Game_Map_battleback1Name','motionSpeed','onFloatEnd','useItem','qcDMZ','ActSeq_Movement_HomeMoveToPoint','AnimationID','criticalHitRate','ActSeqProjectiles','uEjJy','flipVisualCutinVert','USER-DEFINED\x201','JSON','battleUIOffsetX','ydvGp','setupZoomBlurImpactFilter','ALL_ACTORS','createAnimationContainer','border','hasStaticSvBattler','clearFreezeMotionForWeapons','extraPositionScaledY','FlhBP','freezeTime','Swafn','HITTYPE_PHYSICAL','ufUTj','HwpYk','Radius','dead\x20friends','Game_Action_needsSelection','AutoBattleBgType','addSkillTypeCommand','PrioritySortActive','getChildIndex','Sprite_Gauge_smoothness','pop','OverallFormulaJS','SkillItemStandardCols','BattleLog','_shadowScaleY','wiiJb','Game_Battler_performActionStart','extraPositionY','Sprite_SvEnemy','YoxVa','DistanceX','AS\x20USER','HbBGS','EZSCQ','emerge','CmdStyle','EXMpW','alterPriority','sivlB','rWpXl','applyResultSwitches','\x5cI[%1]%2','addLoadListener','_customDamageFormula','refreshStatusWindow','gainCurrentActionsFTB','displayHpDamage','dFLTt','hidden','WaitForSkew','displayActionResults','getDamageStyle','checkCacheKey','AutoBattleMsg','mBIPY','makeTargetsBattleCoreJS','height','createActionSequenceProjectile','some','_enemyNameContainer','_currentActor','commandFight','compareEnemySprite','updateEffectContainers','jumpBattler','format','actorCommandWindowRect','Scene_Battle_selectPreviousCommand','Fydjf','updateBossCollapse','findSymbolExt','updateMain','_createClientArea','YkRQz','isAnyoneFloating','displayTpDamage','RegExp','_commonEventKey','SWEAT','alterCost','_forceAction','_angleEasing','setValue','dVRWD','DTB','ActSeq_Mechanics_VariablePopup','QoiZe','applyGlobalCommonEventNotetags','_flinched','ActSeq_ChangeSkew','battleCoreTpbMainPhase','ActSeq_Grid_ActionAnimationAtNode','_actions','ActSeq_Mechanics_Collapse','DEF','NPSCx','Damage','Scene_Battle_startActorSelection','createEnemyWindow','_cursorArea','_action','ActSeq_Impact_MotionBlurTarget','onEnemyCancel','battlerShadowScaleY','isForOpponent','displayItemMessage','battleMembers','isAnyoneMoving','iQOhd','Sprite_Battler_startMove','action','_targetOpacity','lfNKD','IconSet','isForAll','ChLZA','kEiTc','Scene_ItemBase_applyItem','process_VisuMZ_BattleCore_jsFunctions','autoSelectPriority','ActSeq_Movement_Opacity','VisuMZ_1_ElementStatusCore','extraPositionX','Game_Action_executeMpDamage','updateCollapse','DisablePartyCmd','_opacityEasing','Game_Interpreter_updateWaitMode','Game_Action_itemTargetCandidates','Targets1','effects','NeLsy','addOnceParallelInterpreter','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','VisuMZ_3_VisualCutinEffect','optDisplayTp','playEnemyDamage','_jumpMaxHeight','shouldPopupDamage','FocusY','alive\x20friends\x20not\x20user','updateFloat','_phase','addAttackCommand','16hgzJEA','_effectsContainer','_opacityWholeDuration','Game_Map_encounterList','DefeatEvent','DekXw','StepDuration','createHelpWindowBattleCore','BTestBypass','StateID','Mechanics','Sprite_Enemy_updateStateSprite','CommandVisible','battlerSprites','ActSeq_Movement_Spin','commandNameWindowDrawText','TYnoP','alive\x20enemies\x20not\x20target','MJEKP','visible','BattleManager_onEncounter','clearActiveWeaponSet','ShowSubstitute','gainFullActionsPTB','CPyyb','addCustomCommands','CCpLf','front\x20base','_battleBalloonSprites','measureTextWidth','PARTY','checkSceneBattleTransitionable','COMBATLOG','updateTargetPosition','SkillItemBorderCols','ActSeq_Zoom_Reset','_mainSprite','Game_Action_isForDeadFriend','tvzxQ','isOnCurrentMap','deadMembers','processTouch','_shakeFlinchDuration','waitForJump','ApplyImmortal','attackMotions','finalizeScale','VisuMZ_2_BattleSystemOTB','sortDamageSprites','ActSeq_Movement_FacePoint','updateKeyboardKeys','inHomePosition','ayTOM','switchToWeaponType','_createDamageContainer','Window_SkillList_maxCols','PortraitScale','CastAnimation','isInputting','_skillIDs','_borderPortraitDuration','applyForcedGameTroopSettingsBattleCore','timeScale','targetActionSet','forceSelect','HP_Rate','setupIconTextPopup','targetObjects','VariableDmg','itemTextAlign','Game_Troop_setup','hasBeenDefeatedBefore','targetSpritePosition','setLastBattleSkill','LUTlE','ClearBattleLog','ITEM','_motionType','CmdTextAlign','zYYwm','isForAnyoneFocusFriends','getDualWieldTimes','mCcgR','NzsbI','angleDuration','Scene_Battle_skillWindowRect','nkxMX','push','Immortal','bOWED','ParseStateNotetags','_buttonText','emulateAction','DXaVt','_skewDuration','gainHp','SKILLS','clearWeaponAnimation','dead','_showWeapon','weaponTypes','ActionEnd','iYfUY','_surprise','refreshRequest','uazol','Scene_Battle_stop','isGuard','concat','JS\x20ESCAPE\x20FAILURE','initMembersBattleCore','createPartyCommandWindowBattleCore','processBorderActor','DRcxj','Jwyaj','Tclis','ActSeq_Mechanics_EmulateSkillCost','helpAreaHeight','save','_callSceneOptions','_animationSprites','MpGaugeOffsetY','CopyCombatLog','BattleManager_initMembers','eiHwv','ctXfr','svAnchorY','isDuringNonLoopingMotion','EdLPA','Scene_Battle_createHelpWindow','Game_Enemy_setup','checkShowHideSwitchNotetags','DamageDisplay','clearActiveWeaponSlot','textWidth','setBattleCameraPoint','_damageContainer','cWBjP','mainSpriteHeight','isClicked','vlAiE','qOrce','addDamageSprite','bitmap','BULB','_actorSprites','autoBattle','drawItemStyleIconText','mSlYH','xMCtp','hide','_targetFloatHeight','WtypeId','hitType','createChildSprite','StatusWindowSkinFilename','commandNameWindowDrawBackground','gainTp','_createCursorArea','iZmZV','ixbvQ','vVJBF','Defeat','PRE-','Balloon','reverse','nextActiveWeaponSlot','open','VMwxO','process_VisuMZ_BattleCore_BaseTroops','isFrameVisible','logWindowRect','_eventId','setupNegativeImpactFilter','xWTOs','canBattlerMove','ActionSkillMsg2','isBattlerFlipped','setBalloonPose','ARRAYSTRUCT','selectAllEnemies','addImmortal','ActSeq_Motion_FreezeMotionFrame','dImBa','VisuMZ_2_BattleGridSystem','lhILb','equips','gainMp','FfekA','addChildAt','updateCommandNameWindow','clearFreezeMotion','lRwiA','adjustPosition_1for1','JyXoj','Actions','Window_BattleLog_performDamage','addAutoBattleCommand','setTroopPage','qphse','restore','battleProjectiles','getItemDamageAmountTextOriginal','frontviewSpriteY','makeDamageValue','VisuMZ_2_AggroControlSystem','popupDamage','ShowActorGauge','loadBattleback1','wait','zoomDuration','bossCollapse','ActSeq_BattleLog_WaitForNewLine','makeActions','LGeBF','fJeZA','svActorHorzCells','canMove','Sprite_Enemy_setBattler','ActSeq_Horror_Clear','addChild','hVKlG','nSSVd','isPTB','Game_Actor_equips','DamageStyles','hHNQt','drawItemImagePortraitStyle','canAttackBattleCore','_lastEnemy','DefaultDamageStyle','setHue','isItem','portraitFlipVert','updateAction','animationId','_growDuration','NMEvd','Game_Action_applyGlobal','Duration','BG_TYPE','ActSeq_Movement_WaitForMovement','BattleManager_checkBattleEnd','removeHorrorEffect','isVisualHpGaugeDisplayed','displayCurrentState','CmdIconOptions','ShowHpDmg','updateBattlerContainer','playReflection','ActSeq_Mechanics_TextPopup','PWoxk','alterBreakShield','_commonEventIDs','balloonId','processEscape','setupDesaturateImpactFilter','opacity','NameOffsetY','HyMMP','makeUniqueNames','fLmgs','addState','Game_Temp_requestAnimation','attackTimesAdd','commandStyle','makeTargetsBattleCore','TextFmt','Pre','BRGxU','Zpvzv','AAbmQ','dznXS','fmMba','EndBattlePopups','isBattleTest','escape','_floatDuration','displayCounter','BattleManager_startTurn','HitFlat','ANTI_TINT_UI','HpGauge','HfhIn','_displayBattleCoreTransitionErrorMsg','PEOvS','battleUIOffsetY','updateBattleProcess','onSelectAction','getHalfActionsPTB','_skewEasing','_actor','addedDebuffs','_tempEquipCheck','BindCommonEventKeysForGroup','SwitchCritical','ActSeq_Camera_Reset','icons','updateGrow','TcdPj','UUbHr','executeMpDamage','fdksy','STRUCT','select','registerCommand','startActorSelection','StyleOFF','_damages','onGrowEnd','isDying','base','ResetFocus','actionBattleCoreJS','rVWWV','Window_BattleLog_performAction','ActSeq_Impact_MotionTrailRemove','isMVAnimation','wtypeId','ABWGw','Sprite_Weapon_loadBitmap','updateBorderStyle','hlseO','battleCamera','AddHpGaugeOption','isAppeared','cancelMpLifeSteal','sDaNt','setupFont','isMeleeMultiTargetAction','%1EndBattleJS','rovVm','evalDamageFormula','autoMeleeMultiTargetActionSet','updateAttachmentSprites','mainSpriteWidth','mpHealingFmt','drawActorFace','JiiXE','ActSeq_Weapon_ClearActiveWeapon','Interrupt','animationBaseDelay','Fqzsu','Window_BattleStatus_drawItemImage','Amp','stypeId','AUTO\x20BATTLE','LIGHT-BULB','battleDisplayText','TpbGaugeOffsetX','ShakeFlinchPower','tqVuO','isForOne','attackSkillId','processAnimationRequests','PreEndBattleJS','Game_Action_itemEffectAddNormalState','OwPMW','CommandAddAutoBattle','hBRGI','zcfvQ','Bczys','_duration','anchor','StartTurnShow','statusWindowRect','turn','initVisibility','Scene_Battle_createEnemyWindow','AFrAt','nameY','performActionStart','Sprite_Actor_update','ShowPortraitsBorderStyle','contentsOpacity','MUSICNOTE','VisuMZ_2_BattleSystemCTB','isItemCommandEnabled','Window_ActorCommand_initialize','hcNoI','VarianceFormulaJS','wygnD','wTbqu','fGtMO','battleSkew','TPB','DZTFr','formula','_ptbActionCost','isFlipped','updateBitmap','Mirror','StepDistanceX','KcPyS','ShowButton','setupRgbSplitImpactFilter','isDeathStateAffected','StepDistanceY','MGfFx','ActSeq_Grid_AnimationTypeAtNode','BAzAW','BattleCore','OzFPQ','duration','KADgA','Window_BattleLog_displayCritical','HzATZ','alive\x20opponents','Wave','_targets','Sprite_StateIcon_updateFrame','JhtYs','processOk','animation','hpAffected','startDamagePopup','isCommandEnabled','fEjQK','_buttonKey','_effectDuration','performAttackSlot','isAutoBattleCommandAdded','needsSelection','kUCkd','_endBattle','PopupShiftY','exJFv','efgQJ','BattleManager_endAction','symbol','ActSeq_Movement_Scale','ActorOffsetX','troop','textSizeEx','Setting','displayMiss','BattleManager_startInput','Jbcdf','clearMotion','processActorCommandCancelTPB','DistanceY','mcPIP','GquCE','active','isAutoBattleCommandEnabled','physical','addCommand','process_VisuMZ_BattleCore_CommonEventKeys','HelpAutoBattle','isChanting','extraHeight','isHiddenSkill','QpfiT','fnordAddedStates','_flashColor','ScaleY','createDamageContainer','pCFkp','qQCbT','Actor-%1-%2','Sprite_Actor_updateBitmap','sliceMin','LifeStealRegExp','FAvYc','Scene_Battle_onActorOk','_isBattlerFlipped','ActSeq_BattleVoice_PlayCommonLine','wiHif','46266exLJZC','Game_Action_setSubject','_iconIndex','PreStartActionJS','WaitForNewLine','Scene_Options_maxCommands','BattleManager_processAbort','_baseLineStack','Window_BattleActor_hide','retreat','HpGaugeOffsetX','isBusy','UtnRN','itemCri','_homeDuration','setBattleAngle','_tpbChargeTime','bgType','updateStart','ActSeq_Mechanics_WaitForEffect','callUpdateHelp','Angle','_spriteset','svKsY','changeAtbCastTime','ActSeq_Set_WholeActionSet','clearRect','VcLLh','ActSeq_Animation_AttackAnimation2','PreApply%1JS','replace','Game_BattlerBase_meetsUsableItemConditions','refreshCursor','Game_BattlerBase_addNewState','ActSeq_BattleLog_Refresh','Sprite_Battler_update','AutoAddState','eCTOi','dsvBN','createBattleFieldBattleCore','Sprite_Enemy_updateCollapse','makeTargetSelectionMoreVisible','_preBattleCommonEvent','refreshActorPortrait','name','_waitMode','WJwNz','createTroopNote','targetObject','battleInjectAni','_shadowSprite','BattleManager_endBattle','offsetX','message2','CommandAddOptions','pagedown','SvMotionIdleMass-%1-%2','isBuffAffected','JS\x20%1START\x20TURN','windowPadding','startWeaponAnimation','VCAyC','fxRPS','_interpreter','SvBPn','ActionSequence','YCFme','ActSeq_Zoom_WaitForZoom','PreDamageAsTargetJS','ActSeq_Mechanics_ArmorPenetration','parallaxScrollX','Jbhfj','movement','NameLegacy','TpGaugeOffsetX','VxUcH','ActSeq_Grid_AddPassiveStatesToNode','battleJump','isShownOnBattlePortrait','DistanceAdjust','user','isSpinning','traitObjects','performCounter','xQJdU','ShowHide','ucEXY','YfvIK','forceEscapeSprite','getInputButtonString','isActor','canSingleOrMultipleSelect','YoPRB','PrioritySortActors','actionEffect','performMiss','ActSeq_Skew_WaitForSkew','hitRate','eeaml','MUSIC-NOTE','_freezeMotionData','_motionCount','ActSeq_Target_RandTarget','JCpzG','list','itemHeight','isAnyoneInjectAnimating','isAnyProjectilePresent','Window_BattleLog_displayMpDamage','PopupPosition','Game_Action_setSkill','createCommandVisibleJS','RtZiA','isGuardLifeSteal','YvjLj','negativeMpLifeSteal','parameters','applyImmortal','performLifeSteal','startInput','DamageRate','freezeMotion','MANUAL','Scene_Battle_createAllWindows','startSkew','value1','kJIKQ','angle','IyKhk','floor','PartyCmd','ShowRemovedState','isAnyoneJumping','Spriteset_Battle_update','regenerateAllBattleCore','_itemWindow','_skewX','Scene_Battle_initialize','portrait','dhfcy','BackColor','autoBattleStart','addSingleSkillCommand','ACTOR_OFFSET_Y','BattleManager_onEscapeFailure','setActiveWeaponSlot','BattleManager_checkSubstitute','YYPKy','showAnimation','targetBattlerContainerOpacity','setGuard','parent','sortEnemies','EgSWS','updatePointAnimations','yHRnW','VxSgu','damageOffsetY','ActSeq_Mechanics_DamagePopup','clearAllVisualCutins','Window_BattleLog_popBaseLine','getConfigValue','_armorPenetration','_targetIndex','rpEuB','ShowAddedState','_opacityDuration','onSkewEnd','displayAction','ForceExploited','setupBattleCore','_hpGaugeSprite','drawItemStatusListStyle','ADjiZ','VisuMZ_3_ActiveChainSkills','oTSvL','loop','members','allowCollapse','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','vQsoB','_animation','WbZeT','aHdcN','updateShadowScale','processBattleCoreJS','removeImmortal','addWeaponSwapCommand','UNTITLED','%1Event','resetTextColor','updateCustomActionSequence','Window_BattleEnemy_initialize','freezeFrame','Window_BattleLog_clear','_battleCoreForcedElements','BattleManager_isTpbMainPhase','Aalxc','_currentAngle','_targetHomeX','isOptionsCommandEnabled','CounterPlayback','isBTB','HelpFight','AntiTintUiElements','ActSeq_Impact_TimeStop','Scene_Battle_updateBattleProcess','softDamageCapRate','yvNEz','ShuffleArray','buZGX','ihluj','ybQOi','initialize','setupDamagePopup','battlelog','addBattleGridMoveCommand','svAnchorX','_battleCoreBattleStartEvent','casting','LastSelected','WSCsr','VisuMZ_4_BreakShields','startTurn','_targetGrowY','MotionSpeed','ActSeq_Grid_AnimationIDAtNode','_drawTextOutline','hVzNs','_animationCount','encounterList','boxHeight','UtOUa','coreEngineRepositionEnemies','setImmortal','right','buffAdd','_skewY','itemWindowRect','pORen','_animationContainer','frameCount','missed','ActSeq_Weapon_SetActiveWeapon','updateHelp','NameFontSize','changePaintOpacity','param','isAnimationPlaying','KKpiI','isAnyoneSpinning','_handlers','waitCount','HRncX','PostEndTurnJS','Actor','worldTransform','silentHomeMove','_cache','hasSvBattler','GutCc','noSimilarSTypes','createActorCommandWindowBattleCore','pbFET','performShakeFlinch','process_VisuMZ_BattleCore_PluginParams','showPortraits','onEscapeFailure','ActSeq_BattleLog_UI','ShowCosts','dataId','attachSpritesToDistortionSprite','contents','SkillID','displayReflection','NameAlwaysVisible','MAXMP','refreshMotion','SkillItemMiddleLayout','ActSeq_Mechanics_Immortal','version','YLfyA','text','ZHoiM','AyFTH','BattleManager_onEscapeSuccess','_actorWindow','clear','pXHxj','oxbAM','stepFlinch','LUK','commandSymbol','_defeatedEnemies','createAutoBattleWindow','ActSeq_DB_DragonbonesMotionAni','_doubleTouch','Window_BattleLog_displayTpDamage','aliveMembers','Xzbfv','disperseDamage','updatePosition','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','BattleManager_setup','_pattern','ceil','wXrEi','enemyNames','currentAction','Window_BattleLog_performMiss','XBceQ','_floatWholeDuration','_battleField','_jumpDuration','_enemyIDs','_deathStateApplied','mpDamageFmt','dead\x20actors','createKeyJS','_homeY','VisuMZ_2_WeaponSwapSystem','Muobc','width','Sprite_Battler_updatePosition','apply','Name','isAttack','pageup','usePremadeActionSequence','ShakeFlinch','bEnex','dzDLO','applyItem','checkShowHideSkillNotetags','VoiceLineType','Parse_Notetags_Targets','createBattleBalloon','index','Game_Party_removeActor','zHXmK','drawItemStyleIcon','vEvdr','jsScaleDown','setVisibleUI','_item','attackStates','mnCwv','ofnUG','isNonSubmenuCancel','Skills','isForNotUser','battleSpriteSkew','waitForAnimation','fight','callNextMethod','skewBattler','PreStartBattleJS','initMembers','JS\x20%1REGENERATE','veTxH','findTargetSprite','itemRect','KPyqX','process_VisuMZ_BattleCore_DamageStyles','_methods','_cancelButton','toUseBoostPoints','pattern','UGEDL','startVisualCutin','changeBattlerOpacity','fWwYi','getBattlePortraitFilename','setupBattleCoreData','splice','actorCommandEscape','zkDcW','getAttackMotion','getCommonEventIdWithName','DRtuh','_updateClientArea','processBattleBalloonRequests','pxKcU','WeaponTypeID','svBattlerData','WaitCount1','PFEXg','wRogB','ActSeq_Set_SetupAction','blt','waitForFloat','CriticalColor','loadSvActor','Frame','CDoAe','HomePosJS','showHelpWindow','repositionCancelButtonBorderStyle','Game_Troop_expTotal','ChangeOrderBy','updateStateSprite','zDFoa','wmMlU','NkeMO','Window_BattleActor_processTouch','tone','battleCameraData','isForRandom','JVhbE','dAVHp','CcOnA','_statusWindow','setActionState','ActSeq_Grid_MoveTargetsInDirection','iUrGF','_damagePopupArray','VOYVJ','gainBravePoints','mntFa','ActSeq_Animation_ItemAnimation','createTargetsJS','ButtonAssist','testApply','deathStateId','riWei','isStateResist','Scene_Battle_onActorCancel','isAffectedByBreakShield','resize','onBattleEndBattleCore','lcgFu','autoBattleWindowRect','EscapeFailureJS','kloxY','_stypeIDs','round','Sprite_Actor_createStateSprite','wFcwS','preemptive','helpWindowRect','SvBattlerSolo-%1-%2','Dkgfn','Game_Battler_onBattleStart','performCollapse','DQwmP','CriticalDmgFlat','revertTpbCachedActor','selectedBattlers','_distortionSprite','ARRAYNUM','wDDbA','BattleManager_startBattle','parallaxScrollY','battleLayoutStyle','cQwkz','float','oUxEp','all\x20actors','ChantStyle','Text','lukEffectRate','addPartyCommand','POST-','moveBattlerToPoint','flashDuration','Enemy-%1-%2','arRedRate','ZhHFu','AODNJ','Game_Action_setGuard','isAnyoneChangingOpacity','PreDamageJS','skill','StateIconOffsetY','NMYjd','priority','+%1\x20MP','Window_BattleLog_performActionStart','OdlFK','updateSpin','gainHalfActionsPTB','XiGjH','SeeMT','drawItemImageListStyle','uOlkE','iconText','YATTd','loadSystem','ActSeq_Grid_TraverseToNode','commandEscape','SkewX','cIHgP','TCLdu','setSvBattlerSprite','isActiveTpbReady','performActionMotions','setCustomDamageFormula','AeCpV','ActSeq_Mechanics_EtbAction','JS\x20ESCAPE\x20SUCCESS','HdfkH','transform','pwXuj','ArPenRate','isAlwaysVisible','Sprite_Battler_setBattler','auto','updateBattlebackBitmap','_enemyWindow','GUARD','drawBackgroundRect','wholeActionSet','startActorCommandSelection','mjiYI','336642QQfaEl','repeatTargets','forceMotion','makeSuccess','Debuffs','forceWeaponAnimation','JS\x20%1START\x20ACTION','_lastAction','status','displaySubstitute','hardDamageCap','refreshDimmerBitmap','glitch','requestAnimation','_forcedHomeY','qMmha','XaUbq','weaponImageId','_enemySprites','performJump','bopiW','DHRom','clearForcedGameTroopSettingsBattleCore','ANjov','CastMagical','_preemptive','CUAAN','TdJFg','\x20to\x20%1\x20midbattle.','svBattlerShadowVisible','drlER','_uiContainer','startOpacity','isWaiting','onBattleStart','Game_BattlerBase_eraseState','maxCols','_back2Sprite','<CUSTOM\x20ACTION\x20SEQUENCE>','KpOzH','updateActors','uuunK','OffsetAdjust','89515IkdUJc','ActSeq_Mechanics_EmulateItemEffect','SIeqn','setText','ActSeq_Zoom_Scale','oeiia','ROCIm','applyHardDamageCap','_homeWholeDuration','endBattle','message1','updatePadding','MOTIONS','adjustWeaponSpriteOffset','ActSeq_Target_NextTarget','_jumpWholeDuration','setLetter','svActorVertCells','indexOf','RYwBl','loadBattleback2','EnableSoftCap','ActSeq_Mechanics_Multipliers','gLHbF','isForAnyone','oAGLA','updateUiContainerPosition','setEventCallback','missile','updateShadowVisibility','updateCancel','ocNQz','animationShouldMirror','PostApplyJS','xrjDn','processAbort','Style','drawItemImageXPStyle','isSpriteVisible','_growY','xsnof','battleVoices','AllActorsText','CriticalHitMultiplier','PostApply%1JS','commandStyleCheck','actionSplicePoint','Window_BattleLog_displayCurrentState','Juotc','ActSeq_Mechanics_DeathBreak','actorCommandSingleSkill','YnXOP','QoL','MWRDC','cutinExit','MeleeDistance','Game_Actor_setup','createContents','dimColor2','dBLYU','isSubjectValidForAnyoneSelect','applyData','All\x20Allies','isAnyBattleBalloonPlaying','_logWindow','CriticalDuration','displayAddedStates','All\x20Enemies','FlinchDistanceY','RyUGx','Ribaw','processRefresh','endAction','Yoehy','addCombatLogCommand','gKQFt','battlerShadowScaleX','applyAngleChange','_battleBalloonQueue','ddWai','dzCYW','innerWidth','PostDamageAsUserJS','maxBattleMembers','hpRate','Scale','Window_BattleLog_popupDamage','_svBattlerSprite','tflSH','ActSeq_Mechanics_BreakShieldReset','Scene_Battle_terminate','Class-%1-%2','ArRedFlat','updateShadow','update','command236','Sprite_Enemy_createStateIconSprite','removeBattleBalloon','actorId','RbXgA','clearTargetBattlerKey','isFTB','alive\x20battlers\x20not\x20user','criticalDmgRate','Window_BattleStatus_initialize','ActSeq_Animation_SkillAnimation','_shakeFlinchPower','CmdTextAutoBattle','command357','selectNextCommandTpb','createHpGaugeSprite','activate','Sprite_Enemy_updateBossCollapse','ActSeq_Movement_WaitForSkew','HpGaugeOffsetY','_weather','regenerateAll','finishActorInput','SXBCg','XkZcj','performDamage','Window_BattleLog_performMagicEvasion','_borderPortraitSprite','drawSkillCost','vSdco','drawItemBackground','Width','call','weapons','JgxRW','WTmyy','addMeleeReturnActionSet','getBattlerKeyTargets','SceneManager_isSceneChanging','getDefeatedEnemies','attack','%1StartBattleJS','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','WbxOx','RkoAE','Game_Battler_clearDamagePopup','Scene_Party','addBattleCoreAutoBattleStartupCommand','drawItemStatusXPStyle','SHOW_BUTTON','getHardDamageCap','isSideButtonLayout','BindCommonEventKeysForObj','lifeStealTrait','DefaultStyle','Targets','ActSeq_Impact_Negative','autoMeleeSingleTargetActionSet','Scene_Boot_onDatabaseLoaded','basicGaugesY','applyDamageCaps','Game_Battler_clearMotion','SvBattlerMass-%1-%2','EasingType','createAttachmentSprites','onHomeMoveEnd','VisuMZ_3_BattleVoices','setHelpWindowItem','Game_Action_isForFriend','Shadow2','_targetSkewX','statusTextAutoBattleStyle','RevertAngle','uiMenuStyle','EmzpG','ActSeq_Mechanics_ActiveChainInputDisable','OyYEE','drawTextEx','Window_BattleLog_performRecovery','drawItem','_inputting','UdVOY','kcYaw','_colorType','twkab','isForAliveFriendBattleCore','isATB','WaitForExit','disarmMpLifeSteal','removeActor','isPartyTpbInputtable','BTB','isAtbChargingState','applyGuard','alive\x20battlers','isActionSelectionValid','scale','CriticalHitRate','EyALX','BattleLogRectJS','addSkillCommands','changeTurnOrderByCTB','icon','refresh','Strength','CheckVisibleSwitchNotetags','mainSpriteScaleY','ShowAddedDebuff','isPlaying','isAlwaysHidden','ForceRandom','nHibz','getBattlerFromKey','JVRwc','prepare','CmdIconFight','_subject','bottom','addAutoBattleCommands','Window_BattleLog_performActionEnd','ActSeq_Animation_BalloonAnimation','updateSkew','_linkedSprite','lUjmf','battleCorePreBattleCommonEvent','PXtxx','Sprite_Enemy_setHue','Nkarb','Spriteset_Battle_createBattleField','JumpToLabel','applyFreezeMotionFrames','Pavwx','addActor','startSpin','ObjTd','canUseItemCommand','animationWait','yTOLR','SkowI','CriticalHitRateJS','ActSeq_Impact_BlueRedInvert','VfauX','evade','removeBuff','portraitHue','sjOUz','OffsetY','battleEffect','loadPicture','_battlePortrait','oYmTU','PyGgM','awVop','ActSeq_Inject_AnimationEnd','oHxPy','_angleWholeDuration','autoBattleUseSkills','drawIcon','BattleSystemSTB','canGuardBattleCore','process_VisuMZ_BattleCore_Failsafes','evalDamageFormulaBattleCore','_namesCount','AllowRandomSpeed','LOVE','xjiYN','HitRate','unchanged','_skillWindow','setBlendColor','Zvgra','MaxLines','aoQGz','prev\x20target','VOpAP','isIncludedInEnemyWindow','onJumpEnd','OHodm','statusText','ActSeq_Grid_RemovePassiveStatesFromNode','motionIdle','AnchorY','performCastAnimation','AVyHr','parallaxScrollXinvertEnemy','AoKBL','cancelTargetSelectionVisibility','mainFontSize','EFULO','WaitForScale','PopupOffsetX','isDebuffAffected','createBattleField','updateMotionCount','playCancel','yyElC','isMagicSkill','Point','_tpbState','QaLCc','enemyId','expRate','findIndex','_attackAnimationId','ActSeq_Mechanics_HpMpTp','undecided','State-%1-%2','canAlterActionCostPTB','mpDamage','adjustFlippedBattlefield','isJumping','isTpb','ParseSkillNotetags','VisuMZ_2_BattleSystemFTB','zJHce','bSVvi','changeCtbChargeTime','SceneManager_push','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','battleCommandName','getLastHpDamage','onOpacityEnd','tcapf','Window_BattleLog_displayMiss','OgGXq','EscapeSuccessJS','ActSeq_Mechanics_StbExploit','createBattleUIOffsetX','flashColor','fittingHeight','bitmapWidth','QSUap','hpDamage','addChildToUiContainer','_visualHpGauge_JustDied','isValid','EscapeSuccess','gainStoredBoostPoints','isOTB','checkSubstitute','_targetHomeY','start','zJKPU','isActiveTpb','gLBlm','dead\x20opponents','canInput','performAttack','friendsUnit','ActSeq_Animation_ActionAnimation','_floatHeight','NOTE','CnJSc','addOptionsCommand','setBattler','vGAlh','head','Targets2','ShowFacesListStyle','VisuMZ_3_SideviewBattleUI','ActSeq_Mechanics_AnalyzeWeakness','_battler','Scene_Battle_startActorCommandSelection','ActSeq_Mechanics_OnceParallel','createHelpWindow','TRfCw','zZjJx','performSTBExploiter','eAHBf','ActSeq_Animation_PlayAtCoordinate','_forActor','pointY','processVictory','WaitCount2','VisuMZ_2_HorrorEffects','wvZJX','tnmho','ActSeq_Mechanics_EmulateSkillEffect','close','mGtXi','attackAnimationId2','targetDistortionSpritePosition','statusWindowRectDefaultStyle','QcoYS','removedStateObjects','battlerName','updateShakeFlinch','JS\x20%1DAMAGE\x20%2','kcolv','dXlTi','PointJS','HelpItem','ActSeq_Mechanics_EmulateGuardEffect','ActSeq_Element_Clear','arxCU','damageOffsetX','_forcedBattleLayout','Scene_Map_initializeAfter','tMumb','DamageType%1','BaseTroopIDs','Enemy','dmVdD','_playTestFastMode','ZwYwq','WaitComplete','ActSeq_ChangeAngle','createCancelButton','_createEffectsContainer','CheckVisibleBattleNotetags','BattleDefeatJS','Weapon-%1-%2','actor%1-portrait','command283','Game_Map_battleback2Name','stepBack','noise','_waitCount','_helpWindow','getItemDamageAmountTextBattleCore','tZcuE','isAnimationShownOnBattlePortrait','remove','startPartyCommandSelection','MsHUv','NextTurn','walk','ScaleToFit','applyTargetFilters','Rate','PSgbN','applyBattleCoreJS','performReflection','TimeScale','isMoving','ActSeq_Movement_WaitForScale','makeSpeed','WaitCount','AsUser','Game_Interpreter_terminate','IMevJ','auUKV','wlbHo','QhONE','mainSpriteScaleX','tYvkL','isPartyCommandWindowDisabled','ActSeq_Element_NullElements','zqvTN','HP_Flat','isCancelLifeSteal','setup','adjustPosition','charging','sliceMax','svybM','hitIndex','_executedValue','setupBattlebackBattleCore','createBattleFieldContainer','onAngleEnd','PmvGC','addDebuff','battlerKey','ActSeq_Impact_ShockwaveCenterTargets','Sprite_Actor_moveToStartPosition','CriticalDmgRate','EhCEj','nSbyI','_actorCommandWindow','isAnyoneSkewing','ActSeq_Impact_MotionBlurScreen','removeChild','isCancelled','TXfUT','ActSeq_Mechanics_BtbGain','_actorMultiTargetWindow','ActionSkillMsg1','AGI','dying','USER-DEFINED\x204','KVDgX','partyCommandWindowRectDefaultStyle','FrontViewSelect','clearDamagePopup','GXMdg','tpbActorSwitchConditionsMet','setActiveWeaponSet','Scene_Battle_createActorCommandWindow','WaitForProjectile','TKMAD','atbInterrupt','Scene_Battle_startEnemySelection','tDXbU','getMenuImage','Elements','updateWaitMode','lMlGK','Window_Options_addGeneralOptions','isFastForward','lifeSteaItem','currentExt','makeAutoBattleActions','Formula','Window_BattleLog_displayFailure','ActionStart','damageContainer','Window_BattleLog_performSubstitute','_enemy','stbGainInstant','KuLjm','createEnemies','isTpbCharged','dimColor1','reduce','portraitFlipHorz','Game_Temp_initialize','_canLose','PBFQv','rhMHN','gainCurrentActionsETB','isMeleeSingleTargetAction','VisuMZ_3_FrontviewBattleUI','VisuMZ_1_SkillsStatesCore','aMOfE','_homeX','isDamagePopupRequested','create','CoGsJ','GZKVl','ZQOoN','zuJAk','_shadowScaleX','ParseClassNotetags','all\x20enemies','tpbCommandFight','setBattlerBattleCore','autoBattleStyle','ActSeq_Mechanics_CtbSpeed','_tpbSceneChangeCacheActor','EXCLAMATION','NTMjr','isActing','_immortal','isForDeadFriend','ActSeq_Impact_ShockwaveEachTargets','hpHealingFmt','VisuMZ_3_ActSeqProjectiles','checkTpbInputClose','criticalHitFlat','process_VisuMZ_BattleCore_TraitObject_Notetags','guardHpLifeSteal','surprise','_targetAngle','ActSeq_Movement_Skew','itemLineRect','validTargets','ShowTpDmg','svBattlerAnchorY','lSDJf','PostEndBattleJS','XPActorDefaultHeight','ShowWeapon','bitmapHeight','ActSeq_Camera_WaitForCamera','_partyCommandWindow','updateJump','loadSvEnemy','placeActorName','Index','attackAnimationId1','hPQWM','2900808NtCwCk','makeDeepCopy','onBattleEnd','DbiyT','CommandWidth','mhp','BattleManager_makeActionOrders','VisuMZ_1_MainMenuCore','setupCriticalEffect','isForAnyoneFocusOpponents','isForOpponentBattleCore','_dragonbonesSpriteContainer','isFloating','subject','bQfWG','Window_BattleEnemy_hide','ActSeq_Movement_HomeReset','battleEnd','pKxwd','BattleManager_processVictory','_lines','PreStartTurnJS','IconStypeNorm','YYyxY','performEvasion','PreApplyAsUserJS','emulateActionEffect','Eaaxg','refreshBattlerMotions','calcWindowHeight','aMKnr','Ioinc','onStaticEnemyBitmapLoad','onEnemyOk','_battleLayoutStyle','ecetk','placeGauge','setHorrorEffectSettings','ActSeq_Movement_MoveToPoint','counterAttack','AVRIR','JTGqb','yrUSD','split','setFullActionsPTB','description','addGeneralOptions','endVisualCutin','VisuMZ_2_PartySystem','ConfigManager_makeData','return\x200','AGYSM','MotionAni','Window_BattleLog_displayActionResults','_allTargets','AttachStateOffsetX','Shadow','_battlerContainer','iconWidth','move','_reflectionTarget','updateStateSpriteBattleCore','forceAction','aFWru','MDTOQ','updateForceAction','getWtypeIdWithName','_effectType','SvMotionIdleSolo-%1-%2','checkExtendTroopCompatibility','getLastPluginCommandInterpreter','_stateSprite','requestDragonbonesAnimation','sKaqH','ScaleUp','removeCurrentAction','isCertainHit','performWeaponAnimation','_actionInputIndex','isEffecting','playOnceParallelInterpreter','updateInterpreter','VisuMZ_2_BattleSystemBTB','displayFailure','endAnimation','PEzyc','center','isCTB','cVWGO','_enemyId','OsDHR','XQQyZ','battleAngle','updatePhase','moveToStartPosition','PIYEw','FaceDirection','OffsetX','ARAcs','itemEffectRecoverHp','selectPreviousCommand','PostApplyAsUserJS','eOmKE','_enemies','applyArmorModifiers','stopInjectAnimation','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','isNextScene','JS\x20%1START\x20BATTLE','guardSkillId','dhyhj','displayBuffs','alive\x20actors\x20not\x20target','JS\x20%1END\x20BATTLE','_weaponSprite','ShakeFlinchDuration','StatusWindowAttachmentFront','special','awONf','actorCommandAutoBattle','cameraClamp','updateHomeMove','removeDamageSprite','commandAutoBattle','CmdIconAutoBattle','meetsSelectFrontviewActorConditions','ALDYV','jump','commandRemember','UeGjW','ParseWeaponNotetags','XJImv','LIGHTBULB','339048efvycT','isForFriendBattleCore','WQeYC','updateShadowPosition','ParseEnemyNotetags','_angleDuration','isBattleFlipped','LjRhz','YHhKf','changeAtbChargeTime','FlashColor','battleback2Name','onMoveEnd','ActionEffect','autoSelect','WaitForFloat','Window_BattleLog_performCollapse','getNextSubjectFromPool','fGGcF','isUndecided','isFriendly','Sprite_Actor_updateShadow','itemLifeStealRate','process_VisuMZ_BattleCore_Notetags','front\x20center','selectAll','isAnyoneInjectAniPrepping','join','VisuMZ_4_IconBalloons','pauseInjectAnimation','StatusWindowAttachmentBackOffsetY','Scene_Battle_createPartyCommandWindow','FRUSTRATION','bind','Destination','ActSeq_Impact_ZoomBlurTargetCenter','createLowerLayer','lastFilename','skillItemWindowRectBorderStyle','_index','Game_BattlerBase_canGuard','ExtraSettings','FVFMg','ATlWY','displayReflectionPlayBack','changeWeather','pow','PreRegenerateJS','GbgZN','oUvaT','Game_Battler_performMiss','SohbR','_growX','Scene_Battle_onEnemyOk','VariableHeal','DeQiI','AAnKy','placeStateIcon','ARRAYFUNC','_forcedHomeX','NameAlwaysHidden','performRecovery','pnMCx','DVRbf','checkShowHideBattleNotetags','setHelpWindow','_forcedBattlers','lineRect','performAction','BattleSystemBTB','EKKGY','ARRAYSTR','rDFdz','umrMX','battleCommandIcon','BattleLayout','rmVpP','portraitFilename','addEscapeCommand','Filename','closeBattleActorWindow','VWCUq','fnordRemovedStates','nIDYj','_targetOffsetY','repeats','gPChL','messageSpeed','lifeStealRate','_targetBattlerKey','isMagical','ACTOR_OFFSET_X','shadow','Scene_Battle_commandEscape','setBattleZoom','blockWidth','spinBattler','oyiVM','Turns','nvBYG','ozSAY','Scene_Battle_start','ChargeRate','qninM','displayType','addTextToCombatLog','XPSpriteYLocation','parallaxScrollYinvertEnemy','SsJLM','setBattlePortrait','commandOptions','hbjtq','RPfWM','xZOCH','ActionCenteredName','getSpecificBattlerKeyTarget','StartName','OhViH','_skewWholeDuration','visualCutinPortraitHue','not\x20focus','removeStatesAuto','xBOBq'];_0x5ad3=function(){return _0xde1512;};return _0x5ad3();}Window_EnemyName[_0x57e85a(0x16f)]=Object[_0x57e85a(0xbae)](Window_StatusBase[_0x57e85a(0x16f)]),Window_EnemyName['prototype'][_0x57e85a(0xd77)]=Window_EnemyName,Window_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x84c)]=function(_0x9e3407){const _0x4c8432=_0x57e85a;this['_enemyID']=_0x9e3407,this['_text']='';const _0x1b5342=new Rectangle(0x0,0x0,Graphics[_0x4c8432(0x418)],this[_0x4c8432(0x4ab)]()*0x4);Window_StatusBase[_0x4c8432(0x16f)][_0x4c8432(0x84c)]['call'](this,_0x1b5342),this[_0x4c8432(0x337)](0x2),this['contentsOpacity']=0x0;},Window_EnemyName['prototype'][_0x57e85a(0x9af)]=function(){this['padding']=0x0;},Window_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x3f1)]=function(){const _0x21a7e9=_0x57e85a;return $gameTroop[_0x21a7e9(0x828)]()[this['_enemyID']];},Window_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0xa02)]=function(){const _0x214c8b=_0x57e85a;Window_StatusBase[_0x214c8b(0x16f)][_0x214c8b(0xa02)]['call'](this),this[_0x214c8b(0x3f1)]()&&this[_0x214c8b(0x3f1)]()['name']()!==this['_text']&&(this['_text']=this[_0x214c8b(0x3f1)]()[_0x214c8b(0x7a3)](),this[_0x214c8b(0xa6a)]()),this['updateOpacity'](),this[_0x214c8b(0x8a4)]();},Window_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x1c3)]=function(){const _0x551ea4=_0x57e85a;if(!this['enemy']()){if(_0x551ea4(0x8e1)!==_0x551ea4(0x7b5)){if(this['contentsOpacity']>0x0)this[_0x551ea4(0x719)]-=0x10;}else{_0x43f49c[_0x551ea4(0x734)]['Game_Action_itemEffectAddAttackState'][_0x551ea4(0xa23)](this,_0x2a294c,_0x2d4b54);if(!_0x26d6fb[_0x551ea4(0x334)]())return;for(const _0x475e1 of this[_0x551ea4(0xbe8)]()[_0x551ea4(0x8d0)]()){if(_0x475e1===_0x366147[_0x551ea4(0x91e)]()){let _0x2dbf67=_0x3aeec3[_0x551ea4(0x7f4)];_0x2dbf67*=_0x55984a[_0x551ea4(0x459)](_0x475e1),_0x2dbf67*=this[_0x551ea4(0xbe8)]()[_0x551ea4(0x335)](_0x475e1),_0x2dbf67*=this[_0x551ea4(0x943)](_0x47a596),_0x1aabe7[_0x551ea4(0x47c)]()<_0x2dbf67&&(_0x68efc8[_0x551ea4(0x8b2)]=!![],this['makeSuccess'](_0x177bcf));}}}}else{if(this[_0x551ea4(0x3f1)]()['isDead']()){if(this[_0x551ea4(0x719)]>0x0)this[_0x551ea4(0x719)]-=0x10;}else{if(SceneManager[_0x551ea4(0xd04)]['_enemyWindow']&&SceneManager['_scene'][_0x551ea4(0x973)][_0x551ea4(0x75e)]&&SceneManager['_scene'][_0x551ea4(0x973)][_0x551ea4(0xc42)][_0x551ea4(0x3af)](this['enemy']())){if(_0x551ea4(0xa57)===_0x551ea4(0xa57)){if(this[_0x551ea4(0x719)]<0xff)this[_0x551ea4(0x719)]+=0x10;}else _0x20e076[_0x551ea4(0xdc7)](_0x215a27);}else{if(this['contentsOpacity']>0x0){if(_0x551ea4(0x4ed)===_0x551ea4(0x4ed))this[_0x551ea4(0x719)]-=0x10;else{const _0x50f9d2=_0x19dc8e[_0x551ea4(0x8a8)](_0x566f7c['width']/0x3),_0x31d27b=_0x406138[_0x551ea4(0x92a)]((_0x1aa62d['boxWidth']-_0x50f9d2)/0x2),_0x492f2c=this['partyCommandWindowRectBorderStyle'](),_0x21bc59=_0x492f2c['y'],_0x49fdab=_0x492f2c[_0x551ea4(0x54b)];return new _0x57b68a(_0x31d27b,_0x21bc59,_0x50f9d2,_0x49fdab);}}}}}},Window_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x8a4)]=function(){const _0x30c2f9=_0x57e85a;if(!this[_0x30c2f9(0x3f1)]())return;if(SceneManager['isBattleFlipped']())this['x']=Graphics['boxWidth']-this[_0x30c2f9(0x3f1)]()[_0x30c2f9(0x3ab)]()['_baseX'];else{if('zHXmK'!==_0x30c2f9(0x8ca))return _0x82bd3f(_0x49c47d['$1']);else this['x']=this['enemy']()['battler']()[_0x30c2f9(0x4aa)];}this['x']-=Math[_0x30c2f9(0x92a)](this[_0x30c2f9(0x8b9)]/0x2),this['y']=this[_0x30c2f9(0x3f1)]()[_0x30c2f9(0x3ab)]()['_baseY']-Math['round'](this['lineHeight']()*1.5);const _0x2dc26d=VisuMZ['BattleCore'][_0x30c2f9(0x478)][_0x30c2f9(0xb30)];this['x']+=_0x2dc26d['NameOffsetX']||0x0,this['y']+=_0x2dc26d[_0x30c2f9(0x6a5)]||0x0;},Window_EnemyName['prototype'][_0x57e85a(0x210)]=function(){const _0x53359e=_0x57e85a;Window_Base[_0x53359e(0x16f)][_0x53359e(0x210)][_0x53359e(0xa23)](this),this[_0x53359e(0x887)][_0x53359e(0x28a)]=VisuMZ['BattleCore'][_0x53359e(0x478)][_0x53359e(0xb30)]['NameFontSize'];},Window_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0xa6a)]=function(){const _0x3a6cd3=_0x57e85a;Window_StatusBase[_0x3a6cd3(0x16f)]['refresh'][_0x3a6cd3(0xa23)](this),this['contents'][_0x3a6cd3(0x896)]();if(!this[_0x3a6cd3(0x3f1)]())return;this[_0x3a6cd3(0x295)]();},Window_EnemyName[_0x57e85a(0x16f)][_0x57e85a(0x295)]=function(){const _0x5f2958=_0x57e85a;this[_0x5f2958(0xe13)]=this[_0x5f2958(0x3f1)]()[_0x5f2958(0x7a3)]();const _0x569eb5=this['textSizeEx'](this[_0x5f2958(0xe13)])[_0x5f2958(0x8b9)],_0x568c93=Math[_0x5f2958(0x92a)]((this[_0x5f2958(0x9f5)]-_0x569eb5)/0x2);this[_0x5f2958(0xa50)](this[_0x5f2958(0xe13)],_0x568c93,0x0,_0x569eb5+0x8);},Window_BattleLog[_0x57e85a(0x16f)]['maxLines']=function(){const _0x374de5=_0x57e85a;return VisuMZ['BattleCore']['Settings']['BattleLog'][_0x374de5(0xaae)];},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xcb7)]=function(){const _0x28e39f=_0x57e85a;return VisuMZ[_0x28e39f(0x734)]['Settings'][_0x28e39f(0x52a)][_0x28e39f(0x2d2)];},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xd46)]=function(){const _0x277444=_0x57e85a;return VisuMZ[_0x277444(0x734)][_0x277444(0x478)]['BattleLog'][_0x277444(0x803)];},Window_BattleLog['prototype'][_0x57e85a(0xb92)]=function(){return![];},Window_BattleLog['prototype'][_0x57e85a(0x7d5)]=function(_0x392b96,_0x52314f){const _0x5ee75f=_0x57e85a;this[_0x5ee75f(0xd4e)](_0x5ee75f(0x9d2)),BattleManager[_0x5ee75f(0x37c)](_0x392b96,_0x52314f),this['callNextMethod']();},Window_BattleLog['prototype'][_0x57e85a(0xbf5)]=function(_0x5e9c7d,_0x32d2c6,_0x168cb2){const _0x3b626a=_0x57e85a;this[_0x3b626a(0xd4e)](_0x3b626a(0x9d2)),BattleManager['emulateAction'](_0x5e9c7d,_0x32d2c6,_0x168cb2),this['callNextMethod']();},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x9d2)]=function(){const _0x5a6ccd=_0x57e85a;this[_0x5a6ccd(0x8d9)]();},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x5fa)]=function(_0x360521){const _0x4b9f90=_0x57e85a,_0x5d9209=Array[_0x4b9f90(0x16f)]['slice'][_0x4b9f90(0xa23)](arguments,0x1),_0x4afa3d={'name':_0x360521,'params':_0x5d9209},_0x1e161f=this[_0x4b9f90(0x8e3)]['map'](_0x2269c5=>_0x2269c5[_0x4b9f90(0x7a3)])['indexOf'](_0x4b9f90(0x9d2));_0x1e161f>=0x0?this[_0x4b9f90(0x8e3)][_0x4b9f90(0x8ed)](_0x1e161f,0x0,_0x4afa3d):_0x4b9f90(0x968)!==_0x4b9f90(0x66a)?this[_0x4b9f90(0x8e3)]['push'](_0x4afa3d):(this[_0x4b9f90(0xc9b)]=_0x4c6515,this[_0x4b9f90(0x987)]=_0x50cff3);},Window_BattleLog['prototype'][_0x57e85a(0xd4e)]=function(_0x194b38){const _0x38ebd3=_0x57e85a,_0x5f0603=Array[_0x38ebd3(0x16f)][_0x38ebd3(0x241)][_0x38ebd3(0xa23)](arguments,0x1);this[_0x38ebd3(0x8e3)]['unshift']({'name':_0x194b38,'params':_0x5f0603});},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x302)]=function(){const _0x4c8c03=_0x57e85a;if(!$gameTemp[_0x4c8c03(0x48c)]())return;console[_0x4c8c03(0x43c)](this[_0x4c8c03(0x8e3)][_0x4c8c03(0x260)](_0x1aad92=>_0x1aad92[_0x4c8c03(0x7a3)])[_0x4c8c03(0xc7b)]('\x0a'));},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x462)]=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xa6a)],Window_BattleLog['prototype'][_0x57e85a(0xa6a)]=function(){const _0x1a6c94=_0x57e85a;this[_0x1a6c94(0x30d)]=!![];},VisuMZ[_0x57e85a(0x734)]['Window_BattleLog_update']=Window_BattleLog[_0x57e85a(0x16f)]['update'],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xa02)]=function(){const _0x14373c=_0x57e85a;VisuMZ[_0x14373c(0x734)]['Window_BattleLog_update'][_0x14373c(0xa23)](this);if(this[_0x14373c(0x30d)])this[_0x14373c(0x9eb)]();},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x9eb)]=function(){const _0x4a8e1e=_0x57e85a;this['_requestRefresh']=![],VisuMZ[_0x4a8e1e(0x734)][_0x4a8e1e(0x462)][_0x4a8e1e(0xa23)](this);},Window_BattleLog['prototype']['drawLineText']=function(_0x21047b){const _0x5c2972=_0x57e85a;let _0x3a2d00=VisuMZ['BattleCore'][_0x5c2972(0x478)][_0x5c2972(0x52a)][_0x5c2972(0x444)]['toLowerCase']()['trim'](),_0x350b41=this['_lines'][_0x21047b];if(_0x350b41[_0x5c2972(0x392)](/<LEFT>/i))_0x3a2d00='left';else{if(_0x350b41[_0x5c2972(0x392)](/<CENTER>/i)){if(_0x5c2972(0xb6c)!=='WjtUw')_0x3a2d00=_0x5c2972(0xc31);else{if(!_0x4bb5f5[_0x5c2972(0x4b2)]())return;_0x1bd7da[_0x5c2972(0x15e)](_0x12c811,_0x4bc104);const _0x8177f7=_0x4d645d[_0x5c2972(0xc21)](),_0x253747=_0x5eefd0[_0x5c2972(0xa77)],_0x3482a5=_0x162b49[_0x5c2972(0xa84)];if(!_0x8177f7)return;if(!_0x253747)return;_0x253747&&_0x253747[_0x5c2972(0xd6d)]()&&_0x3482a5['toUpperCase']()[_0x5c2972(0xdf5)]()!=='UNTITLED'&&_0x8177f7[_0x5c2972(0x484)]([_0x3482a5]);}}else _0x350b41[_0x5c2972(0x392)](/<RIGHT>/i)&&(_0x3a2d00=_0x5c2972(0x862));}_0x350b41=_0x350b41[_0x5c2972(0x795)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x350b41=_0x350b41[_0x5c2972(0x795)](/\\I\[0\]/gi,'');const _0x46ce97=this[_0x5c2972(0xca3)](_0x21047b);this[_0x5c2972(0x887)][_0x5c2972(0x791)](_0x46ce97['x'],_0x46ce97['y'],_0x46ce97['width'],_0x46ce97[_0x5c2972(0x54b)]);const _0x2a04e7=this[_0x5c2972(0x754)](_0x350b41)[_0x5c2972(0x8b9)];let _0x5ba670=_0x46ce97['x'];if(_0x3a2d00===_0x5c2972(0xc31)){if(_0x5c2972(0xa54)===_0x5c2972(0xa54))_0x5ba670+=(_0x46ce97[_0x5c2972(0x8b9)]-_0x2a04e7)/0x2;else{const _0x387323=new _0x328aba();_0x387323[_0x5c2972(0x632)]=_0xb900c4[_0x5c2972(0x95e)](_0x1085f4[_0x5c2972(0xc4f)]),_0x387323['x']=_0x25b401[_0x5c2972(0x361)]||0x0,_0x387323['y']=_0x2eab9d[_0x5c2972(0x4e0)]||0x0,this[_0x5c2972(0x67f)](_0x387323),this[_0x5c2972(0xd66)]=_0x387323;}}else{if(_0x3a2d00===_0x5c2972(0x862)){if(_0x5c2972(0x50c)===_0x5c2972(0x50c))_0x5ba670+=_0x46ce97['width']-_0x2a04e7;else{if(!_0x35c3f6[_0x5c2972(0x734)]['Settings'][_0x5c2972(0x52a)][_0x5c2972(0xce0)])return;_0x278274[_0x5c2972(0x734)][_0x5c2972(0x7e3)][_0x5c2972(0xa23)](this,_0x560e6a);}}}this[_0x5c2972(0xa50)](_0x350b41,_0x5ba670,_0x46ce97['y'],_0x2a04e7+0x8);},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x3fd)]=function(_0xf1224f){const _0x5e2142=_0x57e85a;this['_lines'][_0x5e2142(0x5fa)](_0xf1224f),this[_0x5e2142(0xa6a)](),this[_0x5e2142(0x8d9)]();},Window_BattleLog[_0x57e85a(0x16f)]['updateWaitMode']=function(){const _0x4a61c4=_0x57e85a;let _0x1f5b64=![];switch(this[_0x4a61c4(0x7a4)]){case'effect':_0x1f5b64=this['_spriteset'][_0x4a61c4(0xc2a)]();break;case _0x4a61c4(0x7bf):_0x1f5b64=this[_0x4a61c4(0x78d)][_0x4a61c4(0x57e)]();break;case _0x4a61c4(0x740):_0x1f5b64=this[_0x4a61c4(0x78d)][_0x4a61c4(0x86f)]();break;case _0x4a61c4(0x93e):_0x1f5b64=this[_0x4a61c4(0x78d)]['isAnyoneFloating']();break;case _0x4a61c4(0xc5a):_0x1f5b64=this['_spriteset'][_0x4a61c4(0x7fb)]();break;case _0x4a61c4(0x6a4):_0x1f5b64=this['_spriteset'][_0x4a61c4(0x94d)]();break;}return!_0x1f5b64&&(this['_waitMode']=''),_0x1f5b64;},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x8d7)]=function(){const _0x12e643=_0x57e85a;this[_0x12e643(0x1f9)]('animation');},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x8fd)]=function(){const _0x533155=_0x57e85a;this[_0x533155(0x1f9)](_0x533155(0x93e));},Window_BattleLog['prototype'][_0x57e85a(0x5ce)]=function(){const _0x20eeaa=_0x57e85a;this[_0x20eeaa(0x1f9)](_0x20eeaa(0xc5a));},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x226)]=function(){const _0x556928=_0x57e85a;this[_0x556928(0x1f9)]('opacity');},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x856)]=function(){const _0x4ff2a4=_0x57e85a,_0x18c918=VisuMZ[_0x4ff2a4(0x734)]['Settings'][_0x4ff2a4(0x52a)];if(!_0x18c918[_0x4ff2a4(0x70f)])return;this[_0x4ff2a4(0x5fa)](_0x4ff2a4(0x3fd),_0x18c918[_0x4ff2a4(0x1a1)][_0x4ff2a4(0x554)]($gameTroop['turnCount']())),this['push']('waitCount',_0x18c918[_0x4ff2a4(0xd11)]),this[_0x4ff2a4(0x5fa)]('clear');},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x310)]=function(_0x14ccbf,_0x8153e6,_0x4e365c){const _0x607ad4=_0x57e85a;if(this['isCustomActionSequence'](_0x8153e6)){if('BRGxU'===_0x607ad4(0x6b0))BattleManager[_0x607ad4(0x2f6)]();else{if(!_0x58d56b[_0x607ad4(0xe14)]())return;this[_0x607ad4(0x774)]=_0x16e699;const _0x3e9174=this[_0x607ad4(0x3ab)]();if(_0x3e9174)_0x3e9174[_0x607ad4(0xd4b)]();}}else _0x607ad4(0x7d9)!==_0x607ad4(0x702)?this[_0x607ad4(0x8bf)](_0x14ccbf,_0x8153e6,_0x4e365c):(this['_requestRefresh']=![],_0x4d76c0[_0x607ad4(0x734)]['Window_BattleLog_refresh']['call'](this));},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x474)]=function(_0x382f71){const _0xcd03c6=_0x57e85a;if(!SceneManager['isSceneBattle']())return![];if(!_0x382f71)return![];if(!_0x382f71[_0xcd03c6(0x2df)]())return![];if(_0x382f71['item']()[_0xcd03c6(0x40f)][_0xcd03c6(0x392)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0xcd03c6(0x212)](_0x382f71[_0xcd03c6(0x2df)]()))return!![];return![];},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x8bf)]=function(_0x4a0c5f,_0x1a0645,_0x573675){const _0x5068c1=_0x57e85a;this[_0x5068c1(0x321)](_0x4a0c5f,_0x1a0645,_0x573675),this[_0x5068c1(0xdaa)](_0x4a0c5f,_0x1a0645,_0x573675),this[_0x5068c1(0xd27)](_0x4a0c5f,_0x1a0645,_0x573675);},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x81f)]=function(_0x4cd8d5,_0x416aba){const _0x2d1b94=_0x57e85a,_0x2d8c37=VisuMZ[_0x2d1b94(0x734)][_0x2d1b94(0x478)][_0x2d1b94(0x52a)];_0x2d8c37['ActionCenteredName']&&this[_0x2d1b94(0x5fa)](_0x2d1b94(0x3fd),_0x2d1b94(0x440)[_0x2d1b94(0x554)](DataManager[_0x2d1b94(0x6ff)](_0x416aba)));if(DataManager[_0x2d1b94(0x49c)](_0x416aba)){if(_0x2d8c37[_0x2d1b94(0xb7c)])this[_0x2d1b94(0x57c)](_0x416aba[_0x2d1b94(0x9ae)],_0x4cd8d5,_0x416aba);if(_0x2d8c37[_0x2d1b94(0x653)])this['displayItemMessage'](_0x416aba[_0x2d1b94(0x7ac)],_0x4cd8d5,_0x416aba);}else{if(_0x2d1b94(0x6b1)!=='Zpvzv')return this[_0x2d1b94(0x489)]()&&!this[_0x2d1b94(0xe02)]()?this[_0x2d1b94(0x3ee)]():_0xa3ae5c[_0x2d1b94(0x734)]['Game_Action_needsSelection'][_0x2d1b94(0xa23)](this);else{if(_0x2d8c37['ActionItemMsg'])this[_0x2d1b94(0x57c)](TextManager[_0x2d1b94(0x506)],_0x4cd8d5,_0x416aba);}}},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x321)]=function(_0x517cf5,_0xd3f1d7,_0x1acf79){const _0x24aea2=_0x57e85a,_0x4e4e3c=_0xd3f1d7['item']();this[_0x24aea2(0x81f)](_0x517cf5,_0x4e4e3c),this[_0x24aea2(0x5fa)]('applyImmortal',_0x517cf5,_0x1acf79,!![]),this[_0x24aea2(0x5fa)](_0x24aea2(0x716),_0x517cf5,_0xd3f1d7),this['push'](_0x24aea2(0xd1d)),this[_0x24aea2(0x5fa)](_0x24aea2(0xab9),_0x517cf5,_0xd3f1d7),this[_0x24aea2(0x5fa)](_0x24aea2(0x8d7));},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xdaa)]=function(_0x50f78a,_0x486852,_0x2c2db3){const _0x216e65=_0x57e85a;if(this['isMeleeSingleTargetAction'](_0x486852))this['autoMeleeSingleTargetActionSet'](_0x50f78a,_0x486852,_0x2c2db3);else{if(this['isMeleeMultiTargetAction'](_0x486852))this[_0x216e65(0x6f0)](_0x50f78a,_0x486852,_0x2c2db3);else{if(_0x486852[_0x216e65(0x90e)]()){if(_0x216e65(0xb23)!=='kcolv'){if(this['constructor'][_0x216e65(0x7a3)]===_0x216e65(0x52f))return;if(this[_0x216e65(0x81d)]<=0x0)return;const _0x2c95f1=this[_0x216e65(0x81d)],_0x58c1fa=this['_opacityWholeDuration'],_0x40e7af=this[_0x216e65(0x591)];_0x454793[_0x216e65(0x376)]?this[_0x216e65(0x6a4)]=this[_0x216e65(0x3bb)](this[_0x216e65(0x6a4)],this[_0x216e65(0x582)],_0x2c95f1,_0x58c1fa,_0x40e7af):this[_0x216e65(0x6a4)]=(this[_0x216e65(0x6a4)]*(_0x2c95f1-0x1)+this[_0x216e65(0x582)])/_0x2c95f1;this[_0x216e65(0x81d)]--;if(this[_0x216e65(0x81d)]<=0x0)this[_0x216e65(0xae0)]();}else this[_0x216e65(0x5e2)](_0x50f78a,_0x486852,_0x2c2db3);}else _0x216e65(0x98e)==='mcvDp'?this[_0x216e65(0xbbe)]=![]:this[_0x216e65(0x976)](_0x50f78a,_0x486852,_0x2c2db3);}}},Window_BattleLog['prototype'][_0x57e85a(0xa27)]=function(_0x4b8ae8,_0x662960,_0x29728f,_0x1282ba){const _0x25ec11=_0x57e85a;if(_0x662960){const _0x278ad9=_0x4b8ae8['battler']();this[_0x25ec11(0x5fa)](_0x25ec11(0x98c),[_0x4b8ae8],_0x29728f,_0x1282ba),this[_0x25ec11(0x5fa)](_0x25ec11(0x3ed),_0x4b8ae8,_0x278ad9['_homeX'],_0x278ad9[_0x25ec11(0x8b6)],_0x1282ba,![],_0x25ec11(0x23a)),this[_0x25ec11(0x5fa)](_0x25ec11(0x4c9),[_0x4b8ae8],'evade'),this[_0x25ec11(0x5fa)](_0x25ec11(0xd1d)),this[_0x25ec11(0x5fa)](_0x25ec11(0x4c9),[_0x4b8ae8],_0x25ec11(0xb49));}},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xba8)]=function(_0x9afc97){const _0xf49ec0=_0x57e85a;if(!_0x9afc97[_0xf49ec0(0xd06)]())return![];if(!_0x9afc97[_0xf49ec0(0x703)]())return![];if(!_0x9afc97[_0xf49ec0(0x57b)]())return![];return VisuMZ[_0xf49ec0(0x734)][_0xf49ec0(0x478)][_0xf49ec0(0x7b8)]['AutoMeleeSolo'];},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xa3c)]=function(_0x720f43,_0x48211c,_0x5f156e){const _0x5719ca=_0x57e85a,_0x2f089a=_0x720f43[_0x5719ca(0x8f0)]()[_0x5719ca(0x24b)]<0x2,_0x1c033e=0x14,_0x71e6a2=0x30;let _0x502be3=!![];_0x5f156e[_0x5719ca(0xd36)]>0x0&&_0x720f43[_0x5719ca(0x7d1)]()===_0x5f156e[0x0][_0x5719ca(0x7d1)]()&&(_0x502be3=![]);_0x2f089a&&_0x502be3&&(_0x5719ca(0xbed)!==_0x5719ca(0x264)?(this[_0x5719ca(0x5fa)]('performJump',[_0x720f43],_0x71e6a2,_0x1c033e),this[_0x5719ca(0x5fa)](_0x5719ca(0x18e),_0x720f43,_0x5f156e,'front\x20base',_0x1c033e,!![],'Linear',!![]),this['push']('requestMotion',[_0x720f43],_0x5719ca(0xb49)),this[_0x5719ca(0x5fa)]('waitForMovement')):!this[_0x5719ca(0xdf6)]()&&!this[_0x5719ca(0x9e4)][_0x5719ca(0x782)]()&&(this[_0x5719ca(0x5a1)]=_0x5719ca(0x581)));let _0x135101=_0x48211c['isAttack']()?this[_0x5719ca(0x5f4)](_0x720f43):0x1;for(let _0x4eed80=0x0;_0x4eed80<_0x135101;_0x4eed80++){_0x48211c[_0x5719ca(0x8bd)]()&&_0x720f43[_0x5719ca(0x7d1)]()&&this[_0x5719ca(0x5fa)](_0x5719ca(0xb86),_0x720f43,_0x4eed80),_0x48211c['item']()[_0x5719ca(0x68e)]<0x0?_0x5719ca(0xbda)!==_0x5719ca(0x2c9)?this[_0x5719ca(0x5e2)](_0x720f43,_0x48211c,_0x5f156e):this[_0x5719ca(0xe17)]():this[_0x5719ca(0x976)](_0x720f43,_0x48211c,_0x5f156e);}_0x48211c['isAttack']()&&_0x720f43[_0x5719ca(0x7d1)]()&&(_0x5719ca(0x5c9)===_0x5719ca(0xc3a)?this[_0x5719ca(0x19f)]=!![]:this[_0x5719ca(0x5fa)]('clearActiveWeaponSet',_0x720f43)),this['push'](_0x5719ca(0x7ec),_0x720f43,_0x5f156e,![]),this[_0x5719ca(0xa27)](_0x720f43,_0x2f089a,_0x71e6a2,_0x1c033e);},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x6ec)]=function(_0x505743){const _0x345093=_0x57e85a;if(!_0x505743[_0x345093(0xd06)]())return![];if(!_0x505743[_0x345093(0x585)]())return![];if(!_0x505743[_0x345093(0x57b)]())return![];return VisuMZ[_0x345093(0x734)][_0x345093(0x478)][_0x345093(0x7b8)]['AutoMeleeAoE'];},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x6f0)]=function(_0x4e7633,_0x13956a,_0x5ae3ac){const _0x1771dd=_0x57e85a,_0x3115c9=_0x4e7633[_0x1771dd(0x8f0)]()[_0x1771dd(0x24b)]<0x2,_0x571ed7=0x14,_0x3f5996=0x30;if(_0x3115c9){this[_0x1771dd(0x5fa)](_0x1771dd(0x98c),[_0x4e7633],_0x3f5996,_0x571ed7);const _0x53b65d=_0x5ae3ac[_0x1771dd(0xd36)]>0x1?_0x1771dd(0xc78):_0x1771dd(0x5be);this[_0x1771dd(0x5fa)](_0x1771dd(0x18e),_0x4e7633,_0x5ae3ac,_0x53b65d,_0x571ed7,!![],_0x1771dd(0x23a),!![]),this[_0x1771dd(0x5fa)](_0x1771dd(0x4c9),[_0x4e7633],_0x1771dd(0xb49)),this[_0x1771dd(0x5fa)]('waitForMovement');}let _0x315a25=_0x13956a['isAttack']()?this[_0x1771dd(0x5f4)](_0x4e7633):0x1;for(let _0x3ecdf2=0x0;_0x3ecdf2<_0x315a25;_0x3ecdf2++){_0x13956a[_0x1771dd(0x8bd)]()&&_0x4e7633['isActor']()&&('NuZAd'!==_0x1771dd(0x426)?this[_0x1771dd(0x5fa)](_0x1771dd(0xb86),_0x4e7633,_0x3ecdf2):(_0x23ae72[_0x1771dd(0x16f)][_0x1771dd(0xca4)][_0x1771dd(0xa23)](this,_0x14b8a3),this['performActionMotions'](_0x103bfe))),this['wholeActionSet'](_0x4e7633,_0x13956a,_0x5ae3ac);}_0x13956a[_0x1771dd(0x8bd)]()&&_0x4e7633[_0x1771dd(0x7d1)]()&&this[_0x1771dd(0x5fa)](_0x1771dd(0x5b8),_0x4e7633),this[_0x1771dd(0x5fa)]('applyImmortal',_0x4e7633,_0x5ae3ac,![]),this[_0x1771dd(0xa27)](_0x4e7633,_0x3115c9,_0x3f5996,_0x571ed7);},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x5e2)]=function(_0x2850f7,_0x336d59,_0x557dc7){const _0x515141=_0x57e85a,_0x169bf6=_0x336d59[_0x515141(0x2df)]();for(const _0x211598 of _0x557dc7){if(_0x515141(0x9f4)!==_0x515141(0x9f4)){const _0xc7a50=this[_0x515141(0x6e0)](_0x32310f),_0x323b88=new(_0xc7a50?_0x207909:_0x45d8d8)(),_0x50c5e0=this['makeTargetSprites'](_0x4c1735);this[_0x515141(0x9c4)](_0x3d415b[0x0])&&(_0x37f6e8=!_0x15c37b),_0x323b88[_0x515141(0x5e6)]=_0x245f28,_0x323b88['setup'](_0x50c5e0,_0x224a46,_0x55245d,_0x35409e),this[_0x515141(0xdd2)](_0x323b88);}else{if(!_0x211598)continue;this[_0x515141(0x5fa)](_0x515141(0xca4),_0x2850f7,_0x336d59),this[_0x515141(0x5fa)]('waitCount',Sprite_Battler['_motionSpeed']),this[_0x515141(0x5fa)](_0x515141(0x80b),_0x2850f7,[_0x211598],_0x169bf6['animationId']),this[_0x515141(0x5fa)](_0x515141(0x873),0x18),this[_0x515141(0x5fa)](_0x515141(0x7d5),_0x2850f7,_0x211598);}}},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x976)]=function(_0x40a3b5,_0x407c3c,_0x260c23){const _0x4ce790=_0x57e85a,_0x27d5b9=_0x407c3c[_0x4ce790(0x2df)]();let _0x123411=_0x407c3c[_0x4ce790(0x8bd)]()?0x1+_0x40a3b5[_0x4ce790(0x6ab)]():0x1;while(_0x123411--){if('dznXS'!==_0x4ce790(0x6b3))return _0x48d54b['BattleCore'][_0x4ce790(0x328)][_0x4ce790(0xa23)](this);else this[_0x4ce790(0x5fa)](_0x4ce790(0xca4),_0x40a3b5,_0x407c3c),this[_0x4ce790(0x5fa)]('waitCount',Sprite_Battler[_0x4ce790(0xda2)]),this[_0x4ce790(0x5fa)](_0x4ce790(0x80b),_0x40a3b5,_0x260c23[_0x4ce790(0xda8)](),_0x27d5b9[_0x4ce790(0x68e)]),this['push'](_0x4ce790(0x8d7));}for(const _0x4b1e6c of _0x260c23){if(_0x4ce790(0xc41)===_0x4ce790(0x85b)){const _0x46ba18=this[_0x4ce790(0xbca)](this[_0x4ce790(0x8c8)]());let _0x5842f6=this[_0x4ce790(0x276)](this[_0x4ce790(0x8c8)]());_0x5842f6=_0x5842f6[_0x4ce790(0x795)](/\\I\[(\d+)\]/gi,''),_0x1e19d5[_0x4ce790(0x210)](),this['commandNameWindowDrawBackground'](_0x5842f6,_0x46ba18),this['commandNameWindowDrawText'](_0x5842f6,_0x46ba18),this[_0x4ce790(0x160)](_0x5842f6,_0x46ba18);}else{if(!_0x4b1e6c)continue;this[_0x4ce790(0x5fa)](_0x4ce790(0x7d5),_0x40a3b5,_0x4b1e6c);}}},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xd27)]=function(_0x4ce313,_0x52da9b,_0x4a69b4){const _0x3184f3=_0x57e85a,_0x26d696=_0x52da9b['item']();this[_0x3184f3(0x5fa)]('applyImmortal',_0x4ce313,_0x4a69b4,![]),this['push'](_0x3184f3(0x2d0)),this['push']('waitForEffect'),this['push'](_0x3184f3(0x896)),this[_0x3184f3(0x5fa)](_0x3184f3(0x1c9),_0x4ce313),this['push']('waitForMovement');},Window_BattleLog['prototype'][_0x57e85a(0x9ec)]=function(_0x1cf8e3){},VisuMZ['BattleCore']['Window_BattleLog_displayCurrentState']=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x698)],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x698)]=function(_0xa4fa28){const _0x403e0e=_0x57e85a;if(!VisuMZ[_0x403e0e(0x734)][_0x403e0e(0x478)][_0x403e0e(0x52a)]['ShowCurrentState'])return;VisuMZ[_0x403e0e(0x734)][_0x403e0e(0x9d3)][_0x403e0e(0xa23)](this,_0xa4fa28);},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x6b9)]=function(_0x20f44e){const _0x49c4c8=_0x57e85a;this[_0x49c4c8(0x5fa)](_0x49c4c8(0x7ca),_0x20f44e);VisuMZ[_0x49c4c8(0x734)][_0x49c4c8(0x478)]['ActionSequence'][_0x49c4c8(0x840)]&&this['push'](_0x49c4c8(0x80b),_0x20f44e,[BattleManager[_0x49c4c8(0xa77)]],-0x1);if(!VisuMZ[_0x49c4c8(0x734)]['Settings'][_0x49c4c8(0x52a)]['ShowCounter'])return;this[_0x49c4c8(0x5fa)](_0x49c4c8(0x3fd),TextManager[_0x49c4c8(0xc02)][_0x49c4c8(0x554)](_0x20f44e[_0x49c4c8(0x7a3)]()));},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x889)]=function(_0x41ae2f){const _0x3569d5=_0x57e85a;this[_0x3569d5(0x5fa)]('performReflection',_0x41ae2f);if(!VisuMZ[_0x3569d5(0x734)][_0x3569d5(0x478)]['BattleLog'][_0x3569d5(0x269)])return;this[_0x3569d5(0x5fa)](_0x3569d5(0x3fd),TextManager['magicReflection'][_0x3569d5(0x554)](_0x41ae2f[_0x3569d5(0x7a3)]()));},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xc8c)]=function(_0x49efcf,_0xadf797){const _0x1a1cdf=_0x57e85a;if(VisuMZ['BattleCore'][_0x1a1cdf(0x478)][_0x1a1cdf(0x7b8)]['ReflectPlayback']){if(_0x1a1cdf(0x369)===_0x1a1cdf(0x369)){const _0x277e00=_0xadf797['item']();this[_0x1a1cdf(0x5fa)](_0x1a1cdf(0x80b),_0x49efcf,[_0x49efcf],_0x277e00[_0x1a1cdf(0x68e)]);}else{const _0x1db999=_0x28935f['BattleCore'][_0x1a1cdf(0x478)][_0x1a1cdf(0xcab)][_0x1a1cdf(0xbdf)],_0x3bf282=_0x2bf9e0[_0x1a1cdf(0x92a)](_0x10cd36[_0x1a1cdf(0x418)]/0x3),_0x4defcc=_0x50e876['round'](_0x5323c0[_0x1a1cdf(0x418)]/_0x147816[_0x1a1cdf(0x57d)]()[_0x1a1cdf(0xd36)]),_0x7ffb13=_0x4d6a9b[_0x1a1cdf(0xde7)](_0x57d767[_0x1a1cdf(0x16e)](_0x3bf282,_0x4defcc),_0x1db999),_0xb71ef8=this[_0x1a1cdf(0xae8)](_0x1aab7d[_0x1a1cdf(0x734)][_0x1a1cdf(0x478)][_0x1a1cdf(0xcab)][_0x1a1cdf(0xddf)]),_0x542d72=_0x2add2e[_0x1a1cdf(0x7f8)]((_0x34de17['boxWidth']-_0x34f80c[_0x1a1cdf(0x8b9)])/0x2),_0x4a16e8=_0x273121[_0x1a1cdf(0x418)]-_0x542d72,_0x5e7d57=(_0x7b407b[_0x1a1cdf(0x92a)](_0x4defcc*_0x126108[_0x1a1cdf(0x8c8)]())+_0x7d1176[_0x1a1cdf(0x92a)]((_0x4defcc-_0x7ffb13)/0x2))[_0x1a1cdf(0x1fc)](_0x542d72,_0x4a16e8-_0x7ffb13),_0x109c06=_0x4158c9[_0x1a1cdf(0x92a)](_0x52aed6[_0x1a1cdf(0xd04)][_0x1a1cdf(0x912)]['y']-_0xb71ef8);this['move'](_0x5e7d57,_0x109c06,_0x7ffb13,_0xb71ef8),this[_0x1a1cdf(0x9dd)](),this[_0x1a1cdf(0x337)](0x1);}}},Window_BattleLog['prototype'][_0x57e85a(0x982)]=function(_0x91b653,_0x4a29a3){const _0x40f457=_0x57e85a;this['push'](_0x40f457(0x4e8),_0x91b653,_0x4a29a3);if(!VisuMZ[_0x40f457(0x734)]['Settings'][_0x40f457(0x52a)][_0x40f457(0x5b9)])return;const _0x41977e=_0x91b653[_0x40f457(0x7a3)](),_0x62ce18=TextManager[_0x40f457(0xd79)][_0x40f457(0x554)](_0x41977e,_0x4a29a3[_0x40f457(0x7a3)]());this['push'](_0x40f457(0x3fd),_0x62ce18);},VisuMZ[_0x57e85a(0x734)]['Window_BattleLog_displayActionResults']=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x545)],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x545)]=function(_0xd6f209,_0x2a630f){const _0xb1096e=_0x57e85a;VisuMZ[_0xb1096e(0x734)][_0xb1096e(0xc10)][_0xb1096e(0xa23)](this,_0xd6f209,_0x2a630f);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xb97)]=Window_BattleLog[_0x57e85a(0x16f)]['displayFailure'],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xc2e)]=function(_0x20f2c1){const _0x468ab5=_0x57e85a;if(!VisuMZ[_0x468ab5(0x734)][_0x468ab5(0x478)][_0x468ab5(0x52a)]['ShowFailure'])return;VisuMZ['BattleCore'][_0x468ab5(0xb97)][_0x468ab5(0xa23)](this,_0x20f2c1);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x738)]=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x3c1)],Window_BattleLog['prototype'][_0x57e85a(0x3c1)]=function(_0x32dc51){const _0x5487d1=_0x57e85a;if(!VisuMZ[_0x5487d1(0x734)][_0x5487d1(0x478)]['BattleLog'][_0x5487d1(0xdd3)])return;VisuMZ[_0x5487d1(0x734)]['Window_BattleLog_displayCritical'][_0x5487d1(0xa23)](this,_0x32dc51);},VisuMZ[_0x57e85a(0x734)]['Window_BattleLog_displayMiss']=Window_BattleLog[_0x57e85a(0x16f)]['displayMiss'],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x756)]=function(_0x2c8fad){const _0x2155e6=_0x57e85a;!VisuMZ[_0x2155e6(0x734)][_0x2155e6(0x478)][_0x2155e6(0x52a)][_0x2155e6(0x4c2)]?_0x2155e6(0x507)===_0x2155e6(0x507)?this[_0x2155e6(0x5fa)](_0x2155e6(0x7d6),_0x2c8fad):(this[_0x2155e6(0xb44)](_0x32c816)?(this[_0x2155e6(0x3b8)]()['addChild'](_0x2832c0),_0x34ff0f[_0x2155e6(0xd29)]=!![]):(this[_0x2155e6(0x867)][_0x2155e6(0x67f)](_0x24f544),_0x3212a6[_0x2155e6(0x6bc)]&&(this['_animationContainer']['x']=this['_effectsContainer']['x'],this[_0x2155e6(0x867)]['y']=this[_0x2155e6(0x5a4)]['y'])),this[_0x2155e6(0x61b)][_0x2155e6(0x5fa)](_0x4124ff)):VisuMZ['BattleCore'][_0x2155e6(0xae2)][_0x2155e6(0xa23)](this,_0x2c8fad);},VisuMZ['BattleCore']['Window_BattleLog_displayEvasion']=Window_BattleLog[_0x57e85a(0x16f)]['displayEvasion'],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x3ca)]=function(_0x57a8f2){const _0x251760=_0x57e85a;if(!VisuMZ[_0x251760(0x734)][_0x251760(0x478)]['BattleLog'][_0x251760(0x4c2)]){if(_0x57a8f2[_0x251760(0x2b9)]()[_0x251760(0x760)]){if(_0x251760(0x725)!==_0x251760(0x725))return this[_0x251760(0x27c)]!==_0x251760(0x373)?_0x1cf468[_0x251760(0x734)][_0x251760(0x478)]['HpGauge']['AniDuration']??0x14:_0x218d8d[_0x251760(0x734)]['Sprite_Gauge_smoothness'][_0x251760(0xa23)](this);else this[_0x251760(0x5fa)](_0x251760(0xbf3),_0x57a8f2);}else{if(_0x251760(0xdde)==='bEHRq')this[_0x251760(0x5fa)]('performMagicEvasion',_0x57a8f2);else return _0x58e522[_0x251760(0xd04)][_0x251760(0x78d)][_0x251760(0x2cc)](_0x2e696f[0x0],_0x558864[0x1]),!![];}}else{if(_0x251760(0x318)===_0x251760(0x318))VisuMZ[_0x251760(0x734)]['Window_BattleLog_displayEvasion'][_0x251760(0xa23)](this,_0x57a8f2);else return _0x47f4a4[_0x251760(0x734)][_0x251760(0x478)]['Actor'][_0x251760(0x30c)];}},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x541)]=function(_0x4b592f){const _0x410d29=_0x57e85a;if(_0x4b592f[_0x410d29(0x2b9)]()[_0x410d29(0x741)]){if(_0x410d29(0x382)!==_0x410d29(0x232)){_0x4b592f['_lastHpDamage']=0x0;if(_0x4b592f[_0x410d29(0x2b9)]()['hpDamage']>0x0&&!_0x4b592f[_0x410d29(0x2b9)]()['drain']){if(_0x410d29(0xb29)==='arxCU')_0x4b592f[_0x410d29(0x413)]=_0x4b592f[_0x410d29(0x2b9)]()['hpDamage'],this[_0x410d29(0x5fa)](_0x410d29(0xa1c),_0x4b592f);else return[_0x410d29(0xa2b),'guard',_0x410d29(0x3a3)][_0x410d29(0x3af)](this['_actorCommandWindow']['currentSymbol']());}if(_0x4b592f['result']()[_0x410d29(0xaeb)]<0x0){if(_0x410d29(0xd1a)===_0x410d29(0xd1a))this[_0x410d29(0x5fa)](_0x410d29(0xc9d),_0x4b592f);else{if(this[_0x410d29(0x89c)]===_0x2f6997)this[_0x410d29(0x4a8)]();return this[_0x410d29(0x89c)];}}VisuMZ[_0x410d29(0x734)][_0x410d29(0x478)][_0x410d29(0x52a)][_0x410d29(0x69a)]&&this[_0x410d29(0x5fa)]('addText',this['makeHpDamageText'](_0x4b592f));}else return _0x2d022a(_0x34a45c['$1']);}},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x7e3)]=Window_BattleLog['prototype'][_0x57e85a(0x2c3)],Window_BattleLog['prototype'][_0x57e85a(0x2c3)]=function(_0xc70ee3){const _0xab5957=_0x57e85a;if(!VisuMZ[_0xab5957(0x734)][_0xab5957(0x478)][_0xab5957(0x52a)][_0xab5957(0xce0)])return;VisuMZ[_0xab5957(0x734)]['Window_BattleLog_displayMpDamage'][_0xab5957(0xa23)](this,_0xc70ee3);},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x8a0)]=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x55e)],Window_BattleLog['prototype'][_0x57e85a(0x55e)]=function(_0x42a9a5){const _0x248505=_0x57e85a;if(!VisuMZ[_0x248505(0x734)][_0x248505(0x478)]['BattleLog'][_0x248505(0xbcc)])return;VisuMZ[_0x248505(0x734)][_0x248505(0x8a0)][_0x248505(0xa23)](this,_0x42a9a5);},Window_BattleLog[_0x57e85a(0x16f)]['displayAffectedStatus']=function(_0x36bbc8){const _0x4d6652=_0x57e85a;if(_0x36bbc8['result']()[_0x4d6652(0xcdd)]()){if('RSCZB'===_0x4d6652(0x4de)){if(_0x5a20af[_0x4d6652(0xad6)]()&&this[_0x4d6652(0xac9)]===_0x4d6652(0x852))return this[_0x4d6652(0xd8b)]()?this[_0x4d6652(0x8ab)]()&&this[_0x4d6652(0x8ab)]()[_0x4d6652(0x2df)]()&&!this[_0x4d6652(0x8ab)]()[_0x4d6652(0xcba)]():this[_0x4d6652(0x8ab)]()&&this['currentAction']()[_0x4d6652(0x2df)]()&&!this[_0x4d6652(0x8ab)]()[_0x4d6652(0xac7)]();return![];}else this[_0x4d6652(0x5fa)](_0x4d6652(0x1b2)),this[_0x4d6652(0x4da)](_0x36bbc8),this['displayChangedBuffs'](_0x36bbc8),this[_0x4d6652(0x5fa)](_0x4d6652(0x2d0));}},Window_BattleLog['prototype'][_0x57e85a(0x9e6)]=function(_0x5c1233){const _0x54b94b=_0x57e85a,_0x49a237=_0x5c1233[_0x54b94b(0x2b9)](),_0x40a7b1=_0x49a237['addedStateObjects']();for(const _0x291d4a of _0x40a7b1){if(_0x54b94b(0xdf2)===_0x54b94b(0x4ea)){const _0x1e8747=this[_0x54b94b(0x2df)]()['scope'];if(_0x1e8747[_0x54b94b(0x392)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}else{const _0x303961=_0x5c1233[_0x54b94b(0x7d1)]()?_0x291d4a[_0x54b94b(0x9ae)]:_0x291d4a[_0x54b94b(0x7ac)];_0x303961&&VisuMZ[_0x54b94b(0x734)][_0x54b94b(0x478)][_0x54b94b(0x52a)][_0x54b94b(0x81c)]&&('JyXoj'!==_0x54b94b(0x665)?(this['_targetAngle']=0x0,this[_0x54b94b(0x83d)]=0x0):(this[_0x54b94b(0x5fa)](_0x54b94b(0x768)),this[_0x54b94b(0x5fa)](_0x54b94b(0x2e2)),this[_0x54b94b(0x5fa)]('pushBaseLine'),this['push'](_0x54b94b(0x3fd),_0x303961[_0x54b94b(0x554)](_0x5c1233['name']())),this[_0x54b94b(0x5fa)](_0x54b94b(0x674)))),_0x291d4a['id']===_0x5c1233[_0x54b94b(0x91e)]()&&(_0x54b94b(0x3ac)===_0x54b94b(0x3ac)?this[_0x54b94b(0x5fa)](_0x54b94b(0x932),_0x5c1233):(_0x3a9e91*=-0x1,_0x5910bb*=-0x1));}}},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x768)]=function(){},Window_BattleLog['prototype']['displayRemovedStates']=function(_0x161c4d){const _0x3eff51=_0x57e85a;if(!VisuMZ['BattleCore'][_0x3eff51(0x478)]['BattleLog'][_0x3eff51(0x7fa)])return;const _0x2af91e=_0x161c4d[_0x3eff51(0x2b9)](),_0x480227=_0x2af91e[_0x3eff51(0xb1f)]();for(const _0x4cf260 of _0x480227){if(_0x4cf260[_0x3eff51(0x4b0)]){if('JTGqb'===_0x3eff51(0xc04))this[_0x3eff51(0x5fa)]('fnordRemovedStates'),this['push'](_0x3eff51(0x2e2)),this['push'](_0x3eff51(0x1b2)),this['push']('addText',_0x4cf260[_0x3eff51(0x4b0)][_0x3eff51(0x554)](_0x161c4d[_0x3eff51(0x7a3)]())),this[_0x3eff51(0x5fa)](_0x3eff51(0x674));else{if(!this[_0x3eff51(0xb08)])return;if(!this['_hpGaugeSprite'])return;const _0x3ce011=_0x5503b2[_0x3eff51(0x734)][_0x3eff51(0x478)][_0x3eff51(0x6bd)],_0x307937=this['_hpGaugeSprite'];_0x307937['visible']=this[_0x3eff51(0x697)]();const _0x203e36=_0x3ce011[_0x3eff51(0xc3c)],_0xf8f266=_0x3ce011[_0x3eff51(0xa95)];_0x307937['x']=_0x203e36,_0x307937['x']+=this[_0x3eff51(0xb08)][_0x3eff51(0x510)](),_0x307937['y']=-this['height']+_0xf8f266,_0x307937['y']+=this[_0x3eff51(0xb08)][_0x3eff51(0x6c1)](),_0x510c19[_0x3eff51(0x6bc)]&&_0x3a7222[_0x3eff51(0xd04)][_0x3eff51(0x78d)]&&(_0x307937['x']+=this['x'],_0x307937['y']+=this['y']);}}}},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xcb2)]=function(){},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x29a)]=function(_0x246d89){const _0x21ad27=_0x57e85a,_0x2fdc73=VisuMZ[_0x21ad27(0x734)][_0x21ad27(0x478)][_0x21ad27(0x52a)],_0x2ae70a=_0x246d89['result']();if(_0x2fdc73['ShowAddedBuff'])this['displayBuffs'](_0x246d89,_0x2ae70a['addedBuffs'],TextManager[_0x21ad27(0x863)]);if(_0x2fdc73[_0x21ad27(0xa6e)])this[_0x21ad27(0xc4a)](_0x246d89,_0x2ae70a[_0x21ad27(0x6c7)],TextManager['debuffAdd']);if(_0x2fdc73['ShowRemovedBuff'])this[_0x21ad27(0xc4a)](_0x246d89,_0x2ae70a[_0x21ad27(0x390)],TextManager[_0x21ad27(0x4cd)]);},Window_BattleLog[_0x57e85a(0x16f)]['displayBuffs']=function(_0x22238b,_0x39878c,_0x5e90ce){const _0x21192e=_0x57e85a;for(const _0x75305f of _0x39878c){const _0x251ee5=_0x5e90ce[_0x21192e(0x554)](_0x22238b['name'](),TextManager[_0x21192e(0x86e)](_0x75305f));this[_0x21192e(0x5fa)](_0x21192e(0x2e2)),this['push'](_0x21192e(0x1b2)),this[_0x21192e(0x5fa)](_0x21192e(0x3fd),_0x251ee5),this['push'](_0x21192e(0x674));}},VisuMZ['BattleCore'][_0x57e85a(0x839)]=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x896)],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x896)]=function(){const _0x23dbd7=_0x57e85a;VisuMZ[_0x23dbd7(0x734)]['Window_BattleLog_clear'][_0x23dbd7(0xa23)](this),this['callNextMethod']();},VisuMZ['BattleCore'][_0x57e85a(0xd03)]=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x1b2)],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x1b2)]=function(){const _0x4101d6=_0x57e85a;VisuMZ[_0x4101d6(0x734)]['Window_BattleLog_pushBaseLine']['call'](this),this[_0x4101d6(0x8d9)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x817)]=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x2e2)],Window_BattleLog[_0x57e85a(0x16f)]['popBaseLine']=function(){const _0x5291be=_0x57e85a;VisuMZ[_0x5291be(0x734)][_0x5291be(0x817)]['call'](this),this['processRefresh'](),this[_0x5291be(0x8d9)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x9fa)]=Window_BattleLog['prototype'][_0x57e85a(0x671)],Window_BattleLog[_0x57e85a(0x16f)]['popupDamage']=function(_0x1a7e56){const _0x1ee87e=_0x57e85a;VisuMZ[_0x1ee87e(0x734)][_0x1ee87e(0x9fa)][_0x1ee87e(0xa23)](this,_0x1a7e56),this[_0x1ee87e(0x8d9)]();},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x2d0)]=function(){const _0x2c44f3=_0x57e85a;let _0x1057f7=0x0;this[_0x2c44f3(0x77e)][_0x2c44f3(0xd36)]>0x0&&(_0x2c44f3(0x7cd)!=='zdMmL'?_0x1057f7=this[_0x2c44f3(0x77e)][this['_baseLineStack'][_0x2c44f3(0xd36)]-0x1]:this[_0x2c44f3(0xa12)]()),this[_0x2c44f3(0xbef)][_0x2c44f3(0xd36)]>_0x1057f7?this[_0x2c44f3(0x674)]():'TnhRl'===_0x2c44f3(0x2de)?_0xadb111[_0x2c44f3(0x734)][_0x2c44f3(0xc64)][_0x2c44f3(0xa23)](this,_0x2ce01a):this[_0x2c44f3(0x8d9)]();},VisuMZ['BattleCore'][_0x57e85a(0x954)]=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x716)],Window_BattleLog['prototype'][_0x57e85a(0x716)]=function(_0x5cc9b6,_0x5b6e93){const _0x24be5d=_0x57e85a;VisuMZ['BattleCore']['Window_BattleLog_performActionStart'][_0x24be5d(0xa23)](this,_0x5cc9b6,_0x5b6e93),this['callNextMethod']();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x6de)]=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xca4)],Window_BattleLog[_0x57e85a(0x16f)]['performAction']=function(_0x25f1c8,_0x39cd69){const _0x58ebec=_0x57e85a;VisuMZ[_0x58ebec(0x734)][_0x58ebec(0x6de)][_0x58ebec(0xa23)](this,_0x25f1c8,_0x39cd69),this[_0x58ebec(0x8d9)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xa7a)]=Window_BattleLog['prototype'][_0x57e85a(0x1c9)],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x1c9)]=function(_0x315cf1){const _0x193f19=_0x57e85a;VisuMZ['BattleCore'][_0x193f19(0xa7a)][_0x193f19(0xa23)](this,_0x315cf1);for(const _0x294e0a of BattleManager[_0x193f19(0x3ef)]()){if(!_0x294e0a)continue;if(_0x294e0a[_0x193f19(0xd6d)]())continue;_0x294e0a[_0x193f19(0x2c0)]();}this[_0x193f19(0x8d9)]();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x667)]=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xa1c)],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xa1c)]=function(_0x3c6a20){const _0x4b096f=_0x57e85a;VisuMZ[_0x4b096f(0x734)][_0x4b096f(0x667)][_0x4b096f(0xa23)](this,_0x3c6a20),this[_0x4b096f(0x8d9)]();},VisuMZ['BattleCore']['Window_BattleLog_performMiss']=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x7d6)],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x7d6)]=function(_0x4d9c6c){const _0x3db3ae=_0x57e85a;VisuMZ[_0x3db3ae(0x734)][_0x3db3ae(0x8ac)][_0x3db3ae(0xa23)](this,_0x4d9c6c),this[_0x3db3ae(0x8d9)]();},VisuMZ[_0x57e85a(0x734)]['Window_BattleLog_performRecovery']=Window_BattleLog['prototype']['performRecovery'],Window_BattleLog['prototype'][_0x57e85a(0xc9d)]=function(_0x2c9c99){const _0x55cb32=_0x57e85a;VisuMZ['BattleCore'][_0x55cb32(0xa51)]['call'](this,_0x2c9c99),this[_0x55cb32(0x8d9)]();},VisuMZ['BattleCore'][_0x57e85a(0x351)]=Window_BattleLog[_0x57e85a(0x16f)]['performEvasion'],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0xbf3)]=function(_0x50aacc){const _0x373263=_0x57e85a;VisuMZ[_0x373263(0x734)]['Window_BattleLog_performEvasion']['call'](this,_0x50aacc),this[_0x373263(0x8d9)]();},VisuMZ[_0x57e85a(0x734)]['Window_BattleLog_performMagicEvasion']=Window_BattleLog['prototype'][_0x57e85a(0x3fb)],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x3fb)]=function(_0x4c50b0){const _0x1d03ce=_0x57e85a;VisuMZ[_0x1d03ce(0x734)][_0x1d03ce(0xa1d)]['call'](this,_0x4c50b0),this[_0x1d03ce(0x8d9)]();},VisuMZ[_0x57e85a(0x734)]['Window_BattleLog_performCounter']=Window_BattleLog['prototype'][_0x57e85a(0x7ca)],Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x7ca)]=function(_0x44ab3f){const _0x5cc25d=_0x57e85a;VisuMZ[_0x5cc25d(0x734)][_0x5cc25d(0xda6)][_0x5cc25d(0xa23)](this,_0x44ab3f),this[_0x5cc25d(0x8d9)]();},VisuMZ['BattleCore'][_0x57e85a(0x412)]=Window_BattleLog[_0x57e85a(0x16f)]['performReflection'],Window_BattleLog['prototype'][_0x57e85a(0xb4f)]=function(_0x3a8a34){const _0x4954be=_0x57e85a;VisuMZ[_0x4954be(0x734)][_0x4954be(0x412)]['call'](this,_0x3a8a34),this['callNextMethod']();},VisuMZ[_0x57e85a(0x734)][_0x57e85a(0xb9a)]=Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x4e8)],Window_BattleLog['prototype'][_0x57e85a(0x4e8)]=function(_0x261062,_0x4a431b){const _0x189700=_0x57e85a;VisuMZ[_0x189700(0x734)][_0x189700(0xb9a)][_0x189700(0xa23)](this,_0x261062,_0x4a431b),this[_0x189700(0x8d9)]();},VisuMZ['BattleCore'][_0x57e85a(0xc70)]=Window_BattleLog[_0x57e85a(0x16f)]['performCollapse'],Window_BattleLog[_0x57e85a(0x16f)]['performCollapse']=function(_0x225404){const _0x4424cb=_0x57e85a;VisuMZ[_0x4424cb(0x734)][_0x4424cb(0xc70)]['call'](this,_0x225404),this[_0x4424cb(0x8d9)]();},Window_BattleLog['prototype']['performCastAnimation']=function(_0x17a948,_0x3673f5){const _0x2f2be3=_0x57e85a;_0x17a948[_0x2f2be3(0xab9)](_0x3673f5),this[_0x2f2be3(0x8d9)]();},Window_BattleLog[_0x57e85a(0x16f)]['showEnemyAttackAnimation']=function(_0x4cef95,_0x1b1bc2){const _0x38644e=_0x57e85a,_0x7a6ec2=_0x4cef95[_0x38644e(0xbd9)]();_0x7a6ec2<=0x0?_0x38644e(0xdb6)!==_0x38644e(0xdb6)?_0x387b56[_0x38644e(0x7a3)]=_0x58baa9(_0x3e5952['$1']):SoundManager[_0x38644e(0x23f)]():this[_0x38644e(0x2ce)](_0x1b1bc2,_0x7a6ec2);},Window_BattleLog['prototype']['applyImmortal']=function(_0x2ba272,_0x174744,_0x4a10cf){const _0x17298a=_0x57e85a,_0x5ef654=[_0x2ba272][_0x17298a(0x60f)](_0x174744);for(const _0x40ca13 of _0x5ef654){if(!_0x40ca13)continue;_0x40ca13[_0x17298a(0x861)](_0x4a10cf);}this[_0x17298a(0x8d9)]();},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x873)]=function(_0x33500e){const _0x55be4a=_0x57e85a;this[_0x55be4a(0xb40)]=_0x33500e;},Window_BattleLog['prototype']['requestMotion']=function(_0x172f98,_0x32bd9c){const _0x534e64=_0x57e85a;for(const _0x2a4629 of _0x172f98){if(_0x534e64(0xd91)!==_0x534e64(0x275)){if(!_0x2a4629)continue;_0x2a4629[_0x534e64(0x4c9)](_0x32bd9c);}else this[_0x534e64(0xa50)](_0xc98a6d,_0x2c5f06['x']+_0x467dee[_0x534e64(0x8b9)]-_0xadf7a9,_0xa4dd86['y'],_0x18bad7);}this[_0x534e64(0x8d9)]();},Window_BattleLog[_0x57e85a(0x16f)][_0x57e85a(0x3ed)]=function(_0x5e60e8,_0x2d0a81,_0x7240ec,_0x32ca6d,_0x22dba8,_0x43b620){const _0x27c2f6=_0x57e85a;_0x5e60e8[_0x27c2f6(0x946)](_0x2d0a81,_0x7240ec,_0x32ca6d,_0x22dba8,_0x43b620,-0x1),this[_0x27c2f6(0x8d9)]();},Window_BattleLog['prototype'][_0x57e85a(0x18e)]=function(_0x8fb1de,_0x34ecb8,_0x77b7ef,_0x4e37fb,_0x4b2ca7,_0x2e67b4,_0x1da3dc){const _0xf70f8a=_0x57e85a,_0x59916c=Math['min'](..._0x34ecb8[_0xf70f8a(0x260)](_0x3ac60b=>_0x3ac60b[_0xf70f8a(0x3ab)]()['_baseX']-_0x3ac60b['battler']()[_0xf70f8a(0x6f2)]()/0x2)),_0x1e4ac3=Math[_0xf70f8a(0xde7)](..._0x34ecb8[_0xf70f8a(0x260)](_0x27da6e=>_0x27da6e[_0xf70f8a(0x3ab)]()['_baseX']+_0x27da6e[_0xf70f8a(0x3ab)]()['mainSpriteWidth']()/0x2)),_0x571dcb=Math[_0xf70f8a(0x16e)](..._0x34ecb8[_0xf70f8a(0x260)](_0x2517bb=>_0x2517bb[_0xf70f8a(0x3ab)]()[_0xf70f8a(0x20d)]-_0x2517bb[_0xf70f8a(0x3ab)]()[_0xf70f8a(0x62d)]())),_0x3ca9fa=Math[_0xf70f8a(0xde7)](..._0x34ecb8[_0xf70f8a(0x260)](_0x40c80b=>_0x40c80b['battler']()[_0xf70f8a(0x20d)])),_0xb5cd2=_0x34ecb8[_0xf70f8a(0x1db)](_0x33a736=>_0x33a736['isActor']())[_0xf70f8a(0xd36)],_0x253259=_0x34ecb8[_0xf70f8a(0x1db)](_0x467004=>_0x467004[_0xf70f8a(0xd89)]())[_0xf70f8a(0xd36)];let _0x158916=0x0,_0x1b88bb=0x0;if(_0x77b7ef[_0xf70f8a(0x392)](/front/i))_0x158916=_0xb5cd2>=_0x253259?_0x59916c:_0x1e4ac3;else{if(_0x77b7ef['match'](/middle/i))_0x158916=(_0x59916c+_0x1e4ac3)/0x2,_0x1da3dc=-0x1;else _0x77b7ef[_0xf70f8a(0x392)](/back/i)&&(_0x158916=_0xb5cd2>=_0x253259?_0x1e4ac3:_0x59916c);}if(_0x77b7ef[_0xf70f8a(0x392)](/head/i)){if(_0xf70f8a(0x57f)===_0xf70f8a(0x75c)){let _0x31535a=_0x314ab6(_0x3ec488['$1']);while(_0x31535a--){const _0x1a6dab=_0x252d17[_0xf70f8a(0xdd9)](0x2)===0x0?this[_0xf70f8a(0xd05)]():this[_0xf70f8a(0xafb)]();_0x129496[_0xf70f8a(0x5fa)](_0x1a6dab[_0xf70f8a(0xe1c)]());}return this[_0xf70f8a(0x97a)](_0x427851);}else _0x1b88bb=_0x571dcb;}else{if(_0x77b7ef[_0xf70f8a(0x392)](/center/i)){if('ZyVYl'===_0xf70f8a(0xb0c))this[_0xf70f8a(0xbac)]=(this[_0xf70f8a(0xbac)]*(_0x5d43f8-0x1)+this[_0xf70f8a(0x83e)])/_0x5c4061,this[_0xf70f8a(0x8b6)]=(this[_0xf70f8a(0x8b6)]*(_0x2912f0-0x1)+this['_targetHomeY'])/_0x489ee8;else{_0x1b88bb=(_0x571dcb+_0x3ca9fa)/0x2;if(_0x8fb1de[_0xf70f8a(0x3ab)]())_0x1b88bb+=_0x8fb1de[_0xf70f8a(0x3ab)]()[_0xf70f8a(0x54b)]/0x2;}}else _0x77b7ef['match'](/base/i)&&(_0x1b88bb=_0x3ca9fa);}_0x8fb1de['moveBattlerToPoint'](_0x158916,_0x1b88bb,_0x4e37fb,_0x4b2ca7,_0x2e67b4,_0x1da3dc),this['callNextMethod']();},Window_BattleLog['prototype']['performJump']=function(_0x334de8,_0x2a2026,_0x361324){const _0x9f4dd4=_0x57e85a;for(const _0x543162 of _0x334de8){if(_0x9f4dd4(0x637)!=='mSlYH')_0x23098c=_0x1f0778[_0x9f4dd4(0x3ab)]()[_0x9f4dd4(0xbac)],_0x3f83c8=_0x5745b9['battler']()[_0x9f4dd4(0x8b6)];else{if(!_0x543162)continue;_0x543162[_0x9f4dd4(0x553)](_0x2a2026,_0x361324);}}this['callNextMethod']();};function Window_BattleMultiTarget(){this['initialize'](...arguments);}Window_BattleMultiTarget[_0x57e85a(0x16f)]=Object[_0x57e85a(0xbae)](Window_Command['prototype']),Window_BattleMultiTarget[_0x57e85a(0x16f)][_0x57e85a(0xd77)]=Window_BattleMultiTarget,VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x478)][_0x57e85a(0x18f)]=VisuMZ['BattleCore']['Settings'][_0x57e85a(0x18f)]||{},Window_BattleMultiTarget['WIDTH']=VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x478)][_0x57e85a(0x18f)][_0x57e85a(0x1ed)]??0x118,Window_BattleMultiTarget[_0x57e85a(0x693)]=VisuMZ['BattleCore']['Settings'][_0x57e85a(0x18f)]['BgType']??0x2,Window_BattleMultiTarget[_0x57e85a(0xa34)]=VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x478)][_0x57e85a(0x18f)][_0x57e85a(0x72d)]??!![],Window_BattleMultiTarget['ALL_ACTORS']=VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x478)][_0x57e85a(0x18f)][_0x57e85a(0x9ce)]??_0x57e85a(0x9e2),Window_BattleMultiTarget[_0x57e85a(0x4a3)]=VisuMZ['BattleCore']['Settings'][_0x57e85a(0x18f)][_0x57e85a(0x38d)]??_0x57e85a(0x9e7),Window_BattleMultiTarget[_0x57e85a(0xcbb)]=VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x478)][_0x57e85a(0x18f)][_0x57e85a(0x752)]??0x0,Window_BattleMultiTarget[_0x57e85a(0x806)]=VisuMZ['BattleCore']['Settings']['MultiTarget']['ActorOffsetY']??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_X']=VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x478)][_0x57e85a(0x18f)][_0x57e85a(0xdcc)]??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_Y']=VisuMZ[_0x57e85a(0x734)][_0x57e85a(0x478)][_0x57e85a(0x18f)][_0x57e85a(0x4b4)]??0x0,Window_BattleMultiTarget[_0x57e85a(0x16f)][_0x57e85a(0x84c)]=function(_0x2900c5,_0x1e7618){const _0x3cb99c=_0x57e85a;this[_0x3cb99c(0xb11)]=_0x1e7618,Window_Command[_0x3cb99c(0x16f)]['initialize'][_0x3cb99c(0xa23)](this,_0x2900c5),this['setBackgroundType'](Window_BattleMultiTarget[_0x3cb99c(0x693)]),this['deactivate'](),this[_0x3cb99c(0x639)](),this[_0x3cb99c(0xdb0)]();},Window_BattleMultiTarget[_0x57e85a(0x16f)][_0x57e85a(0x1c0)]=function(){const _0x5162d9=_0x57e85a;return this[_0x5162d9(0xb11)];},Window_BattleMultiTarget['prototype'][_0x57e85a(0x4f6)]=function(){const _0x61949a=_0x57e85a;let _0x27fc8f=this['forActor']()?Window_BattleMultiTarget[_0x61949a(0x513)]:Window_BattleMultiTarget[_0x61949a(0x4a3)];if(Imported['VisuMZ_0_CoreEngine']&&Window_BattleMultiTarget['SHOW_BUTTON']){if(_0x61949a(0x2c2)!==_0x61949a(0x2c2))_0x566100[_0x61949a(0x1f9)](_0x61949a(0x479));else{this[_0x61949a(0x745)]=this[_0x61949a(0x1c0)]()?_0x61949a(0x7ae):_0x61949a(0x8be),this['_buttonText']=TextManager[_0x61949a(0x7d0)](this[_0x61949a(0x745)]);const _0xdf58d1=VisuMZ[_0x61949a(0x3cc)][_0x61949a(0x478)][_0x61949a(0x91c)][_0x61949a(0x6ae)];_0x27fc8f=_0xdf58d1[_0x61949a(0x554)](this[_0x61949a(0x5fe)],_0x27fc8f);}}this['addCommand'](_0x27fc8f,_0x61949a(0xc79));},Window_BattleMultiTarget[_0x57e85a(0x16f)][_0x57e85a(0xa52)]=function(_0x4189de){const _0x4ee281=_0x57e85a,_0x1bc315=this['itemLineRect'](_0x4189de);this[_0x4ee281(0x835)](),this['changePaintOpacity'](this[_0x4ee281(0x743)](_0x4189de));const _0x1b1b98=this[_0x4ee281(0x276)](_0x4189de),_0x29b495=this[_0x4ee281(0x754)](_0x1b1b98)[_0x4ee281(0x8b9)],_0x38fd4f=_0x1bc315['x']+Math[_0x4ee281(0x7f8)]((_0x1bc315[_0x4ee281(0x8b9)]-_0x29b495)/0x2);this[_0x4ee281(0xa50)](_0x1b1b98,_0x38fd4f,_0x1bc315['y'],_0x1bc315[_0x4ee281(0x8b9)]);},Window_BattleMultiTarget[_0x57e85a(0x16f)][_0x57e85a(0xa02)]=function(){const _0x2a7b60=_0x57e85a;Window_Command[_0x2a7b60(0x16f)][_0x2a7b60(0xa02)][_0x2a7b60(0xa23)](this),this[_0x2a7b60(0x3d2)](),this[_0x2a7b60(0x5d5)]();},Window_BattleMultiTarget[_0x57e85a(0x16f)][_0x57e85a(0x3d2)]=function(){const _0x500579=_0x57e85a;this[_0x500579(0x5b6)]=this['visibilityState']();},Window_BattleMultiTarget[_0x57e85a(0x16f)][_0x57e85a(0x3db)]=function(){const _0xf2b15a=_0x57e85a,_0x28e73c=BattleManager[_0xf2b15a(0xdab)](),_0x5a7685=_0x28e73c&&_0x28e73c[_0xf2b15a(0x7d2)]();if(!_0x5a7685)return![];const _0x368a5c=SceneManager[_0xf2b15a(0xd04)];if(this[_0xf2b15a(0x1c0)]()){if(_0x368a5c[_0xf2b15a(0x895)][_0xf2b15a(0x75e)]&&_0x368a5c[_0xf2b15a(0x895)]['_handlers'][_0xf2b15a(0x7ae)])return!![];if(_0x368a5c[_0xf2b15a(0x973)][_0xf2b15a(0x75e)]&&_0x368a5c['_enemyWindow'][_0xf2b15a(0x872)][_0xf2b15a(0x7ae)])return!![];}else{if(_0x368a5c[_0xf2b15a(0x973)][_0xf2b15a(0x75e)]&&_0x368a5c['_enemyWindow'][_0xf2b15a(0x872)][_0xf2b15a(0x8be)])return!![];}return![];},Window_BattleMultiTarget[_0x57e85a(0x16f)][_0x57e85a(0x5d5)]=function(){const _0x18734b=_0x57e85a;if(!Imported[_0x18734b(0x376)])return;if(this['_buttonText']!==TextManager['getInputButtonString'](this[_0x18734b(0x745)])){if(_0x18734b(0x256)!==_0x18734b(0x79c))this[_0x18734b(0xa6a)]();else return this[_0x18734b(0xded)]();}},Window_BattleMultiTarget[_0x57e85a(0x16f)][_0x57e85a(0x5cc)]=function(){const _0x497196=_0x57e85a;if(this[_0x497196(0x5b6)]&&TouchInput[_0x497196(0x62e)]()){const _0x3c53de=this[_0x497196(0xb67)]();if(_0x3c53de>=0x0){const _0x49ddb8=this[_0x497196(0x1c0)]()?'pagedown':_0x497196(0x8be);Input[_0x497196(0x2c6)](_0x49ddb8);}}};